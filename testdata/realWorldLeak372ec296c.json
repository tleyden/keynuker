{
  "sha": "372ec296c3b4cf61171330d84f8d4500ab25e53e",
  "commit": {
    "author": {
      "name": "Tommie McAfee",
      "email": "tommie@couchbase.com",
      "date": "2015-12-08T22:46:40Z"
    },
    "committer": {
      "name": "Tommie McAfee",
      "email": "tommie@couchbase.com",
      "date": "2015-12-08T22:46:40Z"
    },
    "message": "add ec2 provisioning scripts",
    "tree": {
      "sha": "707ca6bc8748f62e31ec6cdb6a7223c839abb470",
      "url": "https://api.github.com/repos/couchbaselabs/gideon/git/trees/707ca6bc8748f62e31ec6cdb6a7223c839abb470"
    },
    "url": "https://api.github.com/repos/couchbaselabs/gideon/git/commits/372ec296c3b4cf61171330d84f8d4500ab25e53e",
    "comment_count": 0
  },
  "url": "https://api.github.com/repos/couchbaselabs/gideon/commits/372ec296c3b4cf61171330d84f8d4500ab25e53e",
  "html_url": "https://github.com/couchbaselabs/gideon/commit/372ec296c3b4cf61171330d84f8d4500ab25e53e",
  "comments_url": "https://api.github.com/repos/couchbaselabs/gideon/commits/372ec296c3b4cf61171330d84f8d4500ab25e53e/comments",
  "author": null,
  "committer": null,
  "parents": [
    {
      "sha": "2b999f6ba0951a25dfadcc6726d796659e670c73",
      "url": "https://api.github.com/repos/couchbaselabs/gideon/commits/2b999f6ba0951a25dfadcc6726d796659e670c73",
      "html_url": "https://github.com/couchbaselabs/gideon/commit/2b999f6ba0951a25dfadcc6726d796659e670c73"
    }
  ],
  "stats": {
    "total": 3406,
    "additions": 3406,
    "deletions": 0
  },
  "files": [
    {
      "sha": "93022c4e2d7a4ee82208d1529f0559c0325964a9",
      "filename": "ansible/playbooks/ec2/ansible.cfg",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/ansible.cfg",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/ansible.cfg",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/ansible.cfg?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,3 @@\n+[defaults]\n+hostfile = inventory\n+host_key_checking = False\n\\ No newline at end of file"
    },
    {
      "sha": "d4d3135b5a227e1b5432b4a01dbb1e62d9440df6",
      "filename": "ansible/playbooks/ec2/ddoc_2_views.json",
      "status": "added",
      "additions": 11,
      "deletions": 0,
      "changes": 11,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/ddoc_2_views.json",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/ddoc_2_views.json",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/ddoc_2_views.json?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,11 @@\n+{\n+    \"views\":{\n+        \"stats\":{\n+            \"map\": \"function (doc, meta) { emit(meta.id, doc.ops_sec); }\",\n+            \"reduce\": \"_stats\"\n+        },\n+        \"array\":{\n+            \"map\": \"function (doc, meta) { emit(doc.active_hosts, null); }\"\n+        }\n+    }\n+}"
    },
    {
      "sha": "7249dac3dfdfad16785bba5f1db27f903ec31e06",
      "filename": "ansible/playbooks/ec2/generators/aws.sh",
      "status": "added",
      "additions": 16,
      "deletions": 0,
      "changes": 16,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/aws.sh",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/aws.sh",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/generators/aws.sh?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,16 @@\n+#!/bin/bash\n+key_id=\"$3\"\n+key_secret=\"$4\"\n+file=\"$1\"\n+bucket=\"$2\"\n+content_type=\"application/octet-stream\"\n+date=\"$(LC_ALL=C date -u +\"%a, %d %b %Y %X %z\")\"\n+md5=\"$(openssl md5 -binary < \"$file\" | base64)\"\n+\n+sig=\"$(printf \"PUT\\n$md5\\n$content_type\\n$date\\n/$bucket/$file\" | openssl sha1 -binary -hmac \"$key_secret\" | base64)\"\n+\n+curl -T $file http://$bucket.s3.amazonaws.com/$file \\\n+    -H \"Date: $date\" \\\n+    -H \"Authorization: AWS $key_id:$sig\" \\\n+    -H \"Content-Type: $content_type\" \\\n+    -H \"Content-MD5: $md5\""
    },
    {
      "sha": "2c0b94f6e91b588f88b76e7b0ba5c0a9aacc9b1b",
      "filename": "ansible/playbooks/ec2/generators/configuration.py",
      "status": "added",
      "additions": 24,
      "deletions": 0,
      "changes": 24,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/configuration.py",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/configuration.py",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/generators/configuration.py?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,24 @@\n+NUM_CLIENTS=4\n+NUM_BACKUPS=0\n+NUM_COUCHBASE_SERVERS_DATA_CLUSTER1=30\n+NUM_COUCHBASE_SERVERS_DATA_CLUSTER2=0\n+NUM_COUCHBASE_SERVERS_DATA_CLUSTER1_NEW=0\n+NUM_COUCHBASE_SERVERS_DATA_CLUSTER2_NEW=0\n+NUM_COUCHBASE_SERVERS_INDEX=0\n+NUM_COUCHBASE_SERVERS_QUERY=0\n+\n+\n+CLUSTER1_NUM_SERVER_GROUPS=1\n+\n+CLUSTER1_AVAILABILITY_ZONE=\"us-east-1a\"\n+CLUSTER2_AVAILABILITY_ZONE=\"us-east-1c\"\n+\n+CLIENT_INSTANCE_TYPE=\"c3.xlarge\"\n+COUCHBASE_INSTANCE_TYPE=\"r3.4xlarge\" #c3.8xlarge\"\n+BACKUP_INSTANCE_TYPE=\"m4.2xlarge\"\n+\n+CLIENT_IMAGE= \"ami-3eb8fd54\"\n+COUCHBASE_IMAGE=\"ami-a63677cc\"\n+BACKUP_IMAGE=\"ami-zzzzz\"\n+BACKUP_SPACE=\"100\"\n+S3_BUCKET_NAME=\"scalability-mcafee\""
    },
    {
      "sha": "204e763116e30a3b22a909cceb257d82c2df0fc9",
      "filename": "ansible/playbooks/ec2/generators/configuration.pyc",
      "status": "added",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/configuration.pyc",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/configuration.pyc",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/generators/configuration.pyc?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e"
    },
    {
      "sha": "09f65b70492bce9c09189ac1bc1f9bfe878d3d34",
      "filename": "ansible/playbooks/ec2/generators/env.sh",
      "status": "added",
      "additions": 3,
      "deletions": 0,
      "changes": 3,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/env.sh",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/env.sh",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/generators/env.sh?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,3 @@\n+export AWS_ACCESS_KEY_ID=AKIAIBH2CGL2LZ4I3EVA\n+export AWS_SECRET_ACCESS_KEY=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\n+export BUCKET_NAME=scalability-mcafee"
    },
    {
      "sha": "392371ffc1984826c0546725c090f2f8949fbb6e",
      "filename": "ansible/playbooks/ec2/generators/scalability_couchbase.json",
      "status": "added",
      "additions": 1249,
      "deletions": 0,
      "changes": 1249,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/scalability_couchbase.json",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/scalability_couchbase.json",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/generators/scalability_couchbase.json?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,1249 @@\n+{\n+    \"Description\": \"Couchbase Servers\",\n+    \"Parameters\": {\n+        \"KeyNameParameter\": {\n+            \"Description\": \"KeyName\",\n+            \"Type\": \"AWS::EC2::KeyPair::KeyName\"\n+        },\n+        \"SecurityGroupIdParameter\": {\n+            \"Description\": \"SecurityGroupId\",\n+            \"Type\": \"AWS::EC2::SecurityGroup::Id\"\n+        },\n+        \"SubnetId1Parameter\": {\n+            \"Description\": \"SubnetId\",\n+            \"Type\": \"AWS::EC2::Subnet::Id\"\n+        },\n+        \"SubnetId2Parameter\": {\n+            \"Description\": \"SubnetId\",\n+            \"Type\": \"AWS::EC2::Subnet::Id\"\n+        }\n+    },\n+    \"Resources\": {\n+        \"qeclients0\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-3eb8fd54\",\n+                \"InstanceType\": \"c3.xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qeclients0\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"clients\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qeclients1\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-3eb8fd54\",\n+                \"InstanceType\": \"c3.xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qeclients1\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"clients\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qeclients2\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-3eb8fd54\",\n+                \"InstanceType\": \"c3.xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qeclients2\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"clients\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qeclients3\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-3eb8fd54\",\n+                \"InstanceType\": \"c3.xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qeclients3\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"clients\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node0\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node0\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node1\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node1\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node10\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node10\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node11\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node11\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node12\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node12\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node13\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node13\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node14\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node14\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node15\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node15\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node16\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node16\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_secondary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node17\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node17\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_secondary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node18\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node18\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_secondary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node19\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node19\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_secondary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node2\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node2\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node20\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node20\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_secondary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node21\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node21\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_secondary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node22\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node22\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_secondary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node23\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node23\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_secondary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node24\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node24\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_secondary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node25\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node25\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_secondary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node26\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node26\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_secondary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node27\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node27\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_secondary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node28\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node28\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_secondary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node29\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node29\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_secondary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node3\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node3\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node4\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node4\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node5\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node5\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node6\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node6\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node7\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node7\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node8\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node8\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        },\n+        \"qecouchbaseserverdatacluster1node9\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"ImageId\": \"ami-a63677cc\",\n+                \"InstanceType\": \"r3.4xlarge\",\n+                \"KeyName\": {\n+                    \"Ref\": \"KeyNameParameter\"\n+                },\n+                \"SecurityGroupIds\": [\n+                    {\n+                        \"Ref\": \"SecurityGroupIdParameter\"\n+                    }\n+                ],\n+                \"SubnetId\": {\n+                    \"Ref\": \"SubnetId1Parameter\"\n+                },\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Group\",\n+                        \"Value\": \"Group 1\"\n+                    },\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": \"qecouchbaseserverdatacluster1node9\"\n+                    },\n+                    {\n+                        \"Key\": \"Phase\",\n+                        \"Value\": \"node_primary\"\n+                    },\n+                    {\n+                        \"Key\": \"Type\",\n+                        \"Value\": \"couchbaseserver_data_cluster1\"\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::Instance\"\n+        }\n+    }\n+}"
    },
    {
      "sha": "44f564753c5b68cbb675dc1020701cdcf760dab1",
      "filename": "ansible/playbooks/ec2/generators/scalability_couchbase.py",
      "status": "added",
      "additions": 155,
      "deletions": 0,
      "changes": 155,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/scalability_couchbase.py",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/scalability_couchbase.py",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/generators/scalability_couchbase.py?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,155 @@\n+\n+# Python script to generate the cloudformation template json file\n+# This is not strictly needed, but it takes the pain out of writing a\n+# cloudformation template by hand.  It also allows for DRY approaches\n+# to maintaining cloudformation templates.\n+\n+from troposphere import Ref, Template, Parameter, Output, Join, GetAtt, Tags\n+import troposphere.ec2 as ec2\n+import configuration\n+\n+t = Template()\n+\n+t.add_description(\n+    'Couchbase Servers'\n+)\n+\n+keynameparameter = t.add_parameter(Parameter(\n+    'KeyNameParameter', Type='AWS::EC2::KeyPair::KeyName',\n+    Description='KeyName'\n+))\n+\n+subnetid1parameter = t.add_parameter(Parameter(\n+    'SubnetId1Parameter', Type='AWS::EC2::Subnet::Id',\n+    Description='SubnetId'\n+))\n+\n+subnetid2parameter = t.add_parameter(Parameter(\n+    'SubnetId2Parameter', Type='AWS::EC2::Subnet::Id',\n+    Description='SubnetId'\n+))\n+\n+securitygroupidparameter = t.add_parameter(Parameter(\n+    'SecurityGroupIdParameter', Type='AWS::EC2::SecurityGroup::Id',\n+    Description='SecurityGroupId'\n+))\n+\n+# Couchbase Server Instances\n+numNodesPerGroup = configuration.NUM_COUCHBASE_SERVERS_DATA_CLUSTER1 / configuration.CLUSTER1_NUM_SERVER_GROUPS\n+groupnum=1\n+nodesInGroup=0\n+for i in xrange(configuration.NUM_COUCHBASE_SERVERS_DATA_CLUSTER1):\n+    name = \"qecouchbaseserverdatacluster1node{}\".format(i)\n+    group = \"Group {}\".format(groupnum)\n+    instance = ec2.Instance(name)\n+    instance.ImageId = configuration.COUCHBASE_IMAGE\n+    instance.InstanceType = configuration.COUCHBASE_INSTANCE_TYPE\n+    instance.AvailabilityZone = configuration.CLUSTER1_AVAILABILITY_ZONE\n+    instance.SecurityGroupIds = [ Ref(securitygroupidparameter)]\n+    instance.SubnetId = Ref(subnetid1parameter)\n+    instance.KeyName = Ref(keynameparameter)\n+    instancePhase = \"node_primary\"\n+    if i > 15:\n+        instancePhase = \"node_secondary\"\n+    instance.Tags=Tags(Name=name, Type=\"couchbaseserver_data_cluster1\", Group=group, Phase=instancePhase)\n+    t.add_resource(instance)\n+    nodesInGroup+=1\n+    if nodesInGroup == numNodesPerGroup and groupnum < configuration.CLUSTER1_NUM_SERVER_GROUPS:\n+        nodesInGroup = 0\n+        groupnum+=1\n+\n+for i in xrange(configuration.NUM_COUCHBASE_SERVERS_DATA_CLUSTER2):\n+    name = \"couchbaseserverdatacluster2node{}\".format(i)\n+    instance = ec2.Instance(name)\n+    instance.ImageId = configuration.COUCHBASE_IMAGE\n+    instance.InstanceType = configuration.COUCHBASE_INSTANCE_TYPE\n+    instance.AvailabilityZone = configuration.CLUSTER2_AVAILABILITY_ZONE\n+    instance.SecurityGroupIds = [ Ref(securitygroupidparameter)]\n+    instance.SubnetId = Ref(subnetid2parameter)\n+    instance.KeyName = Ref(keynameparameter)\n+    instance.Tags=Tags(Name=name, Type=\"couchbaseserver_data_cluster2\")\n+    t.add_resource(instance)\n+\n+for i in xrange(configuration.NUM_COUCHBASE_SERVERS_DATA_CLUSTER1_NEW):\n+    name = \"couchbaseserverdatacluster1newnode{}\".format(i)\n+    instance = ec2.Instance(name)\n+    instance.ImageId = configuration.COUCHBASE_IMAGE\n+    instance.InstanceType = configuration.COUCHBASE_INSTANCE_TYPE\n+    instance.AvailabilityZone = configuration.CLUSTER1_AVAILABILITY_ZONE\n+    instance.SecurityGroupIds = [ Ref(securitygroupidparameter)]\n+    instance.SubnetId = Ref(subnetid1parameter)\n+    instance.KeyName = Ref(keynameparameter)\n+    instancePhase = \"node_primary\"\n+    if i > 15:\n+        instancePhase = \"node_secondary\"\n+    instance.Tags=Tags(Name=name, Type=\"couchbaseserver_data_cluster1\", Group=group, Phase=instancePhase)\n+\n+    instance.Tags=Tags(Name=name, Type=\"couchbaseserver_data_cluster1_new\")\n+    t.add_resource(instance)\n+\n+for i in xrange(configuration.NUM_COUCHBASE_SERVERS_DATA_CLUSTER2_NEW):\n+    name = \"qecouchbaseserverdatacluster2newnode{}\".format(i)\n+    instance = ec2.Instance(name)\n+    instance.ImageId = configuration.COUCHBASE_IMAGE\n+    instance.InstanceType = configuration.COUCHBASE_INSTANCE_TYPE\n+    instance.AvailabilityZone = configuration.CLUSTER2_AVAILABILITY_ZONE\n+    instance.SecurityGroupIds = [ Ref(securitygroupidparameter)]\n+    instance.SubnetId = Ref(subnetid2parameter)\n+    instance.KeyName = Ref(keynameparameter)\n+    instance.Tags=Tags(Name=name, Type=\"couchbaseserver_data_cluster2_new\")\n+    t.add_resource(instance)\n+\n+\n+for i in xrange(configuration.NUM_COUCHBASE_SERVERS_INDEX):\n+    name = \"couchbaseserverindex{}\".format(i)\n+    instance = ec2.Instance(name)\n+    instance.ImageId = configuration.COUCHBASE_IMAGE\n+    instance.InstanceType = configuration.COUCHBASE_INSTANCE_TYPE\n+    instance.AvailabilityZone = configuration.CLUSTER1_AVAILABILITY_ZONE\n+    instance.SecurityGroupIds = [ Ref(securitygroupidparameter)]\n+    instance.SubnetId = Ref(subnetid1parameter)\n+    instance.KeyName = Ref(keynameparameter)\n+    instance.Tags=Tags(Name=name, Type=\"couchbaseserver_index\")\n+    t.add_resource(instance)\n+\n+\n+for i in xrange(configuration.NUM_COUCHBASE_SERVERS_QUERY):\n+    name = \"couchbaseserverquery{}\".format(i)\n+    instance = ec2.Instance(name)\n+    instance.ImageId = configuration.COUCHBASE_IMAGE\n+    instance.InstanceType = configuration.COUCHBASE_INSTANCE_TYPE\n+    instance.AvailabilityZone = configuration.CLUSTER1_AVAILABILITY_ZONE\n+    instance.SecurityGroupIds = [ Ref(securitygroupidparameter)]\n+    instance.SubnetId = Ref(subnetid1parameter)\n+    instance.KeyName = Ref(keynameparameter)\n+    instance.Tags=Tags(Name=name, Type=\"couchbaseserver_query\")\n+    t.add_resource(instance)\n+\n+for i in xrange(configuration.NUM_CLIENTS):\n+    name = \"qeclients{}\".format(i)\n+    instance = ec2.Instance(name)\n+    instance.ImageId = configuration.CLIENT_IMAGE\n+    instance.InstanceType = configuration.CLIENT_INSTANCE_TYPE\n+    instance.AvailabilityZone = configuration.CLUSTER1_AVAILABILITY_ZONE\n+    instance.SecurityGroupIds = [ Ref(securitygroupidparameter)]\n+    instance.SubnetId = Ref(subnetid1parameter)\n+    instance.KeyName = Ref(keynameparameter)\n+    instance.Tags=Tags(Name=name, Type=\"clients\")\n+    t.add_resource(instance)\n+\n+for i in xrange(configuration.NUM_BACKUPS):\n+    name = \"backups{}\".format(i)\n+    instance = ec2.Instance(name)\n+    instance.ImageId = configuration.BACKUP_IMAGE\n+    instance.InstanceType = configuration.BACKUP_INSTANCE_TYPE\n+    instance.AvailabilityZone = configuration.CLUSTER1_AVAILABILITY_ZONE\n+    instance.BlockDeviceMappings = [{\n+      \"DeviceName\" : \"/dev/sda1\",\n+      \"Ebs\" : { \"VolumeSize\" : configuration.BACKUP_SPACE }}]\n+    instance.SecurityGroupIds = [ Ref(securitygroupidparameter)]\n+    instance.SubnetId = Ref(subnetid1parameter)\n+    instance.KeyName = Ref(keynameparameter)\n+    instance.Tags=Tags(Name=name, Type=\"backups\")\n+    t.add_resource(instance)\n+\n+print(t.to_json())"
    },
    {
      "sha": "a75fdb7262af075f764932689c3d3bdc469359db",
      "filename": "ansible/playbooks/ec2/generators/scalability_top.json",
      "status": "added",
      "additions": 48,
      "deletions": 0,
      "changes": 48,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/scalability_top.json",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/scalability_top.json",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/generators/scalability_top.json?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,48 @@\n+{\n+    \"Description\": \"Toplevel Stack\",\n+    \"Parameters\": {\n+        \"KeyName\": {\n+            \"Description\": \"Name of an existing EC2 KeyPair to enable SSH access\",\n+            \"Type\": \"String\"\n+        }\n+    },\n+    \"Resources\": {\n+        \"couchbaseStack\": {\n+            \"Properties\": {\n+                \"Parameters\": {\n+                    \"KeyNameParameter\": {\n+                        \"Ref\": \"KeyName\"\n+                    },\n+                    \"SecurityGroupIdParameter\": {\n+                        \"Fn::GetAtt\": [\n+                            \"vpcStack\",\n+                            \"Outputs.SecurityGroupId\"\n+                        ]\n+                    },\n+                    \"SubnetId1Parameter\": {\n+                        \"Fn::GetAtt\": [\n+                            \"vpcStack\",\n+                            \"Outputs.SubnetId1\"\n+                        ]\n+                    },\n+                    \"SubnetId2Parameter\": {\n+                        \"Fn::GetAtt\": [\n+                            \"vpcStack\",\n+                            \"Outputs.SubnetId2\"\n+                        ]\n+                    }\n+                },\n+                \"TemplateURL\": \"https://s3.amazonaws.com/scalability-mcafee/scalability_couchbase.json\",\n+                \"TimeoutInMinutes\": 60\n+            },\n+            \"Type\": \"AWS::CloudFormation::Stack\"\n+        },\n+        \"vpcStack\": {\n+            \"Properties\": {\n+                \"TemplateURL\": \"https://s3.amazonaws.com/scalability-mcafee/scalability_vpc.json\",\n+                \"TimeoutInMinutes\": 60\n+            },\n+            \"Type\": \"AWS::CloudFormation::Stack\"\n+        }\n+    }\n+}"
    },
    {
      "sha": "44eca7d0ad561ac09e120a099f62f77639ae2cca",
      "filename": "ansible/playbooks/ec2/generators/scalability_top.py",
      "status": "added",
      "additions": 44,
      "deletions": 0,
      "changes": 44,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/scalability_top.py",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/scalability_top.py",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/generators/scalability_top.py?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,44 @@\n+\n+# Python script to generate the cloudformation template json file\n+# This is not strictly needed, but it takes the pain out of writing a\n+# cloudformation template by hand.  It also allows for DRY approaches\n+# to maintaining cloudformation templates.\n+\n+from troposphere import Ref, Template, Parameter, Output, Join, GetAtt, Tags\n+import troposphere.ec2 as ec2\n+import troposphere.cloudformation as cloudformation\n+import configuration\n+\n+t = Template()\n+\n+t.add_description(\n+    'Toplevel Stack'\n+)\n+\n+#\n+# Parameters\n+#\n+keyname_param = t.add_parameter(Parameter(\n+    'KeyName', Type='String',\n+    Description='Name of an existing EC2 KeyPair to enable SSH access'\n+))\n+\n+\n+instance = cloudformation.Stack(\"vpcStack\")\n+instance.TemplateURL =  \"https://s3.amazonaws.com/\" + configuration.S3_BUCKET_NAME + \"/scalability_vpc.json\"\n+instance.TimeoutInMinutes = 60\n+t.add_resource(instance)\n+\n+\n+\n+p = {\"KeyNameParameter\": Ref(\"KeyName\"), \"SecurityGroupIdParameter\" : GetAtt(\"vpcStack\", \"Outputs.SecurityGroupId\"),\n+     \"SubnetId1Parameter\" : GetAtt(\"vpcStack\", \"Outputs.SubnetId1\"), \"SubnetId2Parameter\" : GetAtt(\"vpcStack\", \"Outputs.SubnetId2\")}\n+\n+\n+instance = cloudformation.Stack(\"couchbaseStack\")\n+instance.TemplateURL = \"https://s3.amazonaws.com/\" + configuration.S3_BUCKET_NAME + \"/scalability_couchbase.json\"\n+instance.TimeoutInMinutes = 60\n+instance.Parameters = p\n+t.add_resource(instance)\n+\n+print(t.to_json())"
    },
    {
      "sha": "8f645ae4f580874c9033ccfd54acb72cd07333ab",
      "filename": "ansible/playbooks/ec2/generators/scalability_vpc.json",
      "status": "added",
      "additions": 360,
      "deletions": 0,
      "changes": 360,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/scalability_vpc.json",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/scalability_vpc.json",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/generators/scalability_vpc.json?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,360 @@\n+{\n+    \"Description\": \"VPC Script\",\n+    \"Outputs\": {\n+        \"SecurityGroupId\": {\n+            \"Description\": \"Security Group ID\",\n+            \"Value\": {\n+                \"Ref\": \"CouchbaseSecurityGroup\"\n+            }\n+        },\n+        \"SubnetId1\": {\n+            \"Description\": \"Subnet ID1\",\n+            \"Value\": {\n+                \"Ref\": \"SUBNET1\"\n+            }\n+        },\n+        \"SubnetId2\": {\n+            \"Description\": \"Subnet ID2\",\n+            \"Value\": {\n+                \"Ref\": \"SUBNET2\"\n+            }\n+        }\n+    },\n+    \"Resources\": {\n+        \"CouchbaseSecurityGroup\": {\n+            \"Properties\": {\n+                \"GroupDescription\": \"Allow access to Couchbase Server\",\n+                \"SecurityGroupIngress\": [\n+                    {\n+                        \"CidrIp\": \"0.0.0.0/0\",\n+                        \"FromPort\": \"22\",\n+                        \"IpProtocol\": \"tcp\",\n+                        \"ToPort\": \"22\"\n+                    },\n+                    {\n+                        \"CidrIp\": \"0.0.0.0/0\",\n+                        \"FromPort\": \"8091\",\n+                        \"IpProtocol\": \"tcp\",\n+                        \"ToPort\": \"8091\"\n+                    },\n+                    {\n+                        \"CidrIp\": \"0.0.0.0/0\",\n+                        \"FromPort\": \"8092\",\n+                        \"IpProtocol\": \"tcp\",\n+                        \"ToPort\": \"8092\"\n+                    },\n+                    {\n+                        \"CidrIp\": \"0.0.0.0/0\",\n+                        \"FromPort\": \"4984\",\n+                        \"IpProtocol\": \"tcp\",\n+                        \"ToPort\": \"4984\"\n+                    },\n+                    {\n+                        \"CidrIp\": \"0.0.0.0/0\",\n+                        \"FromPort\": \"4985\",\n+                        \"IpProtocol\": \"tcp\",\n+                        \"ToPort\": \"4985\"\n+                    },\n+                    {\n+                        \"CidrIp\": \"0.0.0.0/0\",\n+                        \"FromPort\": \"9876\",\n+                        \"IpProtocol\": \"tcp\",\n+                        \"ToPort\": \"9876\"\n+                    }\n+                ],\n+                \"VpcId\": {\n+                    \"Ref\": \"VPC\"\n+                }\n+            },\n+            \"Type\": \"AWS::EC2::SecurityGroup\"\n+        },\n+        \"CouchbaseSecurityGroupIngress11209\": {\n+            \"Properties\": {\n+                \"FromPort\": \"11209\",\n+                \"GroupId\": {\n+                    \"Fn::GetAtt\": [\n+                        \"CouchbaseSecurityGroup\",\n+                        \"GroupId\"\n+                    ]\n+                },\n+                \"IpProtocol\": \"tcp\",\n+                \"SourceSecurityGroupId\": {\n+                    \"Fn::GetAtt\": [\n+                        \"CouchbaseSecurityGroup\",\n+                        \"GroupId\"\n+                    ]\n+                },\n+                \"ToPort\": \"11209\"\n+            },\n+            \"Type\": \"AWS::EC2::SecurityGroupIngress\"\n+        },\n+        \"CouchbaseSecurityGroupIngress11210\": {\n+            \"Properties\": {\n+                \"FromPort\": \"11210\",\n+                \"GroupId\": {\n+                    \"Fn::GetAtt\": [\n+                        \"CouchbaseSecurityGroup\",\n+                        \"GroupId\"\n+                    ]\n+                },\n+                \"IpProtocol\": \"tcp\",\n+                \"SourceSecurityGroupId\": {\n+                    \"Fn::GetAtt\": [\n+                        \"CouchbaseSecurityGroup\",\n+                        \"GroupId\"\n+                    ]\n+                },\n+                \"ToPort\": \"11210\"\n+            },\n+            \"Type\": \"AWS::EC2::SecurityGroupIngress\"\n+        },\n+        \"CouchbaseSecurityGroupIngress11211\": {\n+            \"Properties\": {\n+                \"FromPort\": \"11211\",\n+                \"GroupId\": {\n+                    \"Fn::GetAtt\": [\n+                        \"CouchbaseSecurityGroup\",\n+                        \"GroupId\"\n+                    ]\n+                },\n+                \"IpProtocol\": \"tcp\",\n+                \"SourceSecurityGroupId\": {\n+                    \"Fn::GetAtt\": [\n+                        \"CouchbaseSecurityGroup\",\n+                        \"GroupId\"\n+                    ]\n+                },\n+                \"ToPort\": \"11211\"\n+            },\n+            \"Type\": \"AWS::EC2::SecurityGroupIngress\"\n+        },\n+        \"CouchbaseSecurityGroupIngress21100\": {\n+            \"Properties\": {\n+                \"FromPort\": \"21100\",\n+                \"GroupId\": {\n+                    \"Fn::GetAtt\": [\n+                        \"CouchbaseSecurityGroup\",\n+                        \"GroupId\"\n+                    ]\n+                },\n+                \"IpProtocol\": \"tcp\",\n+                \"SourceSecurityGroupId\": {\n+                    \"Fn::GetAtt\": [\n+                        \"CouchbaseSecurityGroup\",\n+                        \"GroupId\"\n+                    ]\n+                },\n+                \"ToPort\": \"21299\"\n+            },\n+            \"Type\": \"AWS::EC2::SecurityGroupIngress\"\n+        },\n+        \"CouchbaseSecurityGroupIngress4369\": {\n+            \"Properties\": {\n+                \"FromPort\": \"4369\",\n+                \"GroupId\": {\n+                    \"Fn::GetAtt\": [\n+                        \"CouchbaseSecurityGroup\",\n+                        \"GroupId\"\n+                    ]\n+                },\n+                \"IpProtocol\": \"tcp\",\n+                \"SourceSecurityGroupId\": {\n+                    \"Fn::GetAtt\": [\n+                        \"CouchbaseSecurityGroup\",\n+                        \"GroupId\"\n+                    ]\n+                },\n+                \"ToPort\": \"4369\"\n+            },\n+            \"Type\": \"AWS::EC2::SecurityGroupIngress\"\n+        },\n+        \"CouchbaseSecurityGroupIngress5984\": {\n+            \"Properties\": {\n+                \"FromPort\": \"5984\",\n+                \"GroupId\": {\n+                    \"Fn::GetAtt\": [\n+                        \"CouchbaseSecurityGroup\",\n+                        \"GroupId\"\n+                    ]\n+                },\n+                \"IpProtocol\": \"tcp\",\n+                \"SourceSecurityGroupId\": {\n+                    \"Fn::GetAtt\": [\n+                        \"CouchbaseSecurityGroup\",\n+                        \"GroupId\"\n+                    ]\n+                },\n+                \"ToPort\": \"5984\"\n+            },\n+            \"Type\": \"AWS::EC2::SecurityGroupIngress\"\n+        },\n+        \"GATEWAY\": {\n+            \"Properties\": {\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": {\n+                            \"Fn::Join\": [\n+                                \"\",\n+                                [\n+                                    \"gateway-scalability-\",\n+                                    {\n+                                        \"Ref\": \"AWS::Region\"\n+                                    }\n+                                ]\n+                            ]\n+                        }\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::InternetGateway\"\n+        },\n+        \"ROUTE\": {\n+            \"Properties\": {\n+                \"DestinationCidrBlock\": \"0.0.0.0/0\",\n+                \"GatewayId\": {\n+                    \"Ref\": \"GATEWAY\"\n+                },\n+                \"RouteTableId\": {\n+                    \"Ref\": \"ROUTETABLE\"\n+                }\n+            },\n+            \"Type\": \"AWS::EC2::Route\"\n+        },\n+        \"ROUTETABLE\": {\n+            \"Properties\": {\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": {\n+                            \"Fn::Join\": [\n+                                \"\",\n+                                [\n+                                    \"routetable-scalabilty-\",\n+                                    {\n+                                        \"Ref\": \"AWS::Region\"\n+                                    }\n+                                ]\n+                            ]\n+                        }\n+                    }\n+                ],\n+                \"VpcId\": {\n+                    \"Ref\": \"VPC\"\n+                }\n+            },\n+            \"Type\": \"AWS::EC2::RouteTable\"\n+        },\n+        \"SUBNET1\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1a\",\n+                \"CidrBlock\": \"10.0.0.0/17\",\n+                \"MapPublicIpOnLaunch\": \"true\",\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": {\n+                            \"Fn::Join\": [\n+                                \"\",\n+                                [\n+                                    \"subnet1-scalability-\",\n+                                    {\n+                                        \"Ref\": \"AWS::Region\"\n+                                    }\n+                                ]\n+                            ]\n+                        }\n+                    }\n+                ],\n+                \"VpcId\": {\n+                    \"Ref\": \"VPC\"\n+                }\n+            },\n+            \"Type\": \"AWS::EC2::Subnet\"\n+        },\n+        \"SUBNET2\": {\n+            \"Properties\": {\n+                \"AvailabilityZone\": \"us-east-1c\",\n+                \"CidrBlock\": \"10.0.128.0/17\",\n+                \"MapPublicIpOnLaunch\": \"true\",\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": {\n+                            \"Fn::Join\": [\n+                                \"\",\n+                                [\n+                                    \"subnet2-scalability-\",\n+                                    {\n+                                        \"Ref\": \"AWS::Region\"\n+                                    }\n+                                ]\n+                            ]\n+                        }\n+                    }\n+                ],\n+                \"VpcId\": {\n+                    \"Ref\": \"VPC\"\n+                }\n+            },\n+            \"Type\": \"AWS::EC2::Subnet\"\n+        },\n+        \"SUBNETROUTETABLEASSOCATION1\": {\n+            \"Properties\": {\n+                \"RouteTableId\": {\n+                    \"Ref\": \"ROUTETABLE\"\n+                },\n+                \"SubnetId\": {\n+                    \"Ref\": \"SUBNET1\"\n+                }\n+            },\n+            \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"\n+        },\n+        \"SUBNETROUTETABLEASSOCATION2\": {\n+            \"Properties\": {\n+                \"RouteTableId\": {\n+                    \"Ref\": \"ROUTETABLE\"\n+                },\n+                \"SubnetId\": {\n+                    \"Ref\": \"SUBNET2\"\n+                }\n+            },\n+            \"Type\": \"AWS::EC2::SubnetRouteTableAssociation\"\n+        },\n+        \"VPC\": {\n+            \"Properties\": {\n+                \"CidrBlock\": \"10.0.0.0/16\",\n+                \"EnableDnsHostnames\": \"true\",\n+                \"EnableDnsSupport\": \"true\",\n+                \"Tags\": [\n+                    {\n+                        \"Key\": \"Name\",\n+                        \"Value\": {\n+                            \"Fn::Join\": [\n+                                \"\",\n+                                [\n+                                    \"vpc-scalabilty-\",\n+                                    {\n+                                        \"Ref\": \"AWS::Region\"\n+                                    }\n+                                ]\n+                            ]\n+                        }\n+                    }\n+                ]\n+            },\n+            \"Type\": \"AWS::EC2::VPC\"\n+        },\n+        \"VPCGATEWAYATTACHMENT\": {\n+            \"Properties\": {\n+                \"InternetGatewayId\": {\n+                    \"Ref\": \"GATEWAY\"\n+                },\n+                \"VpcId\": {\n+                    \"Ref\": \"VPC\"\n+                }\n+            },\n+            \"Type\": \"AWS::EC2::VPCGatewayAttachment\"\n+        }\n+    }\n+}"
    },
    {
      "sha": "9e8c9db144814331d02b25000d0d4b10cd26dfb3",
      "filename": "ansible/playbooks/ec2/generators/scalability_vpc.py",
      "status": "added",
      "additions": 208,
      "deletions": 0,
      "changes": 208,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/scalability_vpc.py",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/generators/scalability_vpc.py",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/generators/scalability_vpc.py?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,208 @@\n+\n+# Python script to generate the cloudformation template json file\n+# This is not strictly needed, but it takes the pain out of writing a\n+# cloudformation template by hand.  It also allows for DRY approaches\n+# to maintaining cloudformation templates.\n+\n+from troposphere import Ref, Template, Parameter, Output, Join, GetAtt, Tags\n+import troposphere.ec2 as ec2\n+import configuration\n+\n+t = Template()\n+\n+t.add_description(\n+    'VPC Script'\n+)\n+\n+def createCouchbaseVPC(t):\n+    couchbaseVPC = t.add_resource(ec2.VPC(\n+        'VPC', CidrBlock='10.0.0.0/16',\n+        EnableDnsSupport='true',\n+        EnableDnsHostnames='true',\n+        Tags=Tags(Name=Join('', ['vpc-scalabilty-', Ref('AWS::Region')]))\n+    ))\n+    return couchbaseVPC\n+\n+def createCouchbaseInternetGateway(t):\n+    couchbaseInternetGateway = t.add_resource(ec2.InternetGateway(\n+        'GATEWAY',\n+         Tags=Tags(Name=Join('', ['gateway-scalability-', Ref('AWS::Region')]))\n+    ))\n+    return couchbaseInternetGateway\n+\n+def createCouchbaseVPCGatewayAttachment(t, gateway, vpc):\n+    couchbaseVPCGatewayAttachment =  t.add_resource(ec2.VPCGatewayAttachment(\n+        'VPCGATEWAYATTACHMENT',\n+        InternetGatewayId=Ref(gateway),\n+        VpcId=Ref(vpc)\n+    ))\n+    return couchbaseVPCGatewayAttachment\n+\n+def createCouchbaseRouteTable(t, vpc):\n+    couchbaseRouteTable = t.add_resource(ec2.RouteTable(\n+        'ROUTETABLE',\n+        VpcId=Ref(vpc),\n+        Tags=Tags(Name=Join('', ['routetable-scalabilty-', Ref('AWS::Region')]))\n+    ))\n+    return couchbaseRouteTable\n+\n+def createCouchbaseRoute(t, gateway, routetable):\n+    couchbaseRoute = t.add_resource(ec2.Route(\n+        'ROUTE',\n+        DestinationCidrBlock='0.0.0.0/0',\n+        GatewayId=Ref(gateway),\n+        RouteTableId=Ref(routetable)\n+    ))\n+    return couchbaseRoute\n+\n+def createCouchbaseSubnet1(t, vpc):\n+    couchbaseSubnet = t.add_resource(ec2.Subnet(\n+       'SUBNET1',\n+        AvailabilityZone = configuration.CLUSTER1_AVAILABILITY_ZONE,\n+        CidrBlock='10.0.0.0/17',\n+        MapPublicIpOnLaunch='true',\n+        Tags=Tags(Name=Join('', ['subnet1-scalability-', Ref('AWS::Region')])),\n+        VpcId=Ref(vpc)\n+    ))\n+    return couchbaseSubnet\n+\n+def createCouchbaseSubnet2(t, vpc):\n+    couchbaseSubnet = t.add_resource(ec2.Subnet(\n+       'SUBNET2',\n+        AvailabilityZone = configuration.CLUSTER2_AVAILABILITY_ZONE,\n+        CidrBlock='10.0.128.0/17',\n+        MapPublicIpOnLaunch='true',\n+        Tags=Tags(Name=Join('', ['subnet2-scalability-', Ref('AWS::Region')])),\n+        VpcId=Ref(vpc)\n+    ))\n+    return couchbaseSubnet\n+\n+\n+\n+def createCouchbaseSubnetRouteTableAssociation(t, subnet, routetable):\n+    couchbaseSubnetRouteTableAssociation = t.add_resource(ec2.SubnetRouteTableAssociation(\n+        'SUBNETROUTETABLEASSOCATION1',\n+        RouteTableId=Ref(routetable),\n+        SubnetId=Ref(subnet)\n+    ))\n+    return couchbaseSubnetRouteTableAssociation\n+\n+\n+def createCouchbaseSubnetRouteTableAssociation2(t, subnet, routetable):\n+    couchbaseSubnetRouteTableAssociation = t.add_resource(ec2.SubnetRouteTableAssociation(\n+        'SUBNETROUTETABLEASSOCATION2',\n+        RouteTableId=Ref(routetable),\n+        SubnetId=Ref(subnet)\n+    ))\n+    return couchbaseSubnetRouteTableAssociation\n+\n+\n+def createCouchbaseSecurityGroups(t, vpc):\n+\n+    # Couchbase security group\n+    secGrpCouchbase = ec2.SecurityGroup('CouchbaseSecurityGroup')\n+    secGrpCouchbase.GroupDescription = \"Allow access to Couchbase Server\"\n+    secGrpCouchbase.VpcId = Ref(vpc)\n+    secGrpCouchbase.SecurityGroupIngress = [\n+        ec2.SecurityGroupRule(\n+            IpProtocol=\"tcp\",\n+            FromPort=\"22\",\n+            ToPort=\"22\",\n+            CidrIp=\"0.0.0.0/0\",\n+        ),\n+        ec2.SecurityGroupRule(\n+            IpProtocol=\"tcp\",\n+            FromPort=\"8091\",\n+            ToPort=\"8091\",\n+            CidrIp=\"0.0.0.0/0\",\n+        ),\n+        ec2.SecurityGroupRule(\n+            IpProtocol=\"tcp\",\n+            FromPort=\"8092\",\n+            ToPort=\"8092\",\n+            CidrIp=\"0.0.0.0/0\",\n+        ),\n+        ec2.SecurityGroupRule(   # sync gw user port\n+            IpProtocol=\"tcp\",\n+            FromPort=\"4984\",\n+            ToPort=\"4984\",\n+            CidrIp=\"0.0.0.0/0\",\n+        ),\n+        ec2.SecurityGroupRule(   # sync gw admin port\n+            IpProtocol=\"tcp\",\n+            FromPort=\"4985\",\n+            ToPort=\"4985\",\n+            CidrIp=\"0.0.0.0/0\",\n+        ),\n+        ec2.SecurityGroupRule(   # expvars\n+            IpProtocol=\"tcp\",\n+            FromPort=\"9876\",\n+            ToPort=\"9876\",\n+            CidrIp=\"0.0.0.0/0\",\n+        )\n+    ]\n+\n+    # Add security group to template\n+    t.add_resource(secGrpCouchbase)\n+\n+    cbIngressPorts = [\n+        {\"FromPort\": \"4369\", \"ToPort\": \"4369\" },    # couchbase server\n+        {\"FromPort\": \"5984\", \"ToPort\": \"5984\" },    # couchbase server\n+        {\"FromPort\": \"11209\", \"ToPort\": \"11209\" },  # couchbase server \n+        {\"FromPort\": \"11210\", \"ToPort\": \"11210\" },  # couchbase server\n+        {\"FromPort\": \"11211\", \"ToPort\": \"11211\" },  # couchbase server\n+        {\"FromPort\": \"21100\", \"ToPort\": \"21299\" },  # couchbase server\n+    ]\n+\n+    for cbIngressPort in cbIngressPorts:\n+        from_port = cbIngressPort[\"FromPort\"]\n+        to_port = cbIngressPort[\"ToPort\"]\n+        name = 'CouchbaseSecurityGroupIngress{}'.format(from_port)\n+        secGrpCbIngress = ec2.SecurityGroupIngress(name)\n+        secGrpCbIngress.GroupId = GetAtt(secGrpCouchbase, 'GroupId')\n+        secGrpCbIngress.IpProtocol = \"tcp\"\n+        secGrpCbIngress.FromPort = from_port\n+        secGrpCbIngress.ToPort = to_port\n+        secGrpCbIngress.SourceSecurityGroupId = GetAtt(secGrpCouchbase, 'GroupId')\n+        t.add_resource(secGrpCbIngress)\n+\n+    return secGrpCouchbase\n+\n+\n+couchbaseVPC = createCouchbaseVPC(t)\n+couchbaseInternetGateway = createCouchbaseInternetGateway(t)\n+couchbaseVPCGatewayAttachment = createCouchbaseVPCGatewayAttachment(t, couchbaseInternetGateway, couchbaseVPC)\n+couchbaseRouteTable = createCouchbaseRouteTable(t, couchbaseVPC)\n+couchbaseRoute = createCouchbaseRoute(t, couchbaseInternetGateway, couchbaseRouteTable)\n+couchbaseSubnet = createCouchbaseSubnet1(t, couchbaseVPC)\n+couchbaseSubnetRouteTableAssociation = createCouchbaseSubnetRouteTableAssociation(t, couchbaseSubnet, couchbaseRouteTable)\n+secGrpCouchbase = createCouchbaseSecurityGroups(t, couchbaseVPC)\n+\n+\n+couchbaseSubnet2 = createCouchbaseSubnet2(t, couchbaseVPC)\n+couchbaseSubnetRouteTableAssociation2 = createCouchbaseSubnetRouteTableAssociation2(t, couchbaseSubnet2, couchbaseRouteTable)\n+\n+output = Output(\n+    \"SubnetId1\",\n+    Description=\"Subnet ID1\",\n+    Value= Ref(\"SUBNET1\")\n+)\n+t.add_output(output)\n+\n+output = Output(\n+    \"SubnetId2\",\n+    Description=\"Subnet ID2\",\n+    Value= Ref(\"SUBNET2\")\n+)\n+t.add_output(output)\n+\n+\n+output = Output(\n+    \"SecurityGroupId\",\n+    Description=\"Security Group ID\",\n+    Value= Ref(\"CouchbaseSecurityGroup\")\n+)\n+\n+t.add_output(output)\n+\n+print(t.to_json())"
    },
    {
      "sha": "79cfc5c88f802aff0ce9a0c0e11241290d3a9d5c",
      "filename": "ansible/playbooks/ec2/install.yml",
      "status": "added",
      "additions": 39,
      "deletions": 0,
      "changes": 39,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/install.yml",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/install.yml",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/install.yml?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,39 @@\n+---\n+- hosts: tag_Type_couchbaseserver_data_cluster1\n+  remote_user: ubuntu \n+  sudo: true\n+  vars:\n+    couchbase_server_data_path: \"/data\"\n+    couchbase_server_index_path: \"/data\"\n+    build_url: \"https://s3.amazonaws.com/scalability-mcafee/builds/couchbase-server-enterprise_4.5.0-718-debian7_amd64.deb\"\n+    deb_path: \"/tmp/couchbase-server.deb\"\n+  tasks:\n+    - name: mk filesystem\n+      shell: mkfs -t ext4 /dev/xvdb\n+\n+    - name: mount /dev/xvdb\n+      shell: mount /dev/xvdb {{ couchbase_server_data_path }} \n+\n+    - name: chown couchbase:couchbase for /mnt\n+      shell: chown couchbase:couchbase {{ couchbase_server_data_path }}\n+\n+    - name: mkdir cbdata directory\n+      shell: mkdir -p {{ couchbase_server_data_path }}\n+\n+    - name: mkdir cbindex directory\n+      shell: mkdir -p {{ couchbase_server_index_path }}\n+\n+    - name: chown couchbase:couchbase\n+      shell: chown couchbase:couchbase {{ couchbase_server_data_path }}\n+\n+    - name: chown couchbase:couchbase\n+      shell: chown couchbase:couchbase {{ couchbase_server_index_path }}\n+\n+    - name: download binary\n+      get_url: url=\"{{build_url}}\" dest=\"{{deb_path}}\"\n+\n+    - name: install couchbase\n+      apt: deb=\"{{deb_path}}\"\n+\n+    - name: wait for install done\n+      wait_for: port=8091 delay=10"
    },
    {
      "sha": "1866f0bf3d6c27a8957cbdb11a83cb266cbd9d4a",
      "filename": "ansible/playbooks/ec2/inventory/ec2.ini",
      "status": "added",
      "additions": 114,
      "deletions": 0,
      "changes": 114,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/inventory/ec2.ini",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/inventory/ec2.ini",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/inventory/ec2.ini?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,114 @@\n+# Ansible EC2 external inventory script settings\n+#\n+\n+[ec2]\n+\n+# to talk to a private eucalyptus instance uncomment these lines\n+# and edit edit eucalyptus_host to be the host name of your cloud controller\n+#eucalyptus = True\n+#eucalyptus_host = clc.cloud.domain.org\n+\n+# AWS regions to make calls to. Set this to 'all' to make request to all regions\n+# in AWS and merge the results together. Alternatively, set this to a comma\n+# separated list of regions. E.g. 'us-east-1,us-west-1,us-west-2'\n+regions = all\n+regions_exclude = us-gov-west-1,cn-north-1\n+\n+# When generating inventory, Ansible needs to know how to address a server.\n+# Each EC2 instance has a lot of variables associated with it. Here is the list:\n+#   http://docs.pythonboto.org/en/latest/ref/ec2.html#module-boto.ec2.instance\n+# Below are 2 variables that are used as the address of a server:\n+#   - destination_variable\n+#   - vpc_destination_variable\n+\n+# This is the normal destination variable to use. If you are running Ansible\n+# from outside EC2, then 'public_dns_name' makes the most sense. If you are\n+# running Ansible from within EC2, then perhaps you want to use the internal\n+# address, and should set this to 'private_dns_name'. The key of an EC2 tag\n+# may optionally be used; however the boto instance variables hold precedence\n+# in the event of a collision.\n+destination_variable = public_dns_name\n+\n+# For server inside a VPC, using DNS names may not make sense. When an instance\n+# has 'subnet_id' set, this variable is used. If the subnet is public, setting\n+# this to 'ip_address' will return the public IP address. For instances in a\n+# private subnet, this should be set to 'private_ip_address', and Ansible must\n+# be run from within EC2. The key of an EC2 tag may optionally be used; however\n+# the boto instance variables hold precedence in the event of a collision.\n+vpc_destination_variable = ip_address\n+\n+# To tag instances on EC2 with the resource records that point to them from\n+# Route53, uncomment and set 'route53' to True.\n+route53 = False\n+\n+# To exclude RDS instances from the inventory, uncomment and set to False.\n+#rds = False\n+\n+# Additionally, you can specify the list of zones to exclude looking up in\n+# 'route53_excluded_zones' as a comma-separated list.\n+# route53_excluded_zones = samplezone1.com, samplezone2.com\n+\n+# By default, only EC2 instances in the 'running' state are returned. Set\n+# 'all_instances' to True to return all instances regardless of state.\n+all_instances = False\n+\n+# By default, only RDS instances in the 'available' state are returned.  Set\n+# 'all_rds_instances' to True return all RDS instances regardless of state.\n+all_rds_instances = False\n+\n+# API calls to EC2 are slow. For this reason, we cache the results of an API\n+# call. Set this to the path you want cache files to be written to. Two files\n+# will be written to this directory:\n+#   - ansible-ec2.cache\n+#   - ansible-ec2.index\n+cache_path = ~/.ansible/tmp\n+\n+# The number of seconds a cache file is considered valid. After this many\n+# seconds, a new API call will be made, and the cache file will be updated.\n+# To disable the cache, set this value to 0\n+cache_max_age = 300\n+\n+# Organize groups into a nested/hierarchy instead of a flat namespace.\n+nested_groups = False\n+\n+# The EC2 inventory output can become very large. To manage its size,\n+# configure which groups should be created.\n+group_by_instance_id = True\n+group_by_region = True\n+group_by_availability_zone = True\n+group_by_ami_id = True\n+group_by_instance_type = True\n+group_by_key_pair = True\n+group_by_vpc_id = True\n+group_by_security_group = True\n+group_by_tag_keys = True\n+group_by_tag_none = True\n+group_by_route53_names = True\n+group_by_rds_engine = True\n+group_by_rds_parameter_group = True\n+\n+# If you only want to include hosts that match a certain regular expression\n+# pattern_include = stage-*\n+\n+# If you want to exclude any hosts that match a certain regular expression\n+# pattern_exclude = stage-*\n+\n+# Instance filters can be used to control which instances are retrieved for\n+# inventory. For the full list of possible filters, please read the EC2 API\n+# docs: http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-DescribeInstances.html#query-DescribeInstances-filters\n+# Filters are key/value pairs separated by '=', to list multiple filters use\n+# a list separated by commas. See examples below.\n+\n+# Retrieve only instances with (key=value) env=stage tag\n+# instance_filters = tag:env=stage\n+\n+# Retrieve only instances with role=webservers OR role=dbservers tag\n+# instance_filters = tag:role=webservers,tag:role=dbservers\n+\n+# Retrieve only t1.micro instances OR instances with tag env=stage\n+# instance_filters = instance-type=t1.micro,tag:env=stage\n+\n+# You can use wildcards in filter values also. Below will list instances which\n+# tag Name value matches webservers1*\n+# (ex. webservers15, webservers1a, webservers123 etc) \n+# instance_filters = tag:Name=webservers1*"
    },
    {
      "sha": "76871b0266dba0093d9c1e3f553ffd13cfb32b11",
      "filename": "ansible/playbooks/ec2/inventory/ec2.py",
      "status": "added",
      "additions": 804,
      "deletions": 0,
      "changes": 804,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/inventory/ec2.py",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/inventory/ec2.py",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/inventory/ec2.py?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,804 @@\n+#!/usr/bin/env python\n+\n+'''\n+EC2 external inventory script\n+=================================\n+\n+Generates inventory that Ansible can understand by making API request to\n+AWS EC2 using the Boto library.\n+\n+NOTE: This script assumes Ansible is being executed where the environment\n+variables needed for Boto have already been set:\n+    export AWS_ACCESS_KEY_ID='AK123'\n+    export AWS_SECRET_ACCESS_KEY='abc123'\n+\n+This script also assumes there is an ec2.ini file alongside it.  To specify a\n+different path to ec2.ini, define the EC2_INI_PATH environment variable:\n+\n+    export EC2_INI_PATH=/path/to/my_ec2.ini\n+\n+If you're using eucalyptus you need to set the above variables and\n+you need to define:\n+\n+    export EC2_URL=http://hostname_of_your_cc:port/services/Eucalyptus\n+\n+For more details, see: http://docs.pythonboto.org/en/latest/boto_config_tut.html\n+\n+When run against a specific host, this script returns the following variables:\n+ - ec2_ami_launch_index\n+ - ec2_architecture\n+ - ec2_association\n+ - ec2_attachTime\n+ - ec2_attachment\n+ - ec2_attachmentId\n+ - ec2_client_token\n+ - ec2_deleteOnTermination\n+ - ec2_description\n+ - ec2_deviceIndex\n+ - ec2_dns_name\n+ - ec2_eventsSet\n+ - ec2_group_name\n+ - ec2_hypervisor\n+ - ec2_id\n+ - ec2_image_id\n+ - ec2_instanceState\n+ - ec2_instance_type\n+ - ec2_ipOwnerId\n+ - ec2_ip_address\n+ - ec2_item\n+ - ec2_kernel\n+ - ec2_key_name\n+ - ec2_launch_time\n+ - ec2_monitored\n+ - ec2_monitoring\n+ - ec2_networkInterfaceId\n+ - ec2_ownerId\n+ - ec2_persistent\n+ - ec2_placement\n+ - ec2_platform\n+ - ec2_previous_state\n+ - ec2_private_dns_name\n+ - ec2_private_ip_address\n+ - ec2_publicIp\n+ - ec2_public_dns_name\n+ - ec2_ramdisk\n+ - ec2_reason\n+ - ec2_region\n+ - ec2_requester_id\n+ - ec2_root_device_name\n+ - ec2_root_device_type\n+ - ec2_security_group_ids\n+ - ec2_security_group_names\n+ - ec2_shutdown_state\n+ - ec2_sourceDestCheck\n+ - ec2_spot_instance_request_id\n+ - ec2_state\n+ - ec2_state_code\n+ - ec2_state_reason\n+ - ec2_status\n+ - ec2_subnet_id\n+ - ec2_tenancy\n+ - ec2_virtualization_type\n+ - ec2_vpc_id\n+\n+These variables are pulled out of a boto.ec2.instance object. There is a lack of\n+consistency with variable spellings (camelCase and underscores) since this\n+just loops through all variables the object exposes. It is preferred to use the\n+ones with underscores when multiple exist.\n+\n+In addition, if an instance has AWS Tags associated with it, each tag is a new\n+variable named:\n+ - ec2_tag_[Key] = [Value]\n+\n+Security groups are comma-separated in 'ec2_security_group_ids' and\n+'ec2_security_group_names'.\n+'''\n+\n+# (c) 2012, Peter Sankauskas\n+#\n+# This file is part of Ansible,\n+#\n+# Ansible is free software: you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation, either version 3 of the License, or\n+# (at your option) any later version.\n+#\n+# Ansible is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n+\n+######################################################################\n+\n+import sys\n+import os\n+import argparse\n+import re\n+from time import time\n+import boto\n+from boto import ec2\n+from boto import rds\n+from boto import route53\n+import ConfigParser\n+from collections import defaultdict\n+\n+try:\n+    import json\n+except ImportError:\n+    import simplejson as json\n+\n+\n+class Ec2Inventory(object):\n+    def _empty_inventory(self):\n+        return {\"_meta\" : {\"hostvars\" : {}}}\n+\n+    def __init__(self):\n+        ''' Main execution path '''\n+\n+        # Inventory grouped by instance IDs, tags, security groups, regions,\n+        # and availability zones\n+        self.inventory = self._empty_inventory()\n+\n+        # Index of hostname (address) to instance ID\n+        self.index = {}\n+\n+        # Read settings and parse CLI arguments\n+        self.read_settings()\n+        self.parse_cli_args()\n+\n+        # Cache\n+        if self.args.refresh_cache:\n+            self.do_api_calls_update_cache()\n+        elif not self.is_cache_valid():\n+            self.do_api_calls_update_cache()\n+\n+        # Data to print\n+        if self.args.host:\n+            data_to_print = self.get_host_info()\n+\n+        elif self.args.list:\n+            # Display list of instances for inventory\n+            if self.inventory == self._empty_inventory():\n+                data_to_print = self.get_inventory_from_cache()\n+            else:\n+                data_to_print = self.json_format_dict(self.inventory, True)\n+\n+        print data_to_print\n+\n+\n+    def is_cache_valid(self):\n+        ''' Determines if the cache files have expired, or if it is still valid '''\n+\n+        if os.path.isfile(self.cache_path_cache):\n+            mod_time = os.path.getmtime(self.cache_path_cache)\n+            current_time = time()\n+            if (mod_time + self.cache_max_age) > current_time:\n+                if os.path.isfile(self.cache_path_index):\n+                    return True\n+\n+        return False\n+\n+\n+    def read_settings(self):\n+        ''' Reads the settings from the ec2.ini file '''\n+\n+        config = ConfigParser.SafeConfigParser()\n+        ec2_default_ini_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'ec2.ini')\n+        ec2_ini_path = os.environ.get('EC2_INI_PATH', ec2_default_ini_path)\n+        config.read(ec2_ini_path)\n+\n+        # is eucalyptus?\n+        self.eucalyptus_host = None\n+        self.eucalyptus = False\n+        if config.has_option('ec2', 'eucalyptus'):\n+            self.eucalyptus = config.getboolean('ec2', 'eucalyptus')\n+        if self.eucalyptus and config.has_option('ec2', 'eucalyptus_host'):\n+            self.eucalyptus_host = config.get('ec2', 'eucalyptus_host')\n+\n+        # Regions\n+        self.regions = []\n+        configRegions = config.get('ec2', 'regions')\n+        configRegions_exclude = config.get('ec2', 'regions_exclude')\n+        if (configRegions == 'all'):\n+            if self.eucalyptus_host:\n+                self.regions.append(boto.connect_euca(host=self.eucalyptus_host).region.name)\n+            else:\n+                for regionInfo in ec2.regions():\n+                    if regionInfo.name not in configRegions_exclude:\n+                        self.regions.append(regionInfo.name)\n+        else:\n+            self.regions = configRegions.split(\",\")\n+\n+        # Destination addresses\n+        self.destination_variable = config.get('ec2', 'destination_variable')\n+        self.vpc_destination_variable = config.get('ec2', 'vpc_destination_variable')\n+\n+        # Route53\n+        self.route53_enabled = config.getboolean('ec2', 'route53')\n+        self.route53_excluded_zones = []\n+        if config.has_option('ec2', 'route53_excluded_zones'):\n+            self.route53_excluded_zones.extend(\n+                config.get('ec2', 'route53_excluded_zones', '').split(','))\n+\n+        # Include RDS instances?\n+        self.rds_enabled = True\n+        if config.has_option('ec2', 'rds'):\n+            self.rds_enabled = config.getboolean('ec2', 'rds')\n+\n+        # Return all EC2 and RDS instances (if RDS is enabled)\n+        if config.has_option('ec2', 'all_instances'):\n+            self.all_instances = config.getboolean('ec2', 'all_instances')\n+        else:\n+            self.all_instances = False\n+        if config.has_option('ec2', 'all_rds_instances') and self.rds_enabled:\n+            self.all_rds_instances = config.getboolean('ec2', 'all_rds_instances')\n+        else:\n+            self.all_rds_instances = False\n+\n+        # Cache related\n+        cache_dir = os.path.expanduser(config.get('ec2', 'cache_path'))\n+        if not os.path.exists(cache_dir):\n+            os.makedirs(cache_dir)\n+\n+        self.cache_path_cache = cache_dir + \"/ansible-ec2.cache\"\n+        self.cache_path_index = cache_dir + \"/ansible-ec2.index\"\n+        self.cache_max_age = config.getint('ec2', 'cache_max_age')\n+\n+        # Configure nested groups instead of flat namespace.\n+        if config.has_option('ec2', 'nested_groups'):\n+            self.nested_groups = config.getboolean('ec2', 'nested_groups')\n+        else:\n+            self.nested_groups = False\n+\n+        # Configure which groups should be created.\n+        group_by_options = [\n+            'group_by_instance_id',\n+            'group_by_region',\n+            'group_by_availability_zone',\n+            'group_by_ami_id',\n+            'group_by_instance_type',\n+            'group_by_key_pair',\n+            'group_by_vpc_id',\n+            'group_by_security_group',\n+            'group_by_tag_keys',\n+            'group_by_tag_none',\n+            'group_by_route53_names',\n+            'group_by_rds_engine',\n+            'group_by_rds_parameter_group',\n+        ]\n+        for option in group_by_options:\n+            if config.has_option('ec2', option):\n+                setattr(self, option, config.getboolean('ec2', option))\n+            else:\n+                setattr(self, option, True)\n+\n+        # Do we need to just include hosts that match a pattern?\n+        try:\n+            pattern_include = config.get('ec2', 'pattern_include')\n+            if pattern_include and len(pattern_include) > 0:\n+                self.pattern_include = re.compile(pattern_include)\n+            else:\n+                self.pattern_include = None\n+        except ConfigParser.NoOptionError, e:\n+            self.pattern_include = None\n+\n+        # Do we need to exclude hosts that match a pattern?\n+        try:\n+            pattern_exclude = config.get('ec2', 'pattern_exclude');\n+            if pattern_exclude and len(pattern_exclude) > 0:\n+                self.pattern_exclude = re.compile(pattern_exclude)\n+            else:\n+                self.pattern_exclude = None\n+        except ConfigParser.NoOptionError, e:\n+            self.pattern_exclude = None\n+\n+        # Instance filters (see boto and EC2 API docs). Ignore invalid filters.\n+        self.ec2_instance_filters = defaultdict(list)\n+        if config.has_option('ec2', 'instance_filters'):\n+            for instance_filter in config.get('ec2', 'instance_filters', '').split(','):\n+                instance_filter = instance_filter.strip()\n+                if not instance_filter or '=' not in instance_filter:\n+                    continue\n+                filter_key, filter_value = [x.strip() for x in instance_filter.split('=', 1)]\n+                if not filter_key:\n+                    continue\n+                self.ec2_instance_filters[filter_key].append(filter_value)\n+\n+    def parse_cli_args(self):\n+        ''' Command line argument processing '''\n+\n+        parser = argparse.ArgumentParser(description='Produce an Ansible Inventory file based on EC2')\n+        parser.add_argument('--list', action='store_true', default=True,\n+                           help='List instances (default: True)')\n+        parser.add_argument('--host', action='store',\n+                           help='Get all the variables about a specific instance')\n+        parser.add_argument('--refresh-cache', action='store_true', default=False,\n+                           help='Force refresh of cache by making API requests to EC2 (default: False - use cache files)')\n+        self.args = parser.parse_args()\n+\n+\n+    def do_api_calls_update_cache(self):\n+        ''' Do API calls to each region, and save data in cache files '''\n+\n+        if self.route53_enabled:\n+            self.get_route53_records()\n+\n+        for region in self.regions:\n+            self.get_instances_by_region(region)\n+            if self.rds_enabled:\n+                self.get_rds_instances_by_region(region)\n+\n+        self.write_to_cache(self.inventory, self.cache_path_cache)\n+        self.write_to_cache(self.index, self.cache_path_index)\n+\n+    def connect(self, region):\n+        ''' create connection to api server'''\n+        if self.eucalyptus:\n+            conn = boto.connect_euca(host=self.eucalyptus_host)\n+            conn.APIVersion = '2010-08-31'\n+        else:\n+            conn = ec2.connect_to_region(region)\n+        # connect_to_region will fail \"silently\" by returning None if the region name is wrong or not supported\n+        if conn is None:\n+            self.fail_with_error(\"region name: %s likely not supported, or AWS is down.  connection to region failed.\" % region)\n+        return conn\n+\n+    def get_instances_by_region(self, region):\n+        ''' Makes an AWS EC2 API call to the list of instances in a particular\n+        region '''\n+\n+        try:\n+            conn = self.connect(region)\n+            reservations = []\n+            if self.ec2_instance_filters:\n+                for filter_key, filter_values in self.ec2_instance_filters.iteritems():\n+                    reservations.extend(conn.get_all_instances(filters = { filter_key : filter_values }))\n+            else:\n+                reservations = conn.get_all_instances()\n+\n+            for reservation in reservations:\n+                for instance in reservation.instances:\n+                    self.add_instance(instance, region)\n+\n+        except boto.exception.BotoServerError, e:\n+            if e.error_code == 'AuthFailure':\n+                error = self.get_auth_error_message()\n+            else:\n+                backend = 'Eucalyptus' if self.eucalyptus else 'AWS' \n+                error = \"Error connecting to %s backend.\\n%s\" % (backend, e.message)\n+            self.fail_with_error(error)\n+\n+    def get_rds_instances_by_region(self, region):\n+        ''' Makes an AWS API call to the list of RDS instances in a particular\n+        region '''\n+\n+        try:\n+            conn = rds.connect_to_region(region)\n+            if conn:\n+                instances = conn.get_all_dbinstances()\n+                for instance in instances:\n+                    self.add_rds_instance(instance, region)\n+        except boto.exception.BotoServerError, e:\n+            error = e.reason\n+            \n+            if e.error_code == 'AuthFailure':\n+                error = self.get_auth_error_message()\n+            if not e.reason == \"Forbidden\":\n+                error = \"Looks like AWS RDS is down:\\n%s\" % e.message\n+            self.fail_with_error(error)\n+\n+    def get_auth_error_message(self):\n+        ''' create an informative error message if there is an issue authenticating'''\n+        errors = [\"Authentication error retrieving ec2 inventory.\"]\n+        if None in [os.environ.get('AWS_ACCESS_KEY_ID'), os.environ.get('AWS_SECRET_ACCESS_KEY')]:\n+            errors.append(' - No AWS_ACCESS_KEY_ID or AWS_SECRET_ACCESS_KEY environment vars found')\n+        else:\n+            errors.append(' - AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY environment vars found but may not be correct')\n+\n+        boto_paths = ['/etc/boto.cfg', '~/.boto', '~/.aws/credentials']\n+        boto_config_found = list(p for p in boto_paths if os.path.isfile(os.path.expanduser(p)))\n+        if len(boto_config_found) > 0:\n+            errors.append(\" - Boto configs found at '%s', but the credentials contained may not be correct\" % ', '.join(boto_config_found))\n+        else:\n+            errors.append(\" - No Boto config found at any expected location '%s'\" % ', '.join(boto_paths))\n+\n+        return '\\n'.join(errors)\n+        \n+    def fail_with_error(self, err_msg):\n+        '''log an error to std err for ansible-playbook to consume and exit'''\n+        sys.stderr.write(err_msg)\n+        sys.exit(1)\n+\n+    def get_instance(self, region, instance_id):\n+        conn = self.connect(region)\n+\n+        reservations = conn.get_all_instances([instance_id])\n+        for reservation in reservations:\n+            for instance in reservation.instances:\n+                return instance\n+\n+    def add_instance(self, instance, region):\n+        ''' Adds an instance to the inventory and index, as long as it is\n+        addressable '''\n+\n+        # Only want running instances unless all_instances is True\n+        if not self.all_instances and instance.state != 'running':\n+            return\n+\n+        # Select the best destination address\n+        if instance.subnet_id:\n+            dest = getattr(instance, self.vpc_destination_variable, None)\n+            if dest is None:\n+                dest = getattr(instance, 'tags').get(self.vpc_destination_variable, None)\n+        else:\n+            dest = getattr(instance, self.destination_variable, None)\n+            if dest is None:\n+                dest = getattr(instance, 'tags').get(self.destination_variable, None)\n+\n+        if not dest:\n+            # Skip instances we cannot address (e.g. private VPC subnet)\n+            return\n+\n+        # if we only want to include hosts that match a pattern, skip those that don't\n+        if self.pattern_include and not self.pattern_include.match(dest):\n+            return\n+\n+        # if we need to exclude hosts that match a pattern, skip those\n+        if self.pattern_exclude and self.pattern_exclude.match(dest):\n+            return\n+\n+        # Add to index\n+        self.index[dest] = [region, instance.id]\n+\n+        # Inventory: Group by instance ID (always a group of 1)\n+        if self.group_by_instance_id:\n+            self.inventory[instance.id] = [dest]\n+            if self.nested_groups:\n+                self.push_group(self.inventory, 'instances', instance.id)\n+\n+        # Inventory: Group by region\n+        if self.group_by_region:\n+            self.push(self.inventory, region, dest)\n+            if self.nested_groups:\n+                self.push_group(self.inventory, 'regions', region)\n+\n+        # Inventory: Group by availability zone\n+        if self.group_by_availability_zone:\n+            self.push(self.inventory, instance.placement, dest)\n+            if self.nested_groups:\n+                if self.group_by_region:\n+                    self.push_group(self.inventory, region, instance.placement)\n+                self.push_group(self.inventory, 'zones', instance.placement)\n+\n+        # Inventory: Group by Amazon Machine Image (AMI) ID\n+        if self.group_by_ami_id:\n+            ami_id = self.to_safe(instance.image_id)\n+            self.push(self.inventory, ami_id, dest)\n+            if self.nested_groups:\n+                self.push_group(self.inventory, 'images', ami_id)\n+\n+        # Inventory: Group by instance type\n+        if self.group_by_instance_type:\n+            type_name = self.to_safe('type_' + instance.instance_type)\n+            self.push(self.inventory, type_name, dest)\n+            if self.nested_groups:\n+                self.push_group(self.inventory, 'types', type_name)\n+\n+        # Inventory: Group by key pair\n+        if self.group_by_key_pair and instance.key_name:\n+            key_name = self.to_safe('key_' + instance.key_name)\n+            self.push(self.inventory, key_name, dest)\n+            if self.nested_groups:\n+                self.push_group(self.inventory, 'keys', key_name)\n+\n+        # Inventory: Group by VPC\n+        if self.group_by_vpc_id and instance.vpc_id:\n+            vpc_id_name = self.to_safe('vpc_id_' + instance.vpc_id)\n+            self.push(self.inventory, vpc_id_name, dest)\n+            if self.nested_groups:\n+                self.push_group(self.inventory, 'vpcs', vpc_id_name)\n+\n+        # Inventory: Group by security group\n+        if self.group_by_security_group:\n+            try:\n+                for group in instance.groups:\n+                    key = self.to_safe(\"security_group_\" + group.name)\n+                    self.push(self.inventory, key, dest)\n+                    if self.nested_groups:\n+                        self.push_group(self.inventory, 'security_groups', key)\n+            except AttributeError:\n+                self.fail_with_error('\\n'.join(['Package boto seems a bit older.', \n+                                            'Please upgrade boto >= 2.3.0.']))\n+\n+        # Inventory: Group by tag keys\n+        if self.group_by_tag_keys:\n+            for k, v in instance.tags.iteritems():\n+                key = self.to_safe(\"tag_\" + k + \"=\" + v)\n+                self.push(self.inventory, key, dest)\n+                if self.nested_groups:\n+                    self.push_group(self.inventory, 'tags', self.to_safe(\"tag_\" + k))\n+                    self.push_group(self.inventory, self.to_safe(\"tag_\" + k), key)\n+\n+        # Inventory: Group by Route53 domain names if enabled\n+        if self.route53_enabled and self.group_by_route53_names:\n+            route53_names = self.get_instance_route53_names(instance)\n+            for name in route53_names:\n+                self.push(self.inventory, name, dest)\n+                if self.nested_groups:\n+                    self.push_group(self.inventory, 'route53', name)\n+\n+        # Global Tag: instances without tags\n+        if self.group_by_tag_none and len(instance.tags) == 0:\n+            self.push(self.inventory, 'tag_none', dest)\n+            if self.nested_groups:\n+                self.push_group(self.inventory, 'tags', 'tag_none')\n+\n+        # Global Tag: tag all EC2 instances\n+        self.push(self.inventory, 'ec2', dest)\n+\n+        self.inventory[\"_meta\"][\"hostvars\"][dest] = self.get_host_info_dict_from_instance(instance)\n+\n+\n+    def add_rds_instance(self, instance, region):\n+        ''' Adds an RDS instance to the inventory and index, as long as it is\n+        addressable '''\n+\n+        # Only want available instances unless all_rds_instances is True\n+        if not self.all_rds_instances and instance.status != 'available':\n+            return\n+\n+        # Select the best destination address\n+        dest = instance.endpoint[0]\n+\n+        if not dest:\n+            # Skip instances we cannot address (e.g. private VPC subnet)\n+            return\n+\n+        # Add to index\n+        self.index[dest] = [region, instance.id]\n+\n+        # Inventory: Group by instance ID (always a group of 1)\n+        if self.group_by_instance_id:\n+            self.inventory[instance.id] = [dest]\n+            if self.nested_groups:\n+                self.push_group(self.inventory, 'instances', instance.id)\n+\n+        # Inventory: Group by region\n+        if self.group_by_region:\n+            self.push(self.inventory, region, dest)\n+            if self.nested_groups:\n+                self.push_group(self.inventory, 'regions', region)\n+\n+        # Inventory: Group by availability zone\n+        if self.group_by_availability_zone:\n+            self.push(self.inventory, instance.availability_zone, dest)\n+            if self.nested_groups:\n+                if self.group_by_region:\n+                    self.push_group(self.inventory, region, instance.availability_zone)\n+                self.push_group(self.inventory, 'zones', instance.availability_zone)\n+\n+        # Inventory: Group by instance type\n+        if self.group_by_instance_type:\n+            type_name = self.to_safe('type_' + instance.instance_class)\n+            self.push(self.inventory, type_name, dest)\n+            if self.nested_groups:\n+                self.push_group(self.inventory, 'types', type_name)\n+\n+        # Inventory: Group by VPC\n+        if self.group_by_vpc_id and instance.subnet_group and instance.subnet_group.vpc_id:\n+            vpc_id_name = self.to_safe('vpc_id_' + instance.subnet_group.vpc_id)\n+            self.push(self.inventory, vpc_id_name, dest)\n+            if self.nested_groups:\n+                self.push_group(self.inventory, 'vpcs', vpc_id_name)\n+\n+        # Inventory: Group by security group\n+        if self.group_by_security_group:\n+            try:\n+                if instance.security_group:\n+                    key = self.to_safe(\"security_group_\" + instance.security_group.name)\n+                    self.push(self.inventory, key, dest)\n+                    if self.nested_groups:\n+                        self.push_group(self.inventory, 'security_groups', key)\n+\n+            except AttributeError:\n+                self.fail_with_error('\\n'.join(['Package boto seems a bit older.', \n+                                            'Please upgrade boto >= 2.3.0.']))\n+\n+\n+        # Inventory: Group by engine\n+        if self.group_by_rds_engine:\n+            self.push(self.inventory, self.to_safe(\"rds_\" + instance.engine), dest)\n+            if self.nested_groups:\n+                self.push_group(self.inventory, 'rds_engines', self.to_safe(\"rds_\" + instance.engine))\n+\n+        # Inventory: Group by parameter group\n+        if self.group_by_rds_parameter_group:\n+            self.push(self.inventory, self.to_safe(\"rds_parameter_group_\" + instance.parameter_group.name), dest)\n+            if self.nested_groups:\n+                self.push_group(self.inventory, 'rds_parameter_groups', self.to_safe(\"rds_parameter_group_\" + instance.parameter_group.name))\n+\n+        # Global Tag: all RDS instances\n+        self.push(self.inventory, 'rds', dest)\n+\n+        self.inventory[\"_meta\"][\"hostvars\"][dest] = self.get_host_info_dict_from_instance(instance)\n+\n+\n+    def get_route53_records(self):\n+        ''' Get and store the map of resource records to domain names that\n+        point to them. '''\n+\n+        r53_conn = route53.Route53Connection()\n+        all_zones = r53_conn.get_zones()\n+\n+        route53_zones = [ zone for zone in all_zones if zone.name[:-1]\n+                          not in self.route53_excluded_zones ]\n+\n+        self.route53_records = {}\n+\n+        for zone in route53_zones:\n+            rrsets = r53_conn.get_all_rrsets(zone.id)\n+\n+            for record_set in rrsets:\n+                record_name = record_set.name\n+\n+                if record_name.endswith('.'):\n+                    record_name = record_name[:-1]\n+\n+                for resource in record_set.resource_records:\n+                    self.route53_records.setdefault(resource, set())\n+                    self.route53_records[resource].add(record_name)\n+\n+\n+    def get_instance_route53_names(self, instance):\n+        ''' Check if an instance is referenced in the records we have from\n+        Route53. If it is, return the list of domain names pointing to said\n+        instance. If nothing points to it, return an empty list. '''\n+\n+        instance_attributes = [ 'public_dns_name', 'private_dns_name',\n+                                'ip_address', 'private_ip_address' ]\n+\n+        name_list = set()\n+\n+        for attrib in instance_attributes:\n+            try:\n+                value = getattr(instance, attrib)\n+            except AttributeError:\n+                continue\n+\n+            if value in self.route53_records:\n+                name_list.update(self.route53_records[value])\n+\n+        return list(name_list)\n+\n+\n+    def get_host_info_dict_from_instance(self, instance):\n+        instance_vars = {}\n+        for key in vars(instance):\n+            value = getattr(instance, key)\n+            key = self.to_safe('ec2_' + key)\n+\n+            # Handle complex types\n+            # state/previous_state changed to properties in boto in https://github.com/boto/boto/commit/a23c379837f698212252720d2af8dec0325c9518\n+            if key == 'ec2__state':\n+                instance_vars['ec2_state'] = instance.state or ''\n+                instance_vars['ec2_state_code'] = instance.state_code\n+            elif key == 'ec2__previous_state':\n+                instance_vars['ec2_previous_state'] = instance.previous_state or ''\n+                instance_vars['ec2_previous_state_code'] = instance.previous_state_code\n+            elif type(value) in [int, bool]:\n+                instance_vars[key] = value\n+            elif type(value) in [str, unicode]:\n+                instance_vars[key] = value.strip()\n+            elif type(value) == type(None):\n+                instance_vars[key] = ''\n+            elif key == 'ec2_region':\n+                instance_vars[key] = value.name\n+            elif key == 'ec2__placement':\n+                instance_vars['ec2_placement'] = value.zone\n+            elif key == 'ec2_tags':\n+                for k, v in value.iteritems():\n+                    key = self.to_safe('ec2_tag_' + k)\n+                    instance_vars[key] = v\n+            elif key == 'ec2_groups':\n+                group_ids = []\n+                group_names = []\n+                for group in value:\n+                    group_ids.append(group.id)\n+                    group_names.append(group.name)\n+                instance_vars[\"ec2_security_group_ids\"] = ','.join([str(i) for i in group_ids])\n+                instance_vars[\"ec2_security_group_names\"] = ','.join([str(i) for i in group_names])\n+            else:\n+                pass\n+                # TODO Product codes if someone finds them useful\n+                #print key\n+                #print type(value)\n+                #print value\n+\n+        return instance_vars\n+\n+    def get_host_info(self):\n+        ''' Get variables about a specific host '''\n+\n+        if len(self.index) == 0:\n+            # Need to load index from cache\n+            self.load_index_from_cache()\n+\n+        if not self.args.host in self.index:\n+            # try updating the cache\n+            self.do_api_calls_update_cache()\n+            if not self.args.host in self.index:\n+                # host might not exist anymore\n+                return self.json_format_dict({}, True)\n+\n+        (region, instance_id) = self.index[self.args.host]\n+\n+        instance = self.get_instance(region, instance_id)\n+        return self.json_format_dict(self.get_host_info_dict_from_instance(instance), True)\n+\n+    def push(self, my_dict, key, element):\n+        ''' Push an element onto an array that may not have been defined in\n+        the dict '''\n+        group_info = my_dict.setdefault(key, [])\n+        if isinstance(group_info, dict):\n+            host_list = group_info.setdefault('hosts', [])\n+            host_list.append(element)\n+        else:\n+            group_info.append(element)\n+\n+    def push_group(self, my_dict, key, element):\n+        ''' Push a group as a child of another group. '''\n+        parent_group = my_dict.setdefault(key, {})\n+        if not isinstance(parent_group, dict):\n+            parent_group = my_dict[key] = {'hosts': parent_group}\n+        child_groups = parent_group.setdefault('children', [])\n+        if element not in child_groups:\n+            child_groups.append(element)\n+\n+    def get_inventory_from_cache(self):\n+        ''' Reads the inventory from the cache file and returns it as a JSON\n+        object '''\n+\n+        cache = open(self.cache_path_cache, 'r')\n+        json_inventory = cache.read()\n+        return json_inventory\n+\n+\n+    def load_index_from_cache(self):\n+        ''' Reads the index from the cache file sets self.index '''\n+\n+        cache = open(self.cache_path_index, 'r')\n+        json_index = cache.read()\n+        self.index = json.loads(json_index)\n+\n+\n+    def write_to_cache(self, data, filename):\n+        ''' Writes data in JSON format to a file '''\n+\n+        json_data = self.json_format_dict(data, True)\n+        cache = open(filename, 'w')\n+        cache.write(json_data)\n+        cache.close()\n+\n+\n+    def to_safe(self, word):\n+        ''' Converts 'bad' characters in a string to underscores so they can be\n+        used as Ansible groups '''\n+\n+        return re.sub(\"[^A-Za-z0-9\\_]\", \"_\", word)\n+\n+\n+    def json_format_dict(self, data, pretty=False):\n+        ''' Converts a dict to a JSON object and dumps it as a formatted\n+        string '''\n+\n+        if pretty:\n+            return json.dumps(data, sort_keys=True, indent=2)\n+        else:\n+            return json.dumps(data)\n+\n+\n+# Run the script\n+Ec2Inventory()"
    },
    {
      "sha": "59f32dadb5d1c9fa813a5f9a29aab595b23dea61",
      "filename": "ansible/playbooks/ec2/provision.yml",
      "status": "added",
      "additions": 88,
      "deletions": 0,
      "changes": 88,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/provision.yml",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/provision.yml",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/provision.yml?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,88 @@\n+---\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node0\n+  remote_user: ubuntu\n+  vars:\n+    couchbase_server_cluster_primary_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  connection: local\n+  tasks:\n+    - shell: echo {{couchbase_server_cluster_primary_node}} > ../../temp_couchbase_server_cluster_primary_node\n+\n+- hosts: tag_Type_couchbaseserver_data_cluster1\n+  vars:\n+   data_path: \"/data\"\n+   index_path: \"/data\"\n+   rest_user: \"Administrator\"\n+   rest_pass: \"password\"\n+   rest_port: 8091\n+   cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+   couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  remote_user: root\n+  tasks:\n+    - name: set couchbase_server_cluster_primary_node variable\n+      set_fact:\n+        couchbase_server_cluster_primary_node: \"{{ lookup('file', '../../temp_couchbase_server_cluster_primary_node') }}\"\n+\n+    - name: init data paths\n+      shell: \"{{cli_bin}} node-init -c {{couchbase_server_node}} --node-init-data-path={{data_path}} --node-init-index-path={{index_path}} -u {{rest_user}} -p {{rest_pass}}\"\n+\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node0\n+  vars:\n+   cluster_user: \"Administrator\"\n+   cluster_pass: \"password\"\n+   cluster_port: 8091\n+   services: \"data\"\n+   ram_size: 6200\n+   cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+   couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  remote_user: root\n+  tasks:\n+    - name: init cluster\n+      shell: \"{{cli_bin}} cluster-init -c {{couchbase_server_node}} --cluster-username={{cluster_user}} --cluster-password={{cluster_pass}} --cluster-port={{cluster_port}} --cluster-ramsize={{ram_size}} --services={{services}}\"\n+\n+\n+- hosts: tag_Phase_node_primary \n+  vars:\n+   data_path: \"/data\"\n+   index_path: \"/data\"\n+   rest_user: \"Administrator\"\n+   rest_pass: \"password\"\n+   rest_port: 8091\n+   cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+   couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  remote_user: root\n+  tasks:\n+    - name: set couchbase_server_cluster_primary_node variable\n+      set_fact:\n+        couchbase_server_cluster_primary_node: \"{{ lookup('file', '../../temp_couchbase_server_cluster_primary_node') }}\"\n+    - name: join cluster\n+      shell: \"{{cli_bin}} server-add -c {{couchbase_server_cluster_primary_node}} --server-add={{couchbase_server_node}}:{{rest_port}} --server-add-username={{rest_user}} --server-add-password={{rest_pass}} -u {{rest_user}} -p {{rest_pass}}\"\n+      when: couchbase_server_node != couchbase_server_cluster_primary_node \n+\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node0\n+  vars:\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    bucket0: \"default\"\n+    bucket1: \"bucket1\"\n+    bucket2: \"bucket2\"\n+    bucket_size_main: 4096\n+    bucket_size_small:  1024\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    view_spec: \"ddoc_2_views.json\"\n+    ddoc_name: \"scale\"\n+    ddoc_url: \"http://{{groups['orchestrator'][0]}}:8092/{{bucket0}}/_design/{{ddoc_name}}\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+   - name: rebalance in nodes\n+     shell: \"{{cli_bin}} rebalance -c {{couchbase_server_node}} -u {{rest_user}} -p {{rest_pass}}\"\n+   - name: create bucket0\n+     shell: \"{{cli_bin}}  bucket-create -c  {{couchbase_server_node}} -u {{rest_user}} -p {{rest_pass}} --bucket={{bucket0}} --bucket-ramsize={{bucket_size_main}} --bucket-type=couchbase --wait\"\n+   - name: create bucket1\n+     shell: \"{{cli_bin}}  bucket-create -c  {{couchbase_server_node}} -u {{rest_user}} -p {{rest_pass}} --bucket={{bucket1}} --bucket-ramsize={{bucket_size_small}} --bucket-type=couchbase --wait\"\n+   - name: create bucket2\n+     shell: \"{{cli_bin}}  bucket-create -c  {{couchbase_server_node}} -u {{rest_user}} -p {{rest_pass}} --bucket={{bucket2}} --bucket-ramsize={{bucket_size_small}} --bucket-type=couchbase --wait\"\n+   - name: copy view spec\n+     copy: src=\"{{view_spec}}\"  dest=/tmp/views.json\n+   - name: post view spec\n+     shell: \"curl -X PUT -u {{rest_user}}:{{rest_pass}} -H 'Content-Type: application/json' {{ddoc_url}} -d@/tmp/views.json\"\n+"
    },
    {
      "sha": "f46b0fb93aa84dddb82499a50b4eaf8d69bcf625",
      "filename": "ansible/playbooks/ec2/test.yml",
      "status": "added",
      "additions": 240,
      "deletions": 0,
      "changes": 240,
      "blob_url": "https://github.com/couchbaselabs/gideon/blob/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/test.yml",
      "raw_url": "https://github.com/couchbaselabs/gideon/raw/372ec296c3b4cf61171330d84f8d4500ab25e53e/ansible/playbooks/ec2/test.yml",
      "contents_url": "https://api.github.com/repos/couchbaselabs/gideon/contents/ansible/playbooks/ec2/test.yml?ref=372ec296c3b4cf61171330d84f8d4500ab25e53e",
      "patch": "@@ -0,0 +1,240 @@\n+---\n+- hosts: tag_Type_clients\n+  remote_user: ubuntu\n+  sudo: true\n+  vars:\n+   ops_main: 4000\n+   ops_small: 1000\n+   create_perc: 30\n+   get_perc: 60\n+   delete_perc: 10\n+   sizes: \"128 256\"\n+   bucket0: \"default\"\n+   bucket1: \"bucket1\"\n+   bucket2: \"bucket2\"\n+  tasks:\n+    - name: checkout client repo\n+      git: repo=https://github.com/couchbaselabs/gideon dest=gideon/\n+    - name: start workload for bucket0\n+      shell: \"nohup python gideon.py --ops {{ops_main}} --create {{create_perc}} --get {{get_perc}} --delete {{delete_perc}} --hosts {{groups['orchestrator'][0]}} --bucket {{bucket0}} --sizes {{sizes}} &\"\n+      args:\n+          chdir: gideon/\n+    - name: start workload for bucket1\n+      shell: \"nohup python gideon.py --ops {{ops_small}} --create {{create_perc}} --get {{get_perc}} --delete {{delete_perc}} --hosts {{groups['orchestrator'][0]}} --bucket {{bucket1}}&\"\n+      args:\n+          chdir: gideon/\n+    - name: start workload for bucket2\n+      shell: \"nohup python gideon.py --ops {{ops_small}} --create {{create_perc}} --get {{get_perc}} --delete {{delete_perc}} --hosts {{groups['orchestrator'][0]}} --bucket {{bucket2}}&\"\n+      args:\n+          chdir: gideon/\n+\n+# do rebalances  @2x increments\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node15:tag_Name_qecouchbaseserverdatacluster1node16\n+  vars:\n+    rest_port: 8091\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    rest_port: 8091\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+    - name: set couchbase_server_cluster_primary_node variable\n+      set_fact:\n+        couchbase_server_cluster_primary_node: \"{{ lookup('file', '../../temp_couchbase_server_cluster_primary_node') }}\"\n+\n+    - name: add 2 nodes\n+      shell: \"{{cli_bin}} server-add -c {{couchbase_server_cluster_primary_node}}:{{rest_port}} --server-add={{couchbase_server_node}}:{{rest_port}} --server-add-username={{rest_user}} --server-add-password={{rest_pass}} -u {{rest_user}} -p {{rest_pass}}\"\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node0\n+  vars:\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+    - name: rebalance\n+      shell: \"{{cli_bin}} rebalance -c {{couchbase_server_node}} -u {{rest_user}} -p {{rest_pass}}\"\n+    - name: wait for 10 minutes\n+      wait_for: timeout=600\n+\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node17:tag_Name_qecouchbaseserverdatacluster1node18\n+  vars:\n+    rest_port: 8091\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    rest_port: 8091\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+    - name: set couchbase_server_cluster_primary_node variable\n+      set_fact:\n+        couchbase_server_cluster_primary_node: \"{{ lookup('file', '../../temp_couchbase_server_cluster_primary_node') }}\"\n+\n+    - name: add 2 nodes\n+      shell: \"{{cli_bin}} server-add -c {{couchbase_server_cluster_primary_node}}:{{rest_port}} --server-add={{couchbase_server_node}}:{{rest_port}} --server-add-username={{rest_user}} --server-add-password={{rest_pass}} -u {{rest_user}} -p {{rest_pass}}\"\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node0\n+  vars:\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+    - name: rebalance\n+      shell: \"{{cli_bin}} rebalance -c {{couchbase_server_node}} -u {{rest_user}} -p {{rest_pass}}\"\n+    - name: wait for 10 minutes\n+      wait_for: timeout=600\n+\n+\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node19:tag_Name_qecouchbaseserverdatacluster1node20\n+  vars:\n+    rest_port: 8091\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    rest_port: 8091\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+    - name: set couchbase_server_cluster_primary_node variable\n+      set_fact:\n+        couchbase_server_cluster_primary_node: \"{{ lookup('file', '../../temp_couchbase_server_cluster_primary_node') }}\"\n+\n+    - name: add 2 nodes\n+      shell: \"{{cli_bin}} server-add -c {{couchbase_server_cluster_primary_node}}:{{rest_port}} --server-add={{couchbase_server_node}}:{{rest_port}} --server-add-username={{rest_user}} --server-add-password={{rest_pass}} -u {{rest_user}} -p {{rest_pass}}\"\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node0\n+  vars:\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+    - name: rebalance\n+      shell: \"{{cli_bin}} rebalance -c {{couchbase_server_node}} -u {{rest_user}} -p {{rest_pass}}\"\n+    - name: wait for 10 minutes\n+      wait_for: timeout=600\n+\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node21:tag_Name_qecouchbaseserverdatacluster1node22\n+  vars:\n+    rest_port: 8091\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    rest_port: 8091\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+    - name: set couchbase_server_cluster_primary_node variable\n+      set_fact:\n+        couchbase_server_cluster_primary_node: \"{{ lookup('file', '../../temp_couchbase_server_cluster_primary_node') }}\"\n+\n+    - name: add 2 nodes\n+      shell: \"{{cli_bin}} server-add -c {{couchbase_server_cluster_primary_node}}:{{rest_port}} --server-add={{couchbase_server_node}}:{{rest_port}} --server-add-username={{rest_user}} --server-add-password={{rest_pass}} -u {{rest_user}} -p {{rest_pass}}\"\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node0\n+  vars:\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+    - name: rebalance\n+      shell: \"{{cli_bin}} rebalance -c {{couchbase_server_node}} -u {{rest_user}} -p {{rest_pass}}\"\n+    - name: wait for 10 minutes\n+      wait_for: timeout=600\n+\n+\n+\n+\n+\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node23:tag_Name_qecouchbaseserverdatacluster1node24\n+  vars:\n+    rest_port: 8091\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    rest_port: 8091\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+    - name: set couchbase_server_cluster_primary_node variable\n+      set_fact:\n+        couchbase_server_cluster_primary_node: \"{{ lookup('file', '../../temp_couchbase_server_cluster_primary_node') }}\"\n+\n+    - name: add 2 nodes\n+      shell: \"{{cli_bin}} server-add -c {{couchbase_server_cluster_primary_node}}:{{rest_port}} --server-add={{couchbase_server_node}}:{{rest_port}} --server-add-username={{rest_user}} --server-add-password={{rest_pass}} -u {{rest_user}} -p {{rest_pass}}\"\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node0\n+  vars:\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+    - name: rebalance\n+      shell: \"{{cli_bin}} rebalance -c {{couchbase_server_node}} -u {{rest_user}} -p {{rest_pass}}\"\n+    - name: wait for 10 minutes\n+      wait_for: timeout=600\n+\n+\n+\n+\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node25:tag_Name_qecouchbaseserverdatacluster1node26\n+  vars:\n+    rest_port: 8091\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    rest_port: 8091\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+    - name: set couchbase_server_cluster_primary_node variable\n+      set_fact:\n+        couchbase_server_cluster_primary_node: \"{{ lookup('file', '../../temp_couchbase_server_cluster_primary_node') }}\"\n+\n+    - name: add 2 nodes\n+      shell: \"{{cli_bin}} server-add -c {{couchbase_server_cluster_primary_node}}:{{rest_port}} --server-add={{couchbase_server_node}}:{{rest_port}} --server-add-username={{rest_user}} --server-add-password={{rest_pass}} -u {{rest_user}} -p {{rest_pass}}\"\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node0\n+  vars:\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+    - name: rebalance\n+      shell: \"{{cli_bin}} rebalance -c {{couchbase_server_node}} -u {{rest_user}} -p {{rest_pass}}\"\n+    - name: wait for 10 minutes\n+      wait_for: timeout=600\n+\n+\n+\n+\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node27:tag_Name_qecouchbaseserverdatacluster1node28\n+  vars:\n+    rest_port: 8091\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    rest_port: 8091\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+    - name: set couchbase_server_cluster_primary_node variable\n+      set_fact:\n+        couchbase_server_cluster_primary_node: \"{{ lookup('file', '../../temp_couchbase_server_cluster_primary_node') }}\"\n+\n+    - name: add 2 nodes\n+      shell: \"{{cli_bin}} server-add -c {{couchbase_server_cluster_primary_node}}:{{rest_port}} --server-add={{couchbase_server_node}}:{{rest_port}} --server-add-username={{rest_user}} --server-add-password={{rest_pass}} -u {{rest_user}} -p {{rest_pass}}\"\n+- hosts: tag_Name_qecouchbaseserverdatacluster1node0\n+  vars:\n+    rest_user: \"Administrator\"\n+    rest_pass: \"password\"\n+    cli_bin:  \"/opt/couchbase/bin/couchbase-cli\"\n+    couchbase_server_node: \"{{hostvars[ec2_ip_address]['ec2_private_dns_name']}}\"\n+  tasks:\n+    - name: rebalance\n+      shell: \"{{cli_bin}} rebalance -c {{couchbase_server_node}} -u {{rest_user}} -p {{rest_pass}}\"\n+    - name: wait for 10 minutes\n+      wait_for: timeout=600\n+\n+\n+\n+# done\n+- hosts: tag_Type_clients\n+  tasks:\n+    - name: done! stop clients\n+      shell: \"ps aux | grep gideon | awk '{print $2}' | xargs -I '{}' kill -s 9 '{}'\"\n+      ignore_errors: True\n+"
    }
  ]
}
