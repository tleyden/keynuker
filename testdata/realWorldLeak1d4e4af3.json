{
  "sha": "1d4e4af3c963b65525e7521f88bf9091d73bf44b",
  "commit": {
    "author": {
      "name": "piushs",
      "email": "srivastava.piush@gmail.com",
      "date": "2014-08-22T20:55:11Z"
    },
    "committer": {
      "name": "piushs",
      "email": "srivastava.piush@gmail.com",
      "date": "2014-08-22T20:55:11Z"
    },
    "message": "Del",
    "tree": {
      "sha": "4b825dc642cb6eb9a060e54bf8d69288fbee4904",
      "url": "https://api.github.com/repos/couchbaselabs/cloudhosting/git/trees/4b825dc642cb6eb9a060e54bf8d69288fbee4904"
    },
    "url": "https://api.github.com/repos/couchbaselabs/cloudhosting/git/commits/1d4e4af3c963b65525e7521f88bf9091d73bf44b",
    "comment_count": 0
  },
  "url": "https://api.github.com/repos/couchbaselabs/cloudhosting/commits/1d4e4af3c963b65525e7521f88bf9091d73bf44b",
  "html_url": "https://github.com/couchbaselabs/cloudhosting/commit/1d4e4af3c963b65525e7521f88bf9091d73bf44b",
  "comments_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/commits/1d4e4af3c963b65525e7521f88bf9091d73bf44b/comments",
  "author": {
    "login": "piushs",
    "id": 6962738,
    "avatar_url": "https://avatars0.githubusercontent.com/u/6962738?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/piushs",
    "html_url": "https://github.com/piushs",
    "followers_url": "https://api.github.com/users/piushs/followers",
    "following_url": "https://api.github.com/users/piushs/following{/other_user}",
    "gists_url": "https://api.github.com/users/piushs/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/piushs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/piushs/subscriptions",
    "organizations_url": "https://api.github.com/users/piushs/orgs",
    "repos_url": "https://api.github.com/users/piushs/repos",
    "events_url": "https://api.github.com/users/piushs/events{/privacy}",
    "received_events_url": "https://api.github.com/users/piushs/received_events",
    "type": "User",
    "site_admin": false
  },
  "committer": {
    "login": "piushs",
    "id": 6962738,
    "avatar_url": "https://avatars0.githubusercontent.com/u/6962738?v=4",
    "gravatar_id": "",
    "url": "https://api.github.com/users/piushs",
    "html_url": "https://github.com/piushs",
    "followers_url": "https://api.github.com/users/piushs/followers",
    "following_url": "https://api.github.com/users/piushs/following{/other_user}",
    "gists_url": "https://api.github.com/users/piushs/gists{/gist_id}",
    "starred_url": "https://api.github.com/users/piushs/starred{/owner}{/repo}",
    "subscriptions_url": "https://api.github.com/users/piushs/subscriptions",
    "organizations_url": "https://api.github.com/users/piushs/orgs",
    "repos_url": "https://api.github.com/users/piushs/repos",
    "events_url": "https://api.github.com/users/piushs/events{/privacy}",
    "received_events_url": "https://api.github.com/users/piushs/received_events",
    "type": "User",
    "site_admin": false
  },
  "parents": [
    {
      "sha": "09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "url": "https://api.github.com/repos/couchbaselabs/cloudhosting/commits/09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "html_url": "https://github.com/couchbaselabs/cloudhosting/commit/09da2942f50f8a56b2af05165b41e1520a6b8bab"
    }
  ],
  "stats": {
    "total": 1031204,
    "additions": 0,
    "deletions": 1031204
  },
  "files": [
    {
      "sha": "86c003c759d5a5fab48389f765df71ef975fbc78",
      "filename": "CouchbaseCloud/.DS_Store",
      "status": "removed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.DS_Store",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.DS_Store",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.DS_Store?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab"
    },
    {
      "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "filename": "CouchbaseCloud/.metadata/.lock",
      "status": "removed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.lock",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.lock",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.lock?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab"
    },
    {
      "sha": "db6bd213b4a4c09ddd1c09a8ce1f7fb650349c53",
      "filename": "CouchbaseCloud/.metadata/.log",
      "status": "removed",
      "additions": 0,
      "deletions": 7748,
      "changes": 7748,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.log",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.log",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.log?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab"
    },
    {
      "sha": "a83b622f538205f38e2f5bd2416ad5c30f55e9e9",
      "filename": "CouchbaseCloud/.metadata/.mylyn/.tasks.xml.zip",
      "status": "removed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.mylyn/.tasks.xml.zip",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.mylyn/.tasks.xml.zip",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.mylyn/.tasks.xml.zip?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab"
    },
    {
      "sha": "89e75d865777d50491cdca42d4c11cbeacd19a30",
      "filename": "CouchbaseCloud/.metadata/.mylyn/repositories.xml.zip",
      "status": "removed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.mylyn/repositories.xml.zip",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.mylyn/repositories.xml.zip",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.mylyn/repositories.xml.zip?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab"
    },
    {
      "sha": "9313758cac636ed7730d7241b9a603e48b1739c1",
      "filename": "CouchbaseCloud/.metadata/.mylyn/tasks.xml.zip",
      "status": "removed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.mylyn/tasks.xml.zip",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.mylyn/tasks.xml.zip",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.mylyn/tasks.xml.zip?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab"
    },
    {
      "sha": "e85325b9c4ef062f499c5ed17c59284c0f4390ec",
      "filename": "CouchbaseCloud/.metadata/.plugins/com.python.pydev.analysis/python_v1_bm109oo8jsa5gnqmc06ekl12p/python.pydevsysteminfo",
      "status": "removed",
      "additions": 0,
      "deletions": 45032,
      "changes": 45032,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/com.python.pydev.analysis/python_v1_bm109oo8jsa5gnqmc06ekl12p/python.pydevsysteminfo",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/com.python.pydev.analysis/python_v1_bm109oo8jsa5gnqmc06ekl12p/python.pydevsysteminfo",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/com.python.pydev.analysis/python_v1_bm109oo8jsa5gnqmc06ekl12p/python.pydevsysteminfo?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab"
    },
    {
      "sha": "fb3fffab7f77e7699db500cf43b346fa04e8de79",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/101f0941a81b00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 245,
      "changes": 245,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/101f0941a81b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/101f0941a81b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/101f0941a81b00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,245 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-from time import sleep\n-\n-\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = password = ''\n-    if request.POST:\n-        '''\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            state = \"Your username and/or password were incorrect.\"\n-            return render_to_response(\"message.html\",{'state':state, 'username': username})\n-            '''\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        result = cb.get(\"user::piushs\").value\n-        \n-        \n-        \n-        if (result['password1'] == password) :\n-                request.session['username'] = username\n-                return render_to_response(\"deployments.html\",{'result':result})\n-        else :\n-                return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})            \n- \n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    return render_to_response('deployments.html', {'result' :result})\n-\n-@csrf_exempt\n-def couchdep(request) :\n-    return render_to_response('couchdbdep.html')\n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-        \n-def aws_mkfile(nodesup):\n-\n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/Users/piush/Key/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),a)\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    \n-\n-@csrf_exempt\n-def deploy(request):\n-    \n-    \n-    username = request.session['username']\n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    result = json.loads(result)\n-\n-    depname = request.POST.get('depname')\n-    cpus = request.POST.get('cpus')\n-    provider = request.POST.get('provider')\n-    loc = request.POST.get('loc')\n-    mc = request.POST.get('machine')\n-    cbs = request.POST.get('machine')    \n-    \n-    \n-    \n-    \n-    location = request.POST.get(\"loc\")\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"*************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"cpus\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    \n-    bucket =[]\n-    vms = []\n-    \n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips)})\n-        \n-    bucket.append ({ 'name' : \"default\", 'vm':vms });\n-    \n-    print \"hehhr\" \n-    print result\n-\n-    if result['deploy'] == None:\n-        print \"1\"\n-        result['deploy'] = [{'name':depname,'Provider':provider,'cpu': cpus,'cbi':cbs, 'loc':loc, 'mc':mc, 'bucket': bucket}]\n-    else :\n-        print \"2\"\n-        result['deploy'].append({'name':depname,'Provider':provider,'cpu': cpus,'cbi':cbs, 'loc':loc, 'mc':mc, 'bucket' : bucket})\n-    \n-    \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    aws_mkfile(nodesup)\n-   \n-    sleep (120) \n-    path = os.getcwd() \n-    print path\n-    os.chdir(path + \"/auth/testrunner\")\n-    os.system('pwd')\n-    \n-    os.system('python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-966-rel,amazon=true')\n-    os.chdir(path)\n-    \n-    \n-    return render_to_response(\"managecluster.html\", )\n-\n-\n-def mngcluster(request):\n-    \n-    \n-    return render_to_response(\"managecluster.html\")\n\\ No newline at end of file"
    },
    {
      "sha": "1d6fc72e070633a602415cd64d562ee12e906ec2",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/303e2367b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 56,
      "changes": 56,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/303e2367b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/303e2367b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/303e2367b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,56 +0,0 @@\n-# Rebalance test with views\n-# 8K ops/sec\n-# 80% reads, 20% writes (12% updates/deletes, 8% inserts)\n-# 10M dataset (non-DGM)\n-# 3 ddocs with 3 views per ddoc\n-# Rebalance from 4 to 3 nodes\n-\n-performance.iperf.RebalanceTests.test_views_rebalance\n-\n-params:\n-\n-# general\n-batch=50\n-kind=json\n-mem_quota=20000\n-erlang_threads=16:16\n-\n-# load phase\n-items=10000000\n-hot_init_items=2000000\n-\n-# index phase\n-views=[3, 3, 3]\n-\n-# access phase\n-ratio_sets=0.2\n-ratio_misses=0.05\n-ratio_creates=0.40\n-ratio_deletes=0.50\n-ratio_hot=0.2\n-ratio_hot_gets=0.99\n-ratio_hot_sets=0.99\n-ratio_expirations=0.03\n-bg_max_ops_per_sec=333\n-max_creates=900000000000\n-fg_max_ops=900000000000\n-fg_max_ops_per_sec=35\n-total_clients=24\n-\n-# rebalance\n-reb_mode=1\n-reb_max_retries=3\n-num_nodes_after=1\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-load_wait_until_drained=1\n-loop_wait_until_drained=0\n-mcsoda_heartbeat=3\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0\n-bg_protocol=memcached-binary\n-cbm=1\n-master_events=1"
    },
    {
      "sha": "85ee7bfdcc4e8e52af5e2d3915a324517837e739",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/307b675c402400141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 394,
      "changes": 394,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/307b675c402400141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/307b675c402400141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/307b675c402400141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,394 +0,0 @@\n-\n-# Create your views here.\n-\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-\n-def _create_node_AWS(request):\n-    location = request['loc']\n-        \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-        \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;  \n-        \n-def _create_node_GCE(request):\n-    \n-    Driver = get_driver(Provider.GCE)\n-    print request['email']\n-    print request['loc']\n-    print request['projid']\n-    gce = Driver(request['email'], \"/tmp/PRIV.pem\",\n-             datacenter=request['loc'],\n-             project=request['projid'])\n-    \n-    sizes = gce.list_sizes()\n-\n-    for size in sizes:\n-            print size\n-            \n-    images = gce.list_images()\n-\n-    for image in images:\n-        print image\n-        \n-    location = request['loc']\n-    \n-    key = request['publickey']\n-    metadata = {'sshKeys': 'user:%s' %key}\n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    \n-    while a < n :\n-        tm = timestamp()\n-        \n-        node = gce.create_node(name=\"node\", image='debian-7', size=request['machine'], ex_metadata= metadata)\n-        nodes.append(node)\n-        a = a+1;  \n-\n-    \n-def create_instance(request):\n-    \n-    if request['provider'] == \"AWS\":\n-        _create_node_AWS(request)\n-    elif request['provider'] == \"GCE\":\n-        _create_node_GCE(request)\n-        \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-    \n-    return nodesup\n-    \n-def handleNewDeployment(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    bucket =[]\n-    vms = []\n-    \n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                           'dns': convert_node_ip_string(node.__dict__['extra']['dns_name'])})\n-        \n-    bucket.append ({ 'bucketname' : request['bucketname'], 'bucketsize':request['bucket_size']});\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    print \"hehhr\" \n-    print result\n-    \n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    request['status'] = \"IHDE\"        \n-    \n-    if result['deploy'] == None:\n-        print \"1\"\n-        result['deploy'] = [{'request':request, \n-                             'bucket': bucket,\n-                             'vm':vms}]\n-    else :\n-        print \"2\"\n-        result['deploy'].append({'request':request, 'bucket' : bucket, 'vm':vms})\n-    \n-    \n-    print result       \n-    \n-    cb.set(\"DeploymentRequest\",request)\n-    cb.set(\"user::{0}\".format(request['username']), result)\n-       \n-    aws_mkfile(nodesup,request['username'], request['keyfile'] )\n-\n-\n-def handleNewInstances(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    resultSession = cb.get(\"SessionDetails\").value\n-    \n-    depIndex = resultSession['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    \n-    vms = result['deploy'][depIndex]['vm']\n-    \n-    newVM= []\n-    mainVm = vms[0]\n-    newVM.append(mainVm)\n-    cb.set(\"VMPrimary\",mainVm)\n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                    'dns':node.__dict__['extra']['dns_name']})\n-        newVM.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                    'dns':node.__dict__['extra']['dns_name']})\n-     \n-    \n-    result['deploy'][depIndex]['newvm'] = newVM   \n-    result['deploy'][depIndex]['vm'] = vms \n-    cpu = result['deploy'][depIndex]['request']['cpus'] \n-    result['deploy'][depIndex]['request']['cpus']  = int (cpu) +1 \n-    \n-    cb.set(\"user::{0}\".format(request['username']),result)\n-    \n-    print result\n-    \n-    request[\"status\"] = \"IHAD\"\n-    \n-    cb.set(\"DeploymentRequest\",request)\n-       \n-    aws_mkfile(nodesup,request['username'], request['keyfile'] )\n-    aws_mkfile_add(newVM,request['username'], request['keyfile'])\n-\n-\n-def delInstance(request,cb):\n-    \n-    location = request['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    \n-    machines = request['delmachines']\n-    \n-    listIns = []\n-    for mc in machines:\n-        listIns.append(mc['nodeid'])\n-        \n-    pvm = cb.get(\"VMPrimary\").value\n-    print list\n-\n-     \n-    sessRes = cb.get(\"SessionDetails\").value\n-    username = sessRes['username']\n-    depname = sessRes['deploymentname']\n-    depIndex = sessRes['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value  \n-    \n-    a = 0;\n-    listDns = []\n-    for mc in machines:\n-        listDns.append(mc['dns'])\n-    \n-    \n-    print listDns\n-    for res in result['deploy'][depIndex]['vm']:\n-        for l in listDns:\n-            if res['dns'] == l:\n-                index = result['deploy'][depIndex]['vm'].index(res)\n-                del result['deploy'][depIndex]['vm'][index]\n-    \n-    \n-    cb.set ('user::{0}'.format(username), result)\n-    cpu = result['deploy'][depIndex]['request']['cpus']\n-    result['deploy'][depIndex]['request']['cpus'] = int(cpu) - len(machines)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    \n-    for res in listDns:\n-        cmd='sudo ./couchbase-cli rebalance -c {0}  --server-remove={1}  -u Administrator -p password'.format(pvm,res)\n-        p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                              cwd = r'/root/opt/couchbase/bin', shell =True)\n-        p4.wait()\n-        \n-    for node in nodes :\n-        if (node.id in listIns):\n-            driver.destroy_node(node)\n-            \n-    request['status'] = \"IHDEL\"\n-    print result       \n-    cb.set(\"DeploymentRequest\", request)\n-    \n-    \n-    \n-def main():\n-    cb = Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-\n-    while True:\n-        try:\n-            request = cb.get(\"DeploymentRequest\").value\n-        except:\n-            continue\n-        \n-        if request['status'] == \"RDDE\":\n-            handleNewDeployment(request,cb)  \n-        elif request['status'] == \"RDAD\":    \n-            handleNewInstances(request,cb)  \n-        elif request['status'] == \"RDDEL\":\n-            delInstance(request,cb)       \n-            \n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-    \n-\n-def aws_mkfile_add(vm, user, key):\n-    '''\n-    filekey = open(\"/tmp/piushs.pem\".format(user), \"w\")\n-    filekey.write(key)\n-    filekey.close()\n-    '''\n-    cfgfile = open(\"/tmp/addIns.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/{0}.pem\".format(user))\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for v in vm:\n-        \n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(v['dns']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-\n-def aws_mkfile(nodesup, user, key):\n-    '''\n-    filekey = open(\"/tmp/{0}.pem\".format(user), \"w\")\n-    filekey.write(key)\n-    filekey.close()\n-    '''\n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/{0}.pem\".format(user))\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(node.__dict__['extra']['dns_name']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-if __name__ == \"__main__\":\n-    main()"
    },
    {
      "sha": "21d99f743e12894fb461ac0215db69a8181008ad",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/608c0554972800141066bfd86697bc67",
      "status": "removed",
      "additions": 0,
      "deletions": 37,
      "changes": 37,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/608c0554972800141066bfd86697bc67",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/608c0554972800141066bfd86697bc67",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/608c0554972800141066bfd86697bc67?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,37 +0,0 @@\n-from couchbase import Couchbase\n-import time\n-\n-import sys\n-import subprocess\n-\n-def main(argv):\n-    \n-    \n-    \n-    cb = Couchbase.connect (bucket = 'default', host =\"localhost\")\n-    while True:\n-           \n-        rows = cb.query(\"dev_CB\",\"status\",stale=\"false\", limit =5)\n-        \n-        for row in rows:\n-           '''\n-           if row.key == \"RDDE\":\n-                cb.set(row.docid, {\"status\":\"INUSE\"})\n-                print row.key\n-           '''\n-            \n-           if row.key == \"RDDE\":\n-                print row.docid\n-                p1 = subprocess.Popen(r'sudo python InstanceHadler.py {0}'.format(row.docid),\n-                                  cwd = r'/Users/piush/Desktop/CouchbaseCloud/Install', shell =True)\n-                p1.wait()\n-           if row.key == \"IHDE\":\n-                p2 = subprocess.Popen(r'sudo python install.py {0}'.format(row.docid),\n-                                  cwd = r'/Users/piush/Desktop/CouchbaseCloud/Install', shell =True)\n-                p2.wait()\n-               \n-           \n-    \n-    \n-if __name__ == \"__main__\":\n-   main(sys.argv[1:])"
    },
    {
      "sha": "cd3ffe0a0ab41ca0c41cca03aeda7e40a0a6e1ab",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/62601c67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 42,
      "changes": 42,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/62601c67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/62601c67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/62601c67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,42 +0,0 @@\n-# read 12M load, 1M hot reload, 2M access creates, draining\n-# 30 clients\n-# speed limit = 15k\n-#\n-# system memory: 20G per node\n-\n-performance.eperf.EPerfClient.test_eperf_read\n-\n-params:\n-\n-# general\n-batch=50\n-kind=nonjson\n-mem_quota=5000\n-\n-# load phase\n-hot_init_items=2000000\n-items=20000000\n-\n-# cbstats collector\n-cb_stats=1\n-\n-# access phase\n-# Read:Insert:Update:Delete Ratio = 90:3:6:1.\n-ratio_sets=0.1\n-ratio_misses=0.05\n-ratio_creates=0.30\n-ratio_deletes=0.1428\n-ratio_hot=0.3\n-ratio_hot_gets=0.8\n-ratio_hot_sets=0.8\n-ratio_expirations=0.005\n-max_creates=3000000\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-mcsoda_heartbeat=3\n-mcsoda_max_ops_sec=500\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "54b095435075d0b05de216fb7204f287f6dd4802",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/707b661e052700141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 157,
      "changes": 157,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/707b661e052700141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/707b661e052700141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/707b661e052700141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,157 +0,0 @@\n-from azure import *\n-from azure.servicemanagement import *\n-import base64\n-import os\n-\n-import time\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-def AzureHandler(request):\n-    \n-    subscription_id = request['subid']\n-    certificate_path = '/tmp/azurekey'\n-    \n-    sms = ServiceManagementService(subscription_id, certificate_path)\n-\n-    \n-    \n-    result = sms.list_storage_accounts()\n-    for account in result:\n-        print('Service name: ' + account.service_name)\n-        print('Affinity group: ' + account.storage_service_properties.affinity_group)\n-        print('Location: ' + account.storage_service_properties.location)\n-        print('')\n-    \n-    \n-    name = 'piush9'\n-    label = 'myhostedservice'\n-    desc = 'my hosted service'\n-    location = 'East US'\n-    \n-    # You can either set the location or an affinity_group\n-    sms.create_hosted_service(name, label, desc, location)\n-    \n-    result = sms.list_hosted_services()\n-    \n-    for hosted_service in result:\n-        print('Service name: ' + hosted_service.service_name)\n-        print('Management URL: ' + hosted_service.url)\n-        print('Affinity group: ' + hosted_service.hosted_service_properties.affinity_group)\n-        print('Location: ' + hosted_service.hosted_service_properties.location)\n-        print('')\n-    \n-    #image_name1 = '0b11de9248dd4d87b18621318e037d37__RightImage-CentOS-6.3-x64-v5.8.8.8'\n-    image_name1='5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-65-20140606'\n-    image_name = 'couchbase-251-Ubuntu12'\n-    \n-    \n-    result = sms.list_os_images()\n-    \n-    for image in result:\n-    \tprint('Name: ' + image.name)          \n-    \tprint('OS: ' + image.os)\n-    \tprint('Category: ' + image.category)\n-    \tprint('Description: ' + image.description)\n-    \tprint('Location: ' + image.location)\n-    \tprint('Affinity group: ' + image.affinity_group)\n-    \tprint('Media link: ' + image.media_link)\n-        print('Label: ' + image.label)\n-    \tprint('')\n-    \n-    media_link = 'https://portalvhdsmtcz83fp9vjrb.blob.core.windows.net/vhds/piush9-piush9-2014-08-16.vhd'\n-    \n-    \n-    location = 'East US'\n-    linux_user_id='azureuser'\n-    linux_config = LinuxConfigurationSet('piush9', 'azureuser',user_password=None,disable_ssh_password_authentication=True)\n-    \n-    \n-    azure_config = \"/Users/piush\" + '/.azure'\n-    cert_data_path = azure_config + \"/myCert.pfx\"\n-    with open(cert_data_path, \"rb\") as bfile:\n-        cert_data = base64.b64encode(bfile.read())\n-    \n-    cert_format = 'pfx'\n-    cert_password = ''\n-    cert_res = sms.add_service_certificate(service_name=name,\n-                                data=cert_data,\n-                                certificate_format=cert_format,\n-                                password=cert_password)\n-    \n-    vars(cert_res)\n-    time.sleep(60)\n-    \n-    \n-    azure_config = \"/Users/piush\" + '/.azure'\n-    thumbprint_path = azure_config + '/thumbprint'\n-    authorized_keys = \"/home/\" + linux_user_id + \"/.ssh/authorized_keys\" \n-    try:\n-        thumbprint=open(thumbprint_path, 'r').readline().split('\\n')[0]\n-    except:\n-        thumbprint=None\n-    \n-    thumbprint\n-    \n-    publickey = PublicKey(thumbprint, authorized_keys)\n-    linux_config.ssh.public_keys.public_keys.append(publickey)\n-    \n-    print vars(publickey)\n-    print vars(linux_config.ssh.public_keys.public_keys.list_type)\n-    \n-    \n-    \n-    print vars(linux_config.ssh.public_keys)\n-    print vars(linux_config.ssh.key_pairs)\n-    \n-    os_hd  = OSVirtualHardDisk(image_name1, media_link)\n-    \n-    print vars(os_hd)\n-    \n-    network = ConfigurationSet()\n-    network.configuration_set_type = 'NetworkConfiguration'\n-    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('ssh', 'tcp', '22', '22'))\n-    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('http', 'tcp', '8091', '8091'))\n-    \n-    \n-    \n-    name = 'piush9'\n-    result = sms.create_virtual_machine_deployment(service_name=name,\n-        deployment_name=name,\n-        deployment_slot='production',\n-        label=name,\n-        role_name=name,\n-        system_config=linux_config,\n-        network_config=network,\n-        os_virtual_hard_disk=os_hd,\n-        role_size='Large')\n-    \n-    request_id = result.request_id\n-    print request_id\n-    print result\n-    \n-    print vars(linux_config.ssh.public_keys)\n-    print vars(linux_config.ssh.key_pairs)\n-    \n-    time.sleep (60)\n-    status = sms.get_operation_status(request_id)\n-    try:\n-        print vars(status.error)\n-    except:\n-        print vars(status)\n-    \n-    service_name = name\n-    deployment_name = name\n-    props = sms.get_deployment_by_name(service_name, deployment_name)\n-    vars(props)\n-    \n-    result = sms.list_locations()\n-    for location in result:\n-        print(location.name)\n-    \n-    role = sms.get_role(service_name=name, deployment_name=name, role_name=name)\n-    print role"
    },
    {
      "sha": "2bef1be9d4a0e52a69e5e33c84df6cf7ef9eef9f",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/925d3067b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/925d3067b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/925d3067b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/925d3067b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab"
    },
    {
      "sha": "031f632346e8bc42f22ab33233c9de75a95789d5",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/a00fecec8a1a00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 52,
      "changes": 52,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/a00fecec8a1a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/a00fecec8a1a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/a00fecec8a1a00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,52 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n-\n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>CouchDB Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select id=\"deplist\">\n-                 \n-                  \n-                  \n-\t\t\t    </select>\n-                </div>\n-            </fieldset>   \n-            \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-\n-{% for car in obj %}\n-document.getElementById(\"deplist\")\n-                     <option value=\"{{ car.tag }}\">{{ car.tag }}</option>\n-                  {% endfor %}\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "f48bcbf09fdca495d5d074c63adfe5a9aff939f7",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/a049796c9f1900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 173,
      "changes": 173,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/a049796c9f1900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/a049796c9f1900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/a049796c9f1900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,173 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase.connection import Connection\n-\n-\n-@csrf_exempt\n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    username = password = ''\n-    if request.POST:\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            state = \"Your username and/or password were incorrect.\"\n-            return render_to_response(\"message.html\",{'state':state, 'username': username})\n-\n-    return render_to_response(\"auth.html\",{'state':state, 'username': username})\n-\n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy' :  [{ 'name' : '',\n-                            'Provider':'',\n-                            'cpu':'',\n-                            'cbi':''}]}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),value=value , format=couchbase.FMT_JSON)\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname))\n-\n-  \n-    cb.set(\"TestKey\",\"keyval\")\n-    r = cb.get(\"TestKey\")\n-    print r\n-    \n-    \n-    print result\n-    print result['username']\n-    '''\n-    results['deploy'] = [{'name':'1','Provider':'2','cpu':'3','cbi':'4'},\n-                        {'name':'12','Provider':'2','cpu':'3','cbi':'4'}]\n-                        \n-    '''\n-    #results['deploy'].add({'name':'1','Provider':'2','cpu':'3','cbi':'4'})\n-    cb.set(\"user::{0}\".format(uname), result)\n-\n-    result = cb.get(\"user::{0}\".format(uname))\n-    \n-    dict = json\n-    print result\n-\n-    return render_to_response('deployments.html')\n-\n-@csrf_exempt\n-def couchdep(request) :    \n-    return render_to_response('couchdbdep.html')\n-\n-\n-@csrf_exempt\n-def deploy(request):\n-    \n-    location = request.POST.get(\"loc\")\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"****************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"cpus\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    '''\n-    for node in nodes :\n-        print node.id\n-      \n-    regionNodes = driver.list_nodes()\n-    node = [val for val in regionNodes if val.id == 'i-0bc32d21'][0] \n-    print node\n-      \n-    regionNodes = driver.list_nodes()\n-    node = [val for val in regionNodes if val.id == 'i-60c02e4a'][0] \n-    print node\n-    \n-    '''\n-\n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node\n-    \n-    \n-              \n-    return HttpResponse(\"Deployment Successful\")\n\\ No newline at end of file"
    },
    {
      "sha": "810e60d78de57cc0349a25742e80ebb870e00bbb",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b046c471361b00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 203,
      "changes": 203,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b046c471361b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b046c471361b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b046c471361b00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,203 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-\n-cb=Couchbase.connect(bucket='default', host='localhost')\n-\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    username = password = ''\n-    if request.POST:\n-        '''\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            state = \"Your username and/or password were incorrect.\"\n-            return render_to_response(\"message.html\",{'state':state, 'username': username})\n-            '''\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        result = cb.get(\"user::{0}\".format(username))\n-        \n-        \n-\n-    return render_to_response(\"auth.html\",{'state':state, 'username': username})\n-\n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    \n-    \n-    \n-    result = json.loads(result)\n-    print result['username']\n-\n-    if result['deploy'] == None:\n-        result['deploy'] = [{'name':'7','Provider':'3','cpu':'3','cbi':'3'}]\n-    else :\n-        result['deploy'].append({'name':'3','Provider':'3','cpu':'3','cbi':'3'})\n-    \n-    result['deploy'].append({'name':'4','Provider':'3','cpu':'3','cbi':'3'})              \n-                        \n-    \n-    #results['deploy'].add({'name':'1','Provider':'2','cpu':'3','cbi':'4'})\n-    cb.set(\"user::{0}\".format(uname), result)\n-\n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    \n-    \n-    print result\n-\n-    obj = ([{'tag' : \"dep1\"}, {'tag':\"dep2\"}, {'tag':\"dep3\"}, {'tag' : \"dep4\"}])\n-    return render_to_response('deployments.html', {'obj' :obj})\n-\n-@csrf_exempt\n-def couchdep(request) :    \n-    return render_to_response('couchdbdep.html')\n-\n-\n-@csrf_exempt\n-def deploy(request):\n-    \n-    '''\n-    location = request.POST.get(\"loc\")\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"*********\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"cpus\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node\n-    '''   \n-    \n-    \n-    path = os.getcwd() \n-    print path\n-    os.chdir(path + \"/auth/testrunner\")\n-    os.system('pwd')\n-    \n-    os.system('python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-966-rel,amazon=true')\n-    os.chdir(path)\n-    \n-    '''\n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/Users/piush/Key/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    Config.set('servers','1',\"ec2-54-211-242-217.compute-1.amazonaws.com\")\n-    Config.set('servers','2', \"ec2-54-87-163-83.compute-1.amazonaws.com\")\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    '''\n-    \n-    return HttpResponse(\"Deployment Successful\")\n\\ No newline at end of file"
    },
    {
      "sha": "50ba64175e9d4a0dce84121448d493dc77087002",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b098a26c1f1600141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 100,
      "changes": 100,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b098a26c1f1600141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b098a26c1f1600141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b098a26c1f1600141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,100 +0,0 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-<html id=''>\n-<head>\n-       \n-      <div id=\"deployments\">\n-\n-        \n-        <div id=\"deploymentsSection\" class=\"section\">\n-          <h2>CouchDB Deployments</h2>\n-          \n-            <div class=\"h2ActionBtns\" align = \"right\">\n-            \t<a class=\"button icon create\" href=\"/create\">Create new</a>\n-            </div>\n-            \n-            <select name =\"deploymentlist\" id=\"deplist\" ></select>\n-            \n-            <div class=\"noData\"></div>\n-       </div>              \n-         \n-       <script>\n-       \n-       \n-       </script>     \n-            \n-            \n-<form action=\"/saveconnection\" method=\"POST\"\n-      id=\"saveConnectionDialog\" title=\"Configure a remote connection\" autocomplete=\"off\" style=\"display:none;\">\n-\n-\n-  <fieldset>\n-    <input type=\"hidden\" name=\"r\" value=\"/home\"/>\n-    <input id=\"connectionId\" type=\"hidden\" name=\"id\" value=\"\"/>\n-    <div>\n-      <p>\n-        Remote Connections allow you to visualize and manage the data and database(s) on MongoDB servers running anywhere.\n-      </p>\n-      <p>\n-        From here you can configure a connection to (1) a remote database, (2) a remote mongod server process, or (3) a remote replica set.\n-      </p>\n-    </div>\n-    <div>\n-      <label>Name for this remote connection<span class=\"required\"></span></label>\n-      <input class=\"required connectionName\" type=\"text\" name=\"connectionName\" id=\"connectionName\" value=\"\"/>\n-    </div>\n-    <div>\n-      <label>URI<span class=\"required\"></span> <span class=\"tip\"><a id=\"uriHelpLink\" href=\"javascript:showInlineHelp('uriHelp')\">explain this</a></span></label>\n-      <input class=\"required\" type=\"text\" name=\"uri\" id=\"uri\" value=\"\"/>\n-    </div>\n-    <div>\n-      <input id=\"storeCredentials\" type=\"checkbox\" name=\"storeCredentials\" />\n-      <label>Save password? <span class=\"tip\"><a id=\"isThisSecureLink\" href=\"javascript:showInlineHelp('rememberPasswordHelp')\">explain this</a></span></label>\n-    </div>\n-    <div class=\"metadataAgreement\">\n-      <input class=\"required\" type=\"checkbox\" name=\"enableMetaData\" id=\"enableMetaData\"/>\n-      <label>\n-        I allow MongoLab to save configuration data in my remote database(s).<span class=\"required\"></span>\n-        <span class=\"tip\"><a id=\"enableMetaDataHelpLink\" href=\"javascript:showInlineHelp('enableMetaDataHelp')\">explain this</a></span>\n-      </label>\n-    </div>\n-    <div class=\"inlineHelp\" id=\"enableMetaDataHelp\" style=\"display: none;\">\n-      <p>\n-        Certain MongoLab features and services will store configuration information into the database itself.\n-        For example, MongoLab allows you to save search queries for repeated use; when you create a Saved Search, the configuration for that query is stored in your database.\n-      </p>\n-      <p>\n-        This configuration data takes up a tiny amount of space and should not meaningfully affect the storage footprint of your database.  Furthermore we have isolated this data into special collections prefixed with <code>objectlabs-system</code> so there should be no impact on your data.  You can delete this information at any time by removing the <code>objectlabs-system</code> collections.\n-      </p>\n-      <p>\n-        By checking this checkbox, you acknowledge that you understand and allow us to save configuration data into your remote database(s).\n-      </p>\n-\n-    </div>\n-    <div class=\"inlineHelp\" id=\"connectionNameHelp\" style=\"display:none;\">\n-      <p>The <code>Connection name</code> uniquely identifies your remote connection in your MongoLab account.  It is used primarily for display purposes.</p>\n-    </div>\n-    <div class=\"inlineHelp\" id=\"uriHelp\" style=\"display: none;\">\n-      <p>\n-        Enter a <code>URI</code> in the standard MongoDB connection string format (<a href=\"http://www.mongodb.org/display/DOCS/Connections\">MongoDB reference</a>):\n-      <pre>  mongodb://[dbuser:dbpass@]host:port[/dbname]</pre>\n-      </p>\n-      <div class=\"tinyLineBreak\"></div>\n-      <p>\n-        The <code>username</code>, <code>password</code> are optional - if the server you are connecting to requires authentication, you will be prompted for your credentials later even if you do not provide them now.  The <code>dbname</code> must be \"admin\" if you want to authenticate to an entire <code>mongod</code> server process.\n-      </p>\n-      <div class=\"tinyLineBreak\"></div>\n-      <p>Example - connecting to a single database:\n-      <pre>  mongodb://[dbuser:dbpass@]example.com:12345[/dbname]</pre>\n-      </p>\n-      <p>Example - connecting to a server:\n-      <pre>  mongodb://[admindbuser:admindbpass@]example.com:12345[/admin]</pre>\n-      </p>\n-      <p>Example - connecting to a replica set cluster:\n-      <pre>  mongodb://[admindbuser:admindbpass@]example.com:12345,example2.com:12345[/admin]</pre>\n-      </p>\n-    </div>\n-  </fieldset>\n-</form>\n-\n-"
    },
    {
      "sha": "0f43683fdcd4e20d756618676efcc50dc0e0e7fa",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b0b0435ae62000141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 149,
      "changes": 149,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b0b0435ae62000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b0b0435ae62000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b0b0435ae62000141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,149 +0,0 @@\n-<table id =\"AWS\">\n-        <tbody>\t\n-               <tr>\n-                   <td>\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   </td>\n-                   <td>\n-                \t\t<h3>Enter the deployment name</h3>\n-                \t</td>\n-                \t<td>\n-                \t\t<input name=\"depname\" type = \"text\">\n-                \t</td>\n-                </tr>\n-                <tr>\t\t\n-                \t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t</td>\n-                \t \n-                \t<td>\n-                \t\t<h3>Number of servers</h3>\n-                \t</td>\n-                \t<td>\n-                \t\t<input name=\"cpus\" type = \"text\">\n-                \t</td>\n-                </tr>\n-         \n-               <tr>\n-                    <td>\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                    </td>\n-                    \n-                 \t<td>\n-\t\t\t\t\t\t<h3>Select a Cloud Provider</h3>\n-\t\t\t\t\t</td>\n-\t\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t<select name=\"provider\">\n-\t   \t\t\t\t\t\t<option>AWS </option>\n-\t\t\t\t\t\t</select>     \n-\t\t\t\t\t</td>\n-\t\t\t\t</tr>\n-\t\n-\t    \t\t<tr>\n-\t    \t\t\n-\t    \t\t\t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t</td>\n-                \t\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t<h3>Select a region</h3>\n-\t\t\t\t\t</td>\n-\t\t\t\t</tr>\n-\t\t\n-\t\t<td> \n-\t\t\t<select name=\"loc\">\n-\t   \t\t\t<option>East</option>\n-\t   \t\t\t<option>West</option>\n-\t   \t\t\t<option>SouthEast</option>\n-\t\t\t</select>\n-\t\t</td>\n-\t</tr>\n-\t\n-\t<tr>\n-\t    <td>\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-        </td>\n-\t\t<td>\n-\t\t\t<h3>Select a machine</h3>  \n-\t\t</td>\n-\t\t<td>\n-\t\t\t<select name=\"machine\">\n-\t    \t\t<option>m1.large</option>\n-\t    \t\t<option>m3.large</option>\n-\t    \t\t<option>m1.small</option>\n-\t\t\t</select>       \n-\t\t</td>\n-\t\t\n-\t\t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    \n-                \t</td>\n-                \t\n-\t\t<td>\n-\t\t\t<h3>Image</h3>\n-\t\t</td>\n-\t\t<td>\n-\t\t\t<select name=\"cbserver\">\n-\t    \t\t<option>Linux</option>\n-\t    \t\t<option>Windows</option>\n-\t\t\t</select>\n-\t\t</td>\n-\t</tr>\n-\t\n-\t<tr>\n-\t\n-\t    <td>\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-        </td>\n-\t\t<td>\n-\t\t     <h3>AWS Access Key</h3>\n-\t\t</td>\n-\t\t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    \n-        </td>\n-\t\t<td>\n-\t\t     <input type=\"text id=\"ackey\"/>\n-\t\t</td>\n-\t</tr>\n-\t\n-\t<tr>\n-\t\n-\t    <td>\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-        </td>\n-\t\t<td>\n-\t\t     <h3>AWS Secret Key</h3>\n-\t\t</td>\n-\t\t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    \n-        </td>\n-\t\t<td>\n-\t\t     <input type=\"text id=\"s\"/>\n-\t\t</td>\n-\t</tr>\n-  </tbody>\n-</table>    \n-\t\t\n\\ No newline at end of file"
    },
    {
      "sha": "f2d4b72e44f2255d1bbf1e02f3fe99c88fc71867",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b0b57bf3692600141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 151,
      "changes": 151,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b0b57bf3692600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b0b57bf3692600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/b0b57bf3692600141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,151 +0,0 @@\n-\n-\n-\n-import os\n-\n-import os.path\n-import subprocess\n-\n-from couchbase import Couchbase\n-\n-import ConfigParser\n-PATH = '/tmp/test.ini'\n-\n-cb = Couchbase.connect (bucket = \"default\", host = \"localhost\")\n-\n-def handleNewDeployment(result):            \n-        substr = \"Can't establish SSH session\"\n-        op = \"Can't establish SSH session\"\n-        print op.find(substr)\n-        '''\n-        while  op.find(substr) != -1 :\n-             p2 = subprocess.Popen(r'sudo -s python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-1156-rel',\n-                          cwd = r'/auth/testrunner', shell =True, stdout = subprocess.PIPE)\n-\n-             output = p2.communicate()[0]\n-             print \"Pisu\"\n-             print output\n-             op = \"{0}\".format(output)\n-             print op\n-             p2.wait()\n-         '''   \n-        result['status'] = 'IN'\n-        cb.set(\"DeploymentRequest\",result)\n-        \n-        username = result['username']\n-        depname = result['depname']\n-        \n-        getVal = cb.get(\"user::{0}\".format(username)).value\n-        \n-        vm = []\n-        tempip=''\n-        for iter in getVal['deploy']:\n-            if iter['request']['depname'] == depname:\n-                vm = iter['vm']\n-                break\n-                \n-         \n-        tempip = vm[0]['ip']\n-        ip = \"{0}:8091\".format(tempip)       \n-                \n-        cpu = int(result['cpus']) - 1 \n-        \n-        count = 0\n-        for v in vm:\n-            cmd = 'sudo ./couchbase-cli rebalance -c {0} --server-add={1}  --server-add-username=Administrator   --server-add-password=password   -u Administrator -p password'.format(ip,v['pip'])\n-            if count > 0:\n-                p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                              cwd = r'/auth/testrunner', shell =True)\n-                p4.wait()\n-            count = count + 1\n-        \n-        print cmd\n-        cmd = \"sudo ./couchbase-cli cluster-edit -c {0} --cluster-ramsize={1} -u Administrator -p password\".format(ip,result['ramquota'])\n-        p5 = subprocess.Popen(r'{0}'.format(cmd),cwd =r'/root/opt/couchbase/bin', shell =True)\n-        p5.wait()\n-        \n-        if result['bucketname'] == \"default\":\n-            port = 11211\n-        else:\n-            port = 11224 \n-        #cmd = \"sudo python testrunner.py -i /tmp/test.ini -t clitest.couchbase_clitest.CouchbaseCliTest.testBucketCreation  -p bucket={0},bucket_type=couchbase,bucket_port=11222,bucket_replica={1},bucket_ramsize={2},skip_cleanup=True\".format(result['bucketname'], result['replica'], result['bucket_size'])\n-        cmd = \"sudo ./couchbase-cli bucket-create -c {0}  --bucket={1}  --bucket-type=couchbase --bucket-port={2} --bucket-ramsize={3} --bucket-replica={4} --bucket-priority=low --wait -u Administrator -p password \".format(ip,result['bucketname'], port,result['bucket_size'], result['replica'])        \n-        p6 = subprocess.Popen(r'{0}'.format(cmd),cwd =r'/root/opt/couchbase/bin', shell =True)\n-        p6.wait()\n-               \n-        result['status'] = 'F'\n-        cb.set(\"DeploymentRequest\",result)\n-\n-\n-def handleNewInstance(result):\n-    substr = \"Can't establish SSH session\"\n-    op = \"Can't establish SSH session\"\n-    print op.find(substr)\n-    \n-    while  op.find(substr) != -1 :\n-         p2 = subprocess.Popen(r'sudo -s python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-966-rel,amazon=true',\n-                      cwd = r'/auth/testrunner', shell =True, stdout = subprocess.PIPE)\n-\n-         output = p2.communicate()[0]\n-         print \"Pisu\"\n-         print output\n-         op = \"{0}\".format(output)\n-         print op\n-         p2.wait()\n-       \n-    result['status'] = 'IN'\n-    cb.set(\"DeploymentRequest\",result)\n-    \n-    dns = (cb.get(\"VMPrimary\").value)['dns']\n-    \n-    username = result['username']\n-    depname = result['depname']\n-    \n-    depIndex = (cb.get(\"SessionDetails\").value)['deploymentIndex']\n-    \n-    res = cb.get(\"user::{0}\".format(username)).value\n-    \n-    vms = res['deploy'][depIndex]['newvm']\n-    \n-    \n-    for vm in vms:\n-        if (vm ['dns'] != dns):\n-            \n-            cmd='sudo ./couchbase-cli rebalance -c {0}  --server-add={1}  --server-add-username=Administrator   --server-add-password=password   -u Administrator -p password'.format(dns,vm['dns'])\n-            print cmd\n-            p4 = subprocess.Popen(r'sudo ./couchbase-cli rebalance -c {0}  --server-add={1}  --server-add-username=Administrator   --server-add-password=password   -u Administrator -p password'.format(dns,vm['dns']),\n-                              cwd = r'/root/opt/couchbase/bin', shell =True)\n-            p4.wait()\n-            \n-    result['status'] = 'F'\n-    cb.set(\"DeploymentRequest\",result)\n-            \n-#def handleRemoveNode(result):\n-    \n-    \n-      \n-#def handleBucketCreate(result):\n-    \n-    \n-def main():\n-        while True:\n-            \n-            try:\n-                result = cb.get(\"DeploymentRequest\").value\n-            except:\n-                continue\n-            \n-            if result['status'] == \"IHDE\":        \n-                handleNewDeployment(result)\n-            elif result['status'] == \"IHAD\":\n-                handleNewInstance(result)\n-            ''''    \n-            elif result['status'] == \"IHRM\":\n-                handleRemoveNode(result)\n-            else : \n-                result['status'] == \"IHBC\"\n-                handleBucketCreate(result)\n-                '''\n-                \n-if __name__ == \"__main__\":\n-    main()\n\\ No newline at end of file"
    },
    {
      "sha": "3426d1776c612220844a5c420a8270dba034812e",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/c021bc94b71b00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 59,
      "changes": 59,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/c021bc94b71b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/c021bc94b71b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/c021bc94b71b00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,59 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Manage Couchbase Deployment</h1></span>\n-        </div>\n-\n-        <form id=\"mngcluster\" class=\"content\" action=\"/mngview/\" method=\"POST\">\n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-            \n-                <h3> Bucket </h3>\n-                <select id =\"bucket\">\n-                   \n-                   {% for buck in bucket %}\n-                   \n-                       <option name=\"{{ buck.name}}\">{{ buck.name }}</option>\n-                   {% endfor %}\n-                \n-                </select>\n-                \n-                <input type = \"text\" name =\"addserver\">\n-                <br></br>\n-                <input type=\"submit\" name =\"addbucket\" value =\"Add Instance\">\n-                \n-                <br></br>\n-                <p> </p>\n-                <br></br>\n-                <input type = \"text\" name =\"delserver\">\n-                <br> </br>\n-                <input type=\"submit\" name=\"deletebucket\" value =\"Delete Instance\">\n-                <br></br>\n-                <p> </p>\n-                <br></br>\n-                \n-            </fieldset>\n-           \n-           \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "e0dc5d2858a1e54d4853dd4430c5a668b85d4dab",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/c05d314c8f2600141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 533,
      "changes": 533,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/c05d314c8f2600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/c05d314c8f2600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/c05d314c8f2600141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,533 +0,0 @@\n-\n-# Create your views here.\n-\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-import time\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-\n-def _create_node_AWS(request):\n-    location = request['loc']\n-        \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-        \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}_\".format(request['depname']) + \"{0}\".format(tm)\n-        node = driver.create_node(name=nodename, image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-        \n-    return nodesup\n-        \n-def _create_node_GCE(request):\n-    \n-    Driver = get_driver(Provider.GCE)\n-    print request['email']\n-    print request['loc']\n-    print request['projid']\n-    \n-    gce = Driver('{0}'.format(request['email']), \"./PRIV.pem\",\n-                datacenter='{0}'.format(request['loc']),\n-             project='{0}'.format(request['projid']))\n-    \n-    sizes = gce.list_sizes()\n-\n-    for size in sizes:\n-            print size\n-            \n-    images = gce.list_images()\n-\n-    for image in images:\n-        print image\n-        \n-    location = request['loc']\n-    \n-    fp = open(\"/tmp/id_rsa.pub\", 'r')\n-    key = fp.read()\n-    fp.close()\n-    \n-    metadata = {'sshKeys': 'user:%s' %key}\n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    \n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-        node = gce.create_node(name=nodename, image='centos-6', size=request['machine'], ex_metadata= metadata)\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = gce.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-     \n-    return nodesup\n-    \n-def create_instance(request):\n-    \n-    \n-    if request['provider'] == \"AWS\":\n-       nodes =  _create_node_AWS(request)\n-    elif request['provider'] == \"GCE\":\n-        nodes = _create_node_GCE(request)\n-        \n-   \n-    \n-    return nodes\n-    \n-def handleNewDeployment(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    bucket =[]\n-    vms = []\n-    \n-    if (request['provider'] == \"AWS\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns': convert_node_ip_string(node.__dict__['extra']['dns_name'])})\n-    elif (request['provider'] == \"GCE\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'pip': convert_node_ip_string(node.private_ips), 'dns':convert_node_ip_string(node.public_ips)})  \n-            \n-    bucket.append ({ 'bucketname' : request['bucketname'], 'bucketsize':request['bucket_size']});\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    print \"hehhr\" \n-    print result\n-    \n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    request['status'] = \"IHDE\"        \n-    \n-    if result['deploy'] == None:\n-        print \"1\"\n-        result['deploy'] = [{'request':request, \n-                             'bucket': bucket,\n-                             'vm':vms}]\n-    else :\n-        print \"2\"\n-        result['deploy'].append({'request':request, 'bucket' : bucket, 'vm':vms})\n-    \n-    \n-    print result       \n-    \n-    cb.set(\"DeploymentRequest\",request)\n-    cb.set(\"user::{0}\".format(request['username']), result)\n-    \n-    if (request['provider'] == \"AWS\"):\n-        aws_mkfile(nodesup)\n-    elif(request['provider'] == \"GCE\"):\n-        gce_mkfile(nodesup)\n-        gce_mkfile_cluster(nodesup)\n-\n-\n-def handleNewInstances(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    resultSession = cb.get(\"SessionDetails\").value\n-    \n-    depIndex = resultSession['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    \n-    vms = result['deploy'][depIndex]['vm']\n-    \n-    newVM= []\n-    mainVm = vms[0]\n-    newVM.append(mainVm)\n-    cb.set(\"VMPrimary\",mainVm)\n-    for node in nodesup :\n-        if request['provider'] == \"AWS\":\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':node.__dict__['extra']['dns_name']})\n-            newVM.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':node.__dict__['extra']['dns_name']})\n-        else:\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':convert_node_ip_string(node.public_ips), 'pip':convert_node_ip_string(node.private_ips)})\n-            newVM.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':convert_node_ip_string(node.public_ips), 'pip':convert_node_ip_string(node.private_ips)})\n-         \n-    \n-    result['deploy'][depIndex]['newvm'] = newVM   \n-    result['deploy'][depIndex]['vm'] = vms \n-    cpu = result['deploy'][depIndex]['request']['cpus'] \n-    result['deploy'][depIndex]['request']['cpus']  = int (cpu) +1 \n-    \n-    cb.set(\"user::{0}\".format(request['username']),result)\n-    \n-    print result\n-    \n-    request[\"status\"] = \"IHAD\"\n-    \n-    cb.set(\"DeploymentRequest\",request)\n-     \n-    if request['provider'] == \"AWS\":  \n-        aws_mkfile(nodesup)\n-    else:\n-        gce_mkfile(nodesup)\n-    \n-\n-def del_aws_ins(request, listIns):\n-    \n-    location = request['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    for node in nodes :\n-        if (node.id in listIns):\n-            driver.destroy_node(node)\n-            \n-def del_inst(request, listIns):\n-    \n-    Driver = get_driver(Provider.GCE)\n-    print request['email']\n-    print request['loc']\n-    print request['projid']\n-    \n-    '''\n-    gce = Driver('{0}'.format(request['email']), \"./PRIV.pem\",\n-                datacenter='{0}'.format(request['loc']),\n-             project='{0}'.format(request['projid']))\n-    '''\n-    \n-    gce = Driver('265882800008-3blh6m3ocdfhkm6kl2ihhfsls0a44nd6@developer.gserviceaccount.com', './PRIV.pem',\n-             datacenter='us-central1-a',\n-             project='poised-resource-658')\n-    \n-    nodes = gce.list_nodes()\n-    \n-    for node in nodes :\n-        if (node.id in listIns):\n-            gce.destroy_node(node)\n-    \n-\n-def delInstance(request,cb):\n-      \n-    machines = request['delmachines']\n-    \n-    listIns = []\n-    for mc in machines:\n-        listIns.append(mc['nodeid'])\n-        \n-    pvm = cb.get(\"VMPrimary\").value\n-    print list\n-\n-     \n-    sessRes = cb.get(\"SessionDetails\").value\n-    username = sessRes['username']\n-    depname = sessRes['deploymentname']\n-    depIndex = sessRes['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value  \n-    \n-    a = 0;\n-    listDns = []\n-    listPip = []\n-    for mc in machines:\n-        listDns.append(mc['dns'])\n-        listPip.append(mc['pip'])\n-        \n-    \n-    \n-    print listDns\n-    for res in result['deploy'][depIndex]['vm']:\n-        for l in listDns:\n-            if res['dns'] == l:\n-                index = result['deploy'][depIndex]['vm'].index(res)\n-                del result['deploy'][depIndex]['vm'][index]\n-    \n-    \n-    cb.set ('user::{0}'.format(username), result)\n-    cpu = result['deploy'][depIndex]['request']['cpus']\n-    result['deploy'][depIndex]['request']['cpus'] = int(cpu) - len(machines)\n-    \n-   \n-     \n-    if request['provider'] == \"AWS\":\n-        \n-        for res in listDns:\n-            cmd='sudo ./couchbase-cli rebalance -c {0}  --server-remove={1}  -u Administrator -p password'.format(pvm,res)\n-            p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                                  cwd = r'/root/opt/couchbase/bin', shell =True)\n-            p4.wait()\n-        \n-        del_aws_ins(request, listIns)\n-    else:\n-        \n-        for res in listPip:\n-            cmd='sudo ./couchbase-cli rebalance -c {0}  --server-remove={1}  -u Administrator -p password'.format(pvm,res)\n-            p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                                  cwd = r'/root/opt/couchbase/bin', shell =True)\n-            p4.wait()\n-            \n-        del_inst(request,listIns)\n-            \n-    request['status'] = \"IHDEL\"\n-    print result       \n-    cb.set(\"DeploymentRequest\", request)\n-    \n-    \n-    \n-def main():\n-    cb = Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-\n-    while True:\n-        try:\n-            request = cb.get(\"DeploymentRequest\").value\n-        except:\n-            continue\n-        \n-        if request['status'] == \"RDDE\":\n-            handleNewDeployment(request,cb)  \n-        elif request['status'] == \"RDAD\":    \n-            handleNewInstances(request,cb)  \n-        elif request['status'] == \"RDDEL\":\n-            delInstance(request,cb)       \n-            \n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('u\\'', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-    \n-\n-def aws_mkfile_add(vm, user, key):\n-    '''\n-    filekey = open(\"/tmp/piushs.pem\".format(user), \"w\")\n-    filekey.write(key)\n-    filekey.close()\n-    '''\n-    cfgfile = open(\"/tmp/addIns.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/{0}.pem\".format(user))\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for v in vm:\n-        \n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(v['dns']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def gce_mkfile(nodesup):\n-   \n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','user')\n-    Config.set('global','ssh_key', \"/tmp/id_rsa\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        count = count +1\n-    \n-    Config.add_section('membase')  \n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def gce_mkfile_cluster(nodesup):\n-   \n-    cfgfile = open(\"/tmp/testCluster.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','user')\n-    Config.set('global','ssh_key', \"/tmp/id_rsa\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        if count == 1:\n-            a = convert_node_ip_string(node.public_ips)\n-            Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        else:\n-            a = convert_node_ip_string(node.private_ips)\n-            Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        count = count +1\n-    \n-    Config.add_section('membase')  \n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def aws_mkfile(nodesup):\n-    \n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(node.__dict__['extra']['dns_name']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    \n-    cfgfile = open(\"/tmp/testCluster.ini\",'w')\n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-if __name__ == \"__main__\":\n-    main()"
    },
    {
      "sha": "a184371606934505d44e02289f62a328643c352d",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/d06e549d112300141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 336,
      "changes": 336,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/d06e549d112300141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/d06e549d112300141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/d06e549d112300141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,336 +0,0 @@\n-\n-# Create your views here.\n-\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-def create_instance(request):\n-    \n-    location = request['loc']\n-        \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-        \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-    \n-    return nodesup\n-    \n-def handleNewDeployment(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    bucket =[]\n-    vms = []\n-    \n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                           'dns': convert_node_ip_string(node.__dict__['extra']['dns_name'])})\n-        \n-    bucket.append ({ 'bucketname' : request['bucketname'], 'bucketsize':request['bucket_size']});\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    print \"hehhr\" \n-    print result\n-    \n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    request['status'] = \"IHDE\"        \n-    \n-    if result['deploy'] == None:\n-        print \"1\"\n-        result['deploy'] = [{'request':request, \n-                             'bucket': bucket,\n-                             'vm':vms}]\n-    else :\n-        print \"2\"\n-        result['deploy'].append({'request':request, 'bucket' : bucket, 'vm':vms})\n-    \n-    \n-    print result       \n-    \n-    cb.set(\"DeploymentRequest\",request)\n-    cb.set(\"user::{0}\".format(request['username']), result)\n-       \n-    aws_mkfile(nodesup,request['username'], request['keyfile'] )\n-\n-\n-def handleNewInstances(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    resultSession = cb.get(\"SessionDetails\").value\n-    \n-    depIndex = resultSession['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    \n-    vms = result['deploy'][depIndex]['vm']\n-    \n-    newVM= []\n-    mainVm = vms[0]\n-    newVM.append(mainVm)\n-    cb.set(\"VMPrimary\",mainVm)\n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                    'dns':node.__dict__['extra']['dns_name']})\n-        newVM.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                    'dns':node.__dict__['extra']['dns_name']})\n-     \n-    \n-    result['deploy'][depIndex]['newvm'] = newVM   \n-    result['deploy'][depIndex]['vm'] = vms \n-    cpu = result['deploy'][depIndex]['request']['cpus'] \n-    result['deploy'][depIndex]['request']['cpus']  = int (cpu) +1 \n-    \n-    cb.set(\"user::{0}\".format(request['username']),result)\n-    \n-    print result\n-    \n-    request[\"status\"] = \"IHAD\"\n-    \n-    cb.set(\"DeploymentRequest\",request)\n-       \n-    aws_mkfile(nodesup,request['username'], request['keyfile'] )\n-    aws_mkfile_add(newVM,request['username'], request['keyfile'])\n-\n-\n-def delInstance(request,cb):\n-    \n-    location = request['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    \n-    machines = request['delmachines']\n-    \n-    listIns = []\n-    for mc in machines:\n-        listIns.append(mc['nodeid'])\n-        \n-    pvm = cb.get(\"VMPrimary\").value\n-    print list\n-    \n-    \n-    \n-    for node in nodes :\n-        if (node.id in listIns):\n-            driver.destroy_node(node)\n-     \n-    sessRes = cb.get(\"SessionDetails\").value\n-    username = sessRes['username']\n-    depname = sessRes['deploymentname']\n-    depIndex = sessRes['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value  \n-    \n-    a = 0;\n-    listDns = []\n-    for mc in machines:\n-        listDns.append(mc['dns'])\n-    \n-    \n-    for res in result['deploy'][depIndex]['vm']:\n-        if res['dns'] in listDns:\n-            del result['deploy'][depIndex]['vm'][a]\n-    a = a+1\n-    \n-    nodes = driver.list_nodes()\n-    \n-    \n-    for res['dns'] in listDns:\n-        cmd='sudo ./couchbase-cli rebalance -c {0}  --server-remove={1}  -u Administrator -p password'.format(pvm['dns'],res['dns'])\n-        p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                              cwd = r'/root/opt/couchbase/bin', shell =True)\n-        p4.wait()\n-            \n-    request['status'] = \"IHDEL\"\n-    print result       \n-    cb.set(\"DeploymentRequest\", request)\n-    \n-    \n-    \n-def main():\n-    cb = Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-\n-    while True:\n-        try:\n-            request = cb.get(\"DeploymentRequest\").value\n-        except:\n-            continue\n-        \n-        if request['status'] == \"RDDE\":\n-            handleNewDeployment(request,cb)  \n-        elif request['status'] == \"RDAD\":    \n-            handleNewInstances(request,cb)  \n-        elif request['status'] == \"RDDEL\":\n-            delInstance(request,cb)       \n-            \n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-    \n-\n-def aws_mkfile_add(vm, user, key):\n-    '''\n-    filekey = open(\"/tmp/{0}.pem\".format(user), \"w\")\n-    filekey.write(key)\n-    filekey.close()\n-    '''\n-    cfgfile = open(\"/tmp/addIns.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/{0}.pem\".format(user))\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for v in vm:\n-        \n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(v['dns']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-\n-def aws_mkfile(nodesup, user, key):\n-    '''\n-    filekey = open(\"/tmp/{0}.pem\".format(user), \"w\")\n-    filekey.write(key)\n-    filekey.close()\n-    '''\n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/{0}.pem\".format(user))\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(node.__dict__['extra']['dns_name']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-if __name__ == \"__main__\":\n-    main()"
    },
    {
      "sha": "758297f98ec5deeacd03347bca135f18f20494e0",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/d07a7887ef2000141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 87,
      "changes": 87,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/d07a7887ef2000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/d07a7887ef2000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/d07a7887ef2000141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,87 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-<head>\n-    <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>\n-\t<script>\n-\t\n-\t\n-\t     \n-\t     $(document).ready(function(){\n-\t    \t  $(\"select\").change(function(){\n-\t    \t    \n-\t    \t\t  \n-\t    \t     $(\"#view\").load(\"../static/providerview.html\")\n-\t    \t    \n-\t    \t  });\n-\t    \t});\n-\t\n-\t</script>\n-\n-</head>\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Deployment Form</h1></span>\n-        </div>\n-\n-        <form id=\"couchdbform\" class=\"content\" action=\"/deploy/\" method=\"POST\"> \n-\n-        <fieldset>\n-            <table>\n-                <tbody>\n-                \t<tr> \n-                \t    <td >\n-\t\t\t\t\t\t\t<h3 >&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     Select a Cloud Provider</h3>\n-\t\t\t\t\t\t</td>\n-\t\t\t\t\t\t<td>\n-\t\t\t\t\t\t\t<select name=\"provider\" id =\"pr\">\n-\t\t\t\t\t\t\t     <option>Select</option>\n-\t\t\t\t\t   \t\t\t <option>AWS </option>\n-\t\t\t\t\t   \t\t\t <option>Azure </option>\n-\t\t\t\t\t\t\t</select>\n-\t\t\t\t\t\t</td>\n-\t\t\t\t\t</tr>\n-\t\t\t    </tbody>\n-\t\t\t</table>\t\n-\t\t</fieldset>\n-\t\t\n-\t\t<fieldset style=\"visibility: visible\" id = \"view\">\n-\t\t\n-\t    </fieldset>   \n-\t    \n-\t    <br/>\n-\t    <br/>\n-\t\t     \n-\t\t<div align= \"center\">\n-\t\t\t\t<input type=\"submit\" value =\"Launch Instances\">\n-\t    </div>    \n-\t   </form>\n-\t   \n-\t       \n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "42d3bec933ab00666539b2b07672526f073cb19a",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/e1eb2467b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 41,
      "changes": 41,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/e1eb2467b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/e1eb2467b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/e1eb2467b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,41 +0,0 @@\n-# thruput test\n-# 0.1M load, 0.05M hot reload, 1M access creates, no draining\n-#\n-# system memory: 20G per node\n-\n-performance.eperf.EPerfClient.test_eperf_thruput\n-\n-params:\n-\n-# general\n-batch=200\n-kind=nonjson\n-mem_quota=20000\n-spec=thruput-2\n-avg_value_size=50\n-\n-# load phase\n-hot_init_items=50000\n-items=100000\n-\n-# access phase\n-# Read:Insert:Update:Delete Ratio = 50:4:46:0.\n-ratio_sets=0.5\n-ratio_misses=0\n-ratio_creates=0.08\n-ratio_deletes=0\n-ratio_hot=0.05\n-ratio_hot_gets=0.0995\n-ratio_hot_sets=0.0995\n-ratio_expirations=0\n-max_creates=1000000\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-load_wait_until_drained=1\n-loop_wait_until_drained=0\n-mcsoda_heartbeat=3\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "29d42679dc90290555e16d5f6fde6cc37c8c2f3a",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/f06e9a6e812100141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 83,
      "changes": 83,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/f06e9a6e812100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/f06e9a6e812100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/0/f06e9a6e812100141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,83 +0,0 @@\n-<!DOCTYPE html>\n-<html>\n-<head>\n-<link href=\"http://getbootstrap.com/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n-<script src=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js\"></script>\n-\n-<script>\n-var xmlhttp;\n-function loadXMLDoc(url,cfunc)\n-{\n-\tif (window.XMLHttpRequest)\n-\t  {// code for IE7+, Firefox, Chrome, Opera, Safari\n-\t  xmlhttp=new XMLHttpRequest();\n-\t  }\n-\telse\n-\t  {// code for IE6, IE5\n-\t  xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n-\t  }\n-\txmlhttp.onreadystatechange=cfunc;\n-\txmlhttp.open(\"POST\",url,true);\n-\txmlhttp.send();\n-}\n-\n-var myVar = setInterval(function(){myFunction()},3000);\n-\n-function myFunction()\n-{\n-  \n-loadXMLDoc(\"/poll_ins_state/\",function()\n-  {\n-  if (xmlhttp.readyState==4 && xmlhttp.status==200)\n-    {\n-       stre = xmlhttp.responseText;\n-    \n-       stre = JSON.parse(stre)\n-       \n-     //  document.getElementById(\"demo\").innerHTML = stre\n-       if (stre == \"RD\")\n-       {\n-    \t   {% load staticfiles %}\n-           document.getElementById(\"ins\").src=\"{% static \"ajax-loader.gif\" %}\" \n-           \n-           document.getElementById(\"Done\").style.visibility=\"hidden\";\n-       }\n-       else if (stre == \"CO\")\n-       {\n-    \t   {% load staticfiles %}\n-           document.getElementById(\"ins\").src=\"{% static \"checkmark.ico\" %}\" \n-           \n-           document.getElementById(\"Done\").style.visibility=\"visible\";\n-           \n-           clearInterval(myVar)  \n-       }\n-    }\n-  });\n-}\n-\n-\n-</script>\n-</head>\n-<body onload = \"myFunction()\" >\n-\n-\n-  <br/>\n-  \n-  {% load staticfiles %}\n-  <div align=\"center\" visibility:hidden>\n-        <br/>\n-  \t\tCreating Instances <img id = \"ins\" src = \"{% static \"ajax-loader.gif\" %}\"  >\t</img>\n-  </div>\n-  \n-  \n-  <br/><br/><br/><br/>\n-  <div align=\"center\">\n-  \t\t<form id=\"viewform\" method=\"POST\" action = \"/mngcluster/\" >\n-         \t<input id = \"Done\" type = \"submit\" value = \"Continue\">\n-  \t\t</form>\n-  </div>\n-  <p id = \"demo\"> </p>\n-</body>\n-\n-\n-</html>\n\\ No newline at end of file"
    },
    {
      "sha": "ed644bd4ec5b1ca2fb55cd721d129b7446911320",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/01761b67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 52,
      "changes": 52,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/01761b67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/01761b67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/01761b67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,52 +0,0 @@\n-# Perf-rebalance test with views\n-# 6 clients\n-# 600 memcache ops/sec\n-# 240 queries/sec\n-# 80% reads, 20% writes (12% updates/deletes, 8% inserts)\n-# 500K dataset, non DGM\n-# 1 design ddoc, 8 views\n-# Rebalance from 2 to 3 nodes\n-# Rebalance after 50K queries, 800K queries total\n-# No view compaction\n-\n-performance.iperf.RebalanceTests.test_view_rebalance_1\n-\n-params:\n-\n-# general\n-batch=50\n-kind=json\n-mem_quota=2500\n-\n-# load phase\n-items=500000\n-hot_init_items=1000\n-\n-# access phase\n-ratio_sets=0.2\n-ratio_misses=0.05\n-ratio_creates=0.40\n-ratio_deletes=0.50\n-ratio_hot=0.2\n-ratio_hot_gets=0.99\n-ratio_hot_sets=0.99\n-ratio_expirations=0.0\n-bg_max_ops_per_sec=100\n-fg_max_ops_per_sec=40\n-fg_max_ops=800000\n-rebalance_after=50000\n-total_clients=6\n-\n-# Rebalance\n-num_nodes_before=2\n-num_nodes_after=2\n-bg_protocol=memcached-binary\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-mcsoda_heartbeat=3\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0\n-view_compaction=100"
    },
    {
      "sha": "fe4647f3c8c2f18892fd3bc79c2eb811779e050e",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/03410f67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 44,
      "changes": 44,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/03410f67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/03410f67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/03410f67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,44 +0,0 @@\n-# mixed suv 80M load, 8M hot reload, 3M access creates\n-# speed limit = 1k per client\n-# num clients = 40\n-# DGM\n-#\n-performance.eperf.EPerfClient.test_eperf_mixed\n-\n-params:\n-\n-# general\n-batch=50\n-kind=nonjson\n-mem_quota=10000\n-avg_value_size=1024\n-\n-# cbm\n-cbm=0\n-\n-# load phase\n-hot_init_items=8000000\n-items=50000000\n-hot_load_get=1\n-load_mcsoda_max_ops_sec=500\n-\n-# access phase\n-# 80% read, 20% write, Insert/Update/Delete = 17:80:3\n-ratio_sets=0.2\n-ratio_misses=0.05\n-ratio_creates=0.17\n-ratio_deletes=0.036\n-ratio_hot=0.35\n-ratio_hot_gets=0.2\n-ratio_hot_sets=0.2\n-ratio_expirations=0.03\n-max_creates=4000000\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-mcsoda_heartbeat=3\n-mcsoda_max_ops_sec=1000\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "bbd5772355a2e5bed5327be7fec95fa2554b864d",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/03bb4e67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 1,
      "changes": 1,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/03bb4e67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/03bb4e67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/03bb4e67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1 +0,0 @@\n-c:\\tmp\\cb_1.8.0r-29.exe /s -f1c:\\automation\\cb_upgrade_172_to_180_x86_64_2k8.iss\n\\ No newline at end of file"
    },
    {
      "sha": "d0a38c4ee3dde7145b1281cb89f37f2bad4522c1",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/102587f5001c00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 471,
      "changes": 471,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/102587f5001c00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/102587f5001c00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/102587f5001c00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,471 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-from time import sleep\n-\n-\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = password = ''\n-    if request.POST:\n-        '''\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            state = \"Your username and/or password were incorrect.\"\n-            return render_to_response(\"message.html\",{'state':state, 'username': username})\n-            '''\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        result = cb.get(\"user::piushs\").value\n-        \n-        \n-        \n-        if (result['password1'] == password) :\n-                request.session['username'] = username\n-                return render_to_response(\"deployments.html\",{'result':result})\n-        else :\n-                return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})            \n- \n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    return render_to_response('deployments.html', {'result' :result})\n-\n-@csrf_exempt\n-def couchdep(request) :\n-    return render_to_response('couchdbdep.html')\n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-        \n-def aws_mkfile(nodesup):\n-\n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/Users/piush/Key/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),a)\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    \n-\n-@csrf_exempt\n-def deploy(request):\n-    \n-    \n-    username = request.session['username']\n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    result = json.loads(result)\n-\n-    depname = request.POST.get('depname')\n-    cpus = request.POST.get('cpus')\n-    provider = request.POST.get('provider')\n-    loc = request.POST.get('loc')\n-    mc = request.POST.get('machine')\n-    cbs = request.POST.get('machine')    \n-    \n-    \n-    \n-    \n-    location = request.POST.get(\"loc\")\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"************************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"cpus\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    \n-    bucket =[]\n-    vms = []\n-    \n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id})\n-        \n-    bucket.append ({ 'name' : \"default\", 'vm':vms });\n-    \n-    print \"hehhr\" \n-    print result\n-\n-    if result['deploy'] == None:\n-        print \"1\"\n-        result['deploy'] = [{'name':depname,'Provider':provider,'cpu': cpus,'cbi':cbs, 'loc':loc, 'mc':mc, 'bucket': bucket}]\n-    else :\n-        print \"2\"\n-        result['deploy'].append({'name':depname,'Provider':provider,'cpu': cpus,'cbi':cbs, 'loc':loc, 'mc':mc, 'bucket' : bucket})\n-    \n-    \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    aws_mkfile(nodesup)\n-   \n-    sleep (120) \n-    path = os.getcwd() \n-    print path\n-    os.chdir(path + \"/auth/testrunner\")\n-    os.system('pwd')\n-    \n-    os.system('python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-966-rel,amazon=true')\n-    os.chdir(path)\n-    \n-    \n-    return render_to_response(\"managecluster.html\", {'bucket' : bucket})\n-\n-@csrf_exempt\n-def mngcluster(request):\n-    \n-    request.session['deploymentname'] = request.POST.get('deplist')\n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = request.session['username']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-    dep = request.POST.get('deplist')\n-    print dep\n-   # result = json.loads(result)\n-    \n-    print result['deploy'][0]\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['name'] == dep:\n-            temp = res\n-            break\n-    \n-    return render_to_response(\"managecluster.html\", {'bucket':temp['bucket']})\n-\n-\n-@csrf_exempt\n-def mngviewDel(request):\n-\n-     cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['name'] == dep:\n-            temp = res\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    tempbucket= {}\n-    bucketIndex = 0\n-    for res in temp['bucket'] :\n-        if res['name'] == bucket:\n-            tempbucket = res\n-            break\n-        bucketIndex = bucketIndex + 1\n-    \n-    \n-    location = temp['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"**********\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"number\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    vms = tempbucket['vm']\n-    \n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id})\n-        \n-    result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'] = vms\n-    \n-        \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    aws_mkfile(nodesup)\n-   \n-    sleep (600) \n-    path = os.getcwd() \n-    print path\n-    os.chdir(path + \"/auth/testrunner\")\n-    os.system('pwd')\n-    \n-    os.system('python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-966-rel,amazon=true')\n-    os.chdir(path)\n-        \n-    return render_to_response(\"managecluster.html\")\n-    \n-    \n-@csrf_exempt\n-def mngviewAdd(request):\n-    \n-\n-    username = request.session['username']\n-    dep = request.session ['deploymentname']\n-    bucket = request.POST.get(\"bucket\")\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['name'] == dep:\n-            temp = res\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    tempbucket= {}\n-    bucketIndex = 0\n-    for res in temp['bucket'] :\n-        if res['name'] == bucket:\n-            tempbucket = res\n-            break\n-        bucketIndex = bucketIndex + 1\n-    \n-    \n-    location = temp['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"number\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    vms = tempbucket['vm']\n-    \n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id})\n-        \n-    result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'] = vms\n-    \n-        \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    aws_mkfile(nodesup)\n-   \n-    sleep (600) \n-    path = os.getcwd() \n-    print path\n-    os.chdir(path + \"/auth/testrunner\")\n-    os.system('pwd')\n-    \n-    os.system('python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-966-rel,amazon=true')\n-    os.chdir(path)\n-    \n-    \n-    return HttpResponse (\"Action Successful\")\n\\ No newline at end of file"
    },
    {
      "sha": "458927c0563a0302e7f80ed267e75a3f6f53f823",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/10a576b1411400141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 14,
      "changes": 14,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/10a576b1411400141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/10a576b1411400141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/10a576b1411400141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,14 +0,0 @@\n-from django.conf.urls import *\n-\n-#from django.contrib import admin\n-#admin.autodiscover()\n-\n-urlpatterns = patterns('',\n-    # Examples:\n-    # url(r'^$', 'CouchbaseCloud.views.home', name='home'),\n-    # url(r'^blog/', include('blog.urls')),\n-\n-    url(r'^auth/$', 'auth.views.auth_user'),\n-    url(r'^auth/(?P<username>\\w+)/$','auth.views.login_user')\n-    \n-)"
    },
    {
      "sha": "0d9318d9749f7174bbb453fa9104ce3d4355faf2",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/10f45a79b21b00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 98,
      "changes": 98,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/10f45a79b21b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/10f45a79b21b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/10f45a79b21b00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,98 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n- \n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-            <script>\n-               var dep = []\n-               var list = []\n-            </script>\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>Couchbase Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select  id=\"deplist\" name=\"deplist\">\n-                 \t\t\n-                  \t\t{% for res in result.deploy %}\n-                     \t\t<option value=\"{{ res.name }}\">{{res.name}}</option>\n-                     \t\t\n-                     \t\t<script>\n-                     \t    \tvar map ={}\n-                     \t    \t\n-                     \t    \tmap[\"name\"] = \"{{ res.name }}\"\n-                     \t    \tmap['cpu'] = \"{{ res.cpu }}\"\n-                     \t    \tmap['cbi'] = \"{{ res.cbi }}\"\n-                     \t    \tmap['Provider'] = \"{{ res.Provider }}\"\n-                     \t    \tdep.push(map)\n-                     \t    \tlist.push(\"{{ res.name }}\")\n-                     \t    </script>\n-                     \t    \t\n-                  \t\t{% endfor %} \n-\t\t\t    </select>\n-\t\t\t    \n-\t\t\t    <br> </br>\n-\t\t\t    <input type=\"submit\" name=\"ckdep\">Check Deployment</input>\n-                </div>\n-            </fieldset>       \n-       \n-       \t\t<script name = \"text/javascript\">\n-          \n-      \t\t\t function getSelectedText(elementId) {\n-              \t\t\t  var elt = document.getElementById(elementId);\n-\n-               \t\t\t if (elt.selectedIndex == -1)\n-                    \t\treturn null;\n-\n-               \t\t\treturn elt.options[elt.selectedIndex].text;\n-       \t\t\t } \n-       \n-\t\t\t\t function test()\n-\t\t\t\t {\n-\t\t\t\t\t     var temp = getSelectedText(\"deplist\")\n-\t\t\t\t\t     \n-\t\t\t\t\t     var str=\"\";\n-\t\t\t \t\t     \n-\t\t\t\t\t     for (var i=0; i<dep.length; i++)\n-\t\t\t\t\t     { \n-\t\t\t\t\t    \t    if (temp == dep[i]['name'])\n-\t\t\t\t\t    \t    {\n-\t\t\t\t\t    \t    \tstr = str + dep[i]['name'] + \",\" + dep[i]['Provider'] + \",\" + dep[i]['cbi'] + \",\" + dep[i]['cpu'] + \"\\n\"\n-\t\t\t\t\t    \t    \tdocument.getElementById('demo').innerHTML = str\n-\t\t\t\t\t    \t    }\n-\t\t\t\t\t     }\n-\t\t\t\t\t     \n-\t\t\t\t }\n-\t\t\t\t \n-\t\t    </script> \n-\n-\t\t\t<p id = \"demo\"> </p>    \n-\t\t        \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "bec8b357fbcc4e2af53972b0d864e6212fe8140a",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/21f23d67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 96,
      "changes": 96,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/21f23d67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/21f23d67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/21f23d67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,96 +0,0 @@\n-import json\n-from clitest.cli_base import CliBaseTest\n-from memcached.helper.data_helper import  MemcachedClientHelper\n-from membase.api.rest_client import RestConnection\n-\n-\n-class cbstatsTests(CliBaseTest):\n-    def setUp(self):\n-        super(cbstatsTests, self).setUp()\n-        self.command = self.input.param(\"command\", \"\")\n-        self.vbucketId = self.input.param(\"vbid\", -1)\n-        self.timeout = 6000\n-        self.num_items = self.input.param(\"items\", 1000)\n-        self.command_options = self.input.param(\"command_options\", '')\n-        self.set_get_ratio = self.input.param(\"set_get_ratio\", 0.9)\n-        self.item_size = self.input.param(\"item_size\", 128)\n-\n-\n-    def tearDown(self):\n-        super(cbstatsTests, self).tearDown()\n-\n-\n-    def cbstats_test(self):\n-        \"\"\"We use cbstas to check the various stats of server\"\"\"\n-        cluster_len = RestConnection(self.master).get_cluster_size()\n-        if self.command == \"kvstore\":\n-            self.verify_cluster_stats()\n-        if self.command != \"key\":\n-            if \"tapagg\" in self.command and cluster_len == 1:\n-                self.log.info(\"This command only works with cluster with 2 nodes or more\")\n-                raise Exception(\"This command does not work with one node cluster\")\n-            else:\n-                # tapagg needs replica items to print out results\n-                if \"tapagg\" in self.command:\n-                    for bucket in self.buckets:\n-                        self.shell.execute_cbworkloadgen(self.couchbase_usrname, \\\n-                                        self.couchbase_password, self.num_items, \\\n-                                        self.set_get_ratio, bucket.name, \\\n-                                        self.item_size, self.command_options)\n-                        self.sleep(5)\n-                for bucket in self.buckets:\n-                    output, error = self.shell.execute_cbstats(bucket, self.command)\n-                    self.verify_results(output, error)\n-                    if self.command in [\"allocator\", \"kvtimings\", \"timings\"]:\n-                        self.log.warn(\"We will not verify exact values for this stat\")\n-                    else:\n-                        self._verify_direct_client_stats(bucket, self.command, output)\n-        else:\n-            mc_conn = MemcachedClientHelper.direct_client(self.master, self.buckets[0].name, self.timeout)\n-            bucket_info = RestConnection(self.master).get_bucket(self.buckets[0])\n-            keys_map = {}\n-            for i in range(self.num_items):\n-                vb_id = i - len(bucket_info.vbuckets) * int(i / len(bucket_info.vbuckets))\n-                mc_conn.set(\"test_docs-%s\" % i, 0, 0, json.dumps('{ \"test\" : \"test\"}').encode(\"ascii\", \"ignore\"), vb_id)\n-                keys_map[\"test_docs-%s\" % i] = vb_id\n-            for key, vb_id in keys_map.iteritems():\n-                output, error = self.shell.execute_cbstats(self.buckets[0], self.command, key, vb_id)\n-                self.verify_results(output, error)\n-\n-\n-\n-    def verify_results(self, output, error):\n-        if len(error) > 0 and '\\n'.join(error).find(\"DeprecationWarning\") == -1:\n-            raise Exception(\"Command throw out error message. Please check the output of remote_util\")\n-        else:\n-            if '\\n'.join(output).lower().find(\"not found\") != -1:\n-                raise Exception(\"Command throw out error message. Please check the output of remote_util\")\n-            elif output.__len__() < 1:\n-                raise Exception(\"Command does not throw out error message but the output is empty. Please check the output of remote_util\")\n-\n-    def _verify_direct_client_stats(self, bucket, command, output):\n-        mc_conn = MemcachedClientHelper.direct_client(self.master, bucket.name, self.timeout)\n-        for line in output:\n-            stats = line.rsplit(\":\", 1)\n-            collect_stats = \"\"\n-            commands = [\"hash\", \"tapagg\"]\n-            if command in commands:\n-                output, error = self.shell.execute_cbstats(bucket, command)\n-                d = []\n-                if len(output) > 0:\n-                    d = dict(s.strip().rsplit(':', 1) for s in output)\n-                    collect_stats = d[stats[0].strip()].strip()\n-                else:\n-                    raise Exception(\"Command does not throw out error message but cbstats gives no output. \\\n-                                      Please check the output manually\")\n-            else:\n-                collect_stats = mc_conn.stats(command)[stats[0].strip()]\n-            self.log.info(\"CbStats###### for %s:::%s==%s\" % (stats[0].strip(), collect_stats, stats[1].strip()))\n-            if stats[1].strip() == collect_stats:\n-                continue\n-            else:\n-                if stats[0].find('tcmalloc') != -1 or stats[0].find('bytes') != -1 or\\\n-                stats[0].find('mem_used') != -1:\n-                    self.log.warn(\"Stat didn't match, but it can be changed, not a bug\")\n-                    continue\n-                raise Exception(\"Command does not throw out error message but cbstats does not match.\")"
    },
    {
      "sha": "1b7d2d1b25caad36a8e1a96f99e65a494a1e30ba",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/30981467b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 47,
      "changes": 47,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/30981467b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/30981467b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/30981467b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,47 +0,0 @@\n-# mixed 0.5M load, 0.1M hot reload, 0.5M access creates\n-#\n-# with observe enabled, wait for draining\n-# system memory: 20G per node\n-\n-performance.eperf.EPerfClient.test_eperf_mixed\n-\n-params:\n-\n-# general\n-batch=50\n-kind=nonjson\n-mem_quota=20000\n-spec=mixed-sanity-compact-30-obs\n-db_compaction=30\n-observe=1\n-obs_persist_count=1\n-obs_repl_count=0\n-\n-# cbstats collector\n-cb_stats=1\n-\n-# load phase\n-hot_init_items=100000\n-items=500000\n-\n-# access phase\n-# Read:Insert:Update:Delete Ratio = 50:4:40:6.\n-ratio_sets=0.5\n-ratio_misses=0.05\n-ratio_creates=0.08\n-ratio_deletes=0.13\n-ratio_hot=0.05\n-ratio_hot_gets=0.0995\n-ratio_hot_sets=0.0995\n-ratio_expirations=0.03\n-max_creates=500000\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-load_wait_until_drained=1\n-loop_wait_until_drained=1\n-mcsoda_heartbeat=3\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "4ae441c8464139b0fd4969f2a999bc85567ec94c",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/34af2567b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 39,
      "changes": 39,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/34af2567b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/34af2567b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/34af2567b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,39 +0,0 @@\n-# write 20M load, 7M hot reload, 9M access creates, no draining\n-#\n-# speed limit - 500 per cliennt, 15k total\n-# system memory: 20G per node\n-\n-performance.eperf.EPerfClient.test_eperf_write\n-\n-params:\n-\n-# general\n-batch=50\n-kind=nonjson\n-mem_quota=15000\n-\n-# load phase\n-hot_init_items=3000000\n-items=15000000\n-\n-# access phase\n-# Read:Insert:Update:Delete Ratio = 20:15:65:0.\n-ratio_sets=0.8\n-ratio_misses=0.05\n-ratio_creates=0.1875\n-ratio_deletes=0\n-ratio_hot=0.02\n-ratio_hot_gets=1\n-ratio_hot_sets=1\n-ratio_expirations=0\n-max_creates=11000000\n-hot_shift=0\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-mcsoda_heartbeat=3\n-mcsoda_max_ops_sec=500\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "2b00653f695c6a4d1da41f4189d0dcefe7a1b61b",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/40417611f02000141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 92,
      "changes": 92,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/40417611f02000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/40417611f02000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/40417611f02000141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,92 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-<head>\n-    <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"></script>\n-\t<script>\n-\t\n-\t\n-\t     \n-\t     $(document).ready(function(){\n-\t    \t  $(\"select\").change(function(){\n-\t    \t    \n-\t    \t\t if (document.getElementById(\"pr\").value == \"AWS\") \n-\t    \t     {\n-\t    \t\t\tdocument.getElementById(\"view\").style.visibility = \"hidden\" \n-\t    \t     \t$(\"#view\").load(\"../static/providerview.html\")\n-\t    \t  \t }\n-\t    \t     else\n-\t    \t    \t document.getElementById(\"view\").style.visibility = \"hidden\"\t\n-\t    \t    \n-\t    \t  });\n-\t    \t});\n-\t\n-\t</script>\n-\n-</head>\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Deployment Form</h1></span>\n-        </div>\n-\n-        <form id=\"couchdbform\" class=\"content\" action=\"/deploy/\" method=\"POST\"> \n-\n-        <fieldset>\n-            <table>\n-                <tbody>\n-                \t<tr> \n-                \t    <td >\n-\t\t\t\t\t\t\t<h3 >&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-\t\t\t\t\t\t\t     Select a Cloud Provider</h3>\n-\t\t\t\t\t\t</td>\n-\t\t\t\t\t\t<td>\n-\t\t\t\t\t\t\t<select name=\"provider\" id =\"pr\">\n-\t\t\t\t\t\t\t     <option>Select</option>\n-\t\t\t\t\t   \t\t\t <option>AWS </option>\n-\t\t\t\t\t   \t\t\t <option>Azure </option>\n-\t\t\t\t\t\t\t</select>\n-\t\t\t\t\t\t</td>\n-\t\t\t\t\t</tr>\n-\t\t\t    </tbody>\n-\t\t\t</table>\t\n-\t\t</fieldset>\n-\t\t\n-\t\t<fieldset style=\"visibility: visible\" id = \"view\">\n-\t\t\n-\t    </fieldset>   \n-\t    \n-\t    <br/>\n-\t    <br/>\n-\t\t     \n-\t\t<div align= \"center\">\n-\t\t\t\t<input type=\"submit\" value =\"Launch Instances\">\n-\t    </div>    \n-\t   </form>\n-\t   \n-\t       \n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "73c2b70d1b163d541f24f98d6d47fa9f7890a907",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/40c6efaf322800141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 431,
      "changes": 431,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/40c6efaf322800141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/40c6efaf322800141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/40c6efaf322800141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,431 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-from pprint import pprint\n-\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-@csrf_exempt  \n-def getRamSize(request):\n-    \n-    cb = Couchbase.connect(bucket=\"default\", host = \"localhost\")\n-    \n-    result = cb.get(\"Machine\").value\n-    try:\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-\n-    c = result[request.POST.get('provider')][request.POST.get('machine')]\n-    return HttpResponse(c)\n-    \n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb= Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-    diction = {\"AWS\":{'m3.large': '3584'}, \"GCE\":{\"n1-highmem-4\":'3584', \"n1-highmem-8\":'3584'},\n-               \"RackSpace\":{\"8GB Standard Instance\":'3584'}, \"Azure\" :{\"Large\" : '3584'}}\n-    cb.set (\"Machine\", diction )\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = password = ''\n-    if request.POST:\n-        \n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        try :\n-            result = cb.get(\"user::{0}\".format(username)).value\n-            print result\n-            \n-            try :\n-                store = result\n-                result = json.loads(result)  \n-            except:\n-                result = store\n-                  \n-            session = {}\n-        \n-            if (result['password1'] == password) :\n-                session['username'] = username\n-                sessionname = \"SessionDetails::{0}\".format(username)\n-                cb.set(sessionname,session)\n-                \n-                return render_to_response(\"deployments.html\",{'result':result})\n-            else :\n-                return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})  \n-        except:\n-               return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})        \n- \n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    session = {}\n-    \n-    sessionname = \"SessionDetails::{0}\".format(username)    \n-    session['username'] = uname\n-    cb.set(sessionname,session)\n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    return render_to_response('deployments.html', {'result' :result})\n-\n-@csrf_exempt\n-def handleProgress(request):\n-    \n-    cb = Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-    \n-    res = cb.get(\"SessionDetails:{0}\".format(request['user'])).value\n-    username = res['username']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    return render_to_response('deployments.html',{'result':result})\n-\n-@csrf_exempt\n-def couchdep(request) :\n-    \n-    postval = {'username':request['hiduname']}\n-    return render_to_response('couchdbdep.html', {'postval':postval})\n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-        \n-        \n-def save_dep_GCE(storeReq,request):\n-    \n-    testFile = request.FILES['permission']\n-    textf = testFile.read()\n-    \n-    fp = open('/tmp/PRIV.pem','w')    \n-    fp.write(textf)\n-    fp.close()\n-        \n-\n-@csrf_exempt\n-def save_deployment(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get(\"SessionDetails::{0}\".format(request['hiduname'])).value\n-    \n-    if (result != None):\n-        username = result['username']\n-    \n-    result['deploymentname'] = request.POST.get('depname')\n-    \n-    \n-    cb.set(\"SessionDetails::{0}\".format(username),result)\n-   \n-    provider = request.POST.get('provider')\n-    \n-    'Use the parameters in the request for creating instances'\n-    \n-    if provider == \"AWS\":\n-        storeReq = copy.deepcopy(request.POST)\n-        key = request.FILES['keyfile'] \n-        fp = open(\"/tmp/piushs.pem\", 'w')\n-        fp.write(key.read())\n-        fp.close()\n-        \n-    if provider == \"GCE\":\n-        storeReq = copy.deepcopy(request.POST)\n-        save_dep_GCE(storeReq, request)\n-        \n-    if provider == \"RackSpace\":\n-        storeReq = copy.deepcopy(request.POST)\n-        key = request.FILES['prkeyfile'] \n-        fp = open(\"/tmp/rackspacepk\", 'w')\n-        fp.write(key.read())\n-        fp.close()\n-        \n-    if provider == \"Azure\":\n-        storeReq = copy.deepcopy(request.POST)\n-        key = request.FILES['certificate'] \n-        fp = open(\"/tmp/azurekey\", 'w')\n-        fp.write(key.read())\n-        fp.close()\n-    \n-    storeReq['status'] = \"WA\"\n-    storeReq['username'] = username\n-    \n-    depDoc = \"DeploymentRequest::{0}::{1}\".format(username, timestamp())\n-    cb.set(\"{0}\".format(depDoc),storeReq)\n-    \n-    result['depDoc'] = depDoc\n-    cb.set(\"SessionDetails::{0}\".format(username),result)\n-    \n-    test = cb.get(\"DeploymentRequest::{0}::{1}\".format(username,timestamp())).value\n-    print \"<<<<\"\n-    print test\n-    print \">>>>>\"\n-    \n-    \n-    return render_to_response(\"couchbaseconfiguration.html\",{'provider':storeReq['provider'],\n-                                                             'machine':storeReq['machine'], 'cpus':storeReq['cpus'], \n-                                                             'username':username})\n-\n-@csrf_exempt\n-def mngcluster(request):\n-    \n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get (\"SessionDetails::{0}\".format (request['hiduname'])).value\n-\n-    result['deploymentname'] = request.POST.get('deplist')\n-    \n-    cb.set(\"SessionDetails::{0}\".format(request['hiduname']), result)\n-    \n-    username = result['username']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    dep = request.POST.get('deplist')\n-    \n-    print result\n-    \n-    \n-    temp ={}\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-   \n-    if result ['deploy'] != None :     \n-        for res in result['deploy'] :\n-            if res['request']['depname'] == dep:\n-                temp = res\n-                break\n-\n-    if bool(temp):\n-        return render_to_response(\"managecluster.html\", {'temp':temp, 'username': username})\n-    else:\n-        return render_to_response(\"deployments.html\", None)\n-\n-@csrf_exempt\n-def conf_couchbase(request):\n-\n-    print \"Coming Here\"\n-    return render_to_response(\"couchbaseconfiguration.html\",None)\n-    \n-@csrf_exempt\n-def install(request):\n-    \n-    cb = Couchbase.connect (bucket='default', host=\"localhost\")\n-    \n-    val = cb.get(\"SessionDetails::{0}\".format(request['hiduname'])).value\n-    \n-    store = cb.get(val['depDoc']).value\n-    \n-    store['bucketname'] = request.POST.get('bkname')\n-    store['operation'] = request.POST.get('operation')\n-    store['replica'] = request.POST.get ('numrep')\n-    store['password_sasl'] = request.POST.get('rdpasswd')\n-    store['bucket_size'] = request.POST.get('size')\n-    store['ramquota'] = request.POST.get('ramquota')\n-    \n-    \n-    store['status'] = 'RDDE'\n-    cb.set (depDoc, store)\n-    \n-    cpu = store['cpus']\n-    return render_to_response(\"progress.html\",{'cpu':cpu})\n-\n-@csrf_exempt\n-def mngviewDel(request):\n-\n-    \n-    bucket = request.POST.get(\"bucket\")\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    resultsess = cb.get(\"SessionDetails::{0}\".format(request['hiduname'])).value\n-    username = resultsess['username']\n-    dep = resultsess['deploymentname']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['request']['depname'] == dep:\n-            temp = res['request']\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    \n-\n-    machines = request.POST.getlist('ck')\n-\n-    \n-    vms = result['deploy'][deploymentIndex]['vm']    \n-     \n-    flag = 0\n-    primarydns = ''\n-    for vm in vms:\n-        for mc in machines:\n-            if vm['dns'] != mc:\n-                flag = 1\n-                primarydns = vm['dns']\n-                break\n-        if flag == 1:\n-            break\n-        \n-    machineInfo=[]\n-    for vm in vms:\n-        for mc in machines:\n-            if vm['dns'] == mc:\n-                machineInfo.append(vm)\n-                break\n-        \n-    delReq = result['deploy'][deploymentIndex]['request']\n-    delReq['deploymentIndex'] = deploymentIndex\n-    delReq['primaryDns'] = primaryDns\n-    delReq['status'] = \"RDDEL\"\n-    delReq['delmachines'] = machineInfo\n-    \n-    depReq = \"DeploymentRequest::{0}::{1}\".format(username, timestamp())\n-    cb.set(depReq, delReq)\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    ret = cb.get(depReq).value\n-    \n-    while ret['status'] != \"IHDEL\":\n-        ret = cb.get(depReq).value\n-        continue\n-    \n-    return render_to_response(\"deployments.html\", {'result':result})\n-    \n-    \n-@csrf_exempt\n-def mngviewAdd(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    resultsess = cb.get(\"SessionDetails::{0}\".format(request['hiduname'])).value\n-    username = resultsess['username']\n-    dep = resultsess['deploymentname']\n-    \n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-  \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['request']['depname'] == dep:\n-            temp = res['request']\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    \n-    \n-    temp['status'] = 'RDAD'\n-    temp['cpus'] = request.POST.get('number')\n-    \n-    cb.set(\"DeploymentRequest::{0}::{1}\".format(username, timestamp()),temp)\n-    \n-    cpu = request.POST.get('number')\n-    return render_to_response (\"progress.html\", {'cpu':cpu})\n-\n-\n-@csrf_exempt\n-def poll_state(request):\n-    \n-    pollcb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcb.get(\"DeploymentRequest\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    \n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-\n-@csrf_exempt\n-def poll_ins_state(request):\n-    \n-    pollcbconn=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcbconn.get(\"DeploymentRequest\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-"
    },
    {
      "sha": "6d96f088205d58a8776f31fc9231fd7cb4874545",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/50c5643a4a1b00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 91,
      "changes": 91,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/50c5643a4a1b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/50c5643a4a1b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/50c5643a4a1b00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,91 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n- \n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-            <script>\n-               var dep = []\n-               var list = []\n-            </script>\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>CouchDB Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select id=\"deplist\" onchange=\"test();\">\n-                 \t\t\n-                  \t\t{% for res in result.deploy %}\n-                     \t\t<option value=\"{{ res.name }}\">{{res.name}}</option>\n-                     \t\t\n-                     \t\t<script>\n-                     \t    \tvar map ={}\n-                     \t    \t\n-                     \t    \tmap[\"name\"] = \"{{ res.name }}\"\n-                     \t    \tmap['cpu'] = \"{{ res.cpu }}\"\n-                     \t    \tmap['cbi'] = \"{{ res.cbi }}\"\n-                     \t    \tmap['Provider'] = \"{{ res.Provider }}\"\n-                     \t    \tdep.push(map)\n-                     \t    \tlist.push(\"{{ res.name }}\")\n-                     \t    </script>\n-                     \t    \t\n-                  \t\t{% endfor %} \n-\t\t\t    </select>\n-                </div>\n-            </fieldset>       \n-       \n-       \t\t<script name = \"text/javascript\">\n-          \n-      \t\t\t function getSelectedText(elementId) {\n-              \t\t\t  var elt = document.getElementById(elementId);\n-\n-               \t\t\t if (elt.selectedIndex == -1)\n-                    \t\treturn null;\n-\n-               \t\t\treturn elt.options[elt.selectedIndex].text;\n-       \t\t\t } \n-       \n-\t\t\t\t function test()\n-\t\t\t\t {\n-\t\t\t\t\t     var temp = getSelectedText(\"deplist\")\n-\t\t\t\t\t     \n-\t\t\t\t\t     var str=\"def\";\n-\t\t\t \t\t     \n-\t\t\t\t\t     for (int i=0; i<dep.length; i++)\n-\t\t\t\t\t    \t {\n-\t\t\t\t\t    \t    str = str + \",\" + \"dbf\"  \n-\t\t\t\t\t    \t }\n-\t\t\t\t\t     document.getElementById('demo').innerHTML = str\n-\t\t\t\t }\n-\t\t\t\t \n-\t\t    </script> \n-\n-\t\t\t<p id = \"demo\"> </p>    \n-\t\t        \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "21b70c150eb672da131d5b8cc0d84c832cb34346",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/50ea89d64a1b00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 88,
      "changes": 88,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/50ea89d64a1b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/50ea89d64a1b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/50ea89d64a1b00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,88 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n- \n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-            <script>\n-               var dep = []\n-               var list = []\n-            </script>\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>CouchDB Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select id=\"deplist\" onchange=\"test();\">\n-                 \t\t\n-                  \t\t{% for res in result.deploy %}\n-                     \t\t<option value=\"{{ res.name }}\">{{res.name}}</option>\n-                     \t\t\n-                     \t\t<script>\n-                     \t    \tvar map ={}\n-                     \t    \t\n-                     \t    \tmap[\"name\"] = \"{{ res.name }}\"\n-                     \t    \tmap['cpu'] = \"{{ res.cpu }}\"\n-                     \t    \tmap['cbi'] = \"{{ res.cbi }}\"\n-                     \t    \tmap['Provider'] = \"{{ res.Provider }}\"\n-                     \t    \tdep.push(map)\n-                     \t    \tlist.push(\"{{ res.name }}\")\n-                     \t    </script>\n-                     \t    \t\n-                  \t\t{% endfor %} \n-\t\t\t    </select>\n-                </div>\n-            </fieldset>       \n-       \n-       \t\t<script name = \"text/javascript\">\n-          \n-      \t\t\t function getSelectedText(elementId) {\n-              \t\t\t  var elt = document.getElementById(elementId);\n-\n-               \t\t\t if (elt.selectedIndex == -1)\n-                    \t\treturn null;\n-\n-               \t\t\treturn elt.options[elt.selectedIndex].text;\n-       \t\t\t } \n-       \n-\t\t\t\t function test()\n-\t\t\t\t {\n-\t\t\t\t\t     var temp = getSelectedText(\"deplist\")\n-\t\t\t\t\t     \n-\t\t\t\t\t     var str=\"def\";\n-\t\t\t \t\t     \n-\t\t\t\t\t     \n-\t\t\t\t\t     document.getElementById('demo').innerHTML = dep.length\n-\t\t\t\t }\n-\t\t\t\t \n-\t\t    </script> \n-\n-\t\t\t<p id = \"demo\"> </p>    \n-\t\t        \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/604db5e8252100141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/604db5e8252100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/604db5e8252100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/604db5e8252100141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab"
    },
    {
      "sha": "49f7d06bcafc3e6c02f98bcba3a7e49f193334ab",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/60b09f0f2e2700141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 195,
      "changes": 195,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/60b09f0f2e2700141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/60b09f0f2e2700141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/60b09f0f2e2700141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,195 +0,0 @@\n-from azure import *\n-from azure.servicemanagement import *\n-import base64\n-import os\n-\n-import time\n-import datetime\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-def _wait_for_async(sms,request_id):\n-    count = 0\n-    result = sms.get_operation_status(request_id)\n-    while result.status == 'InProgress':\n-        count = count + 1\n-        time.sleep(5)\n-        result = sms.get_operation_status(request_id)\n-    \n-    \n-def _wait_for_deployment(sms,service_name, deployment_name,status='Running'):\n-    count = 0\n-    props = sms.get_deployment_by_name(service_name, deployment_name)\n-    while props.status != status:\n-        count = count + 1\n-        time.sleep(5)\n-        props = sms.get_deployment_by_name(service_name, deployment_name)\n-        \n-def _wait_for_role(sms,service_name, deployment_name, role_instance_name,status='ReadyRole'):\n-    count = 0\n-    props = sms.get_deployment_by_name(service_name, deployment_name)\n-    while self._get_role_instance_status(props, role_instance_name) != status:\n-        count = count + 1\n-        props = self.sms.get_deployment_by_name(service_name, deployment_name)\n-\n-def _get_role_instance_status(deployment, role_instance_name):\n-    for role_instance in deployment.role_instance_list:\n-        if role_instance.instance_name == role_instance_name:\n-            return role_instance.instance_status\n-    return None\n-\n-def AzureHandler(request):\n-    \n-    subscription_id = request['subid']\n-    certificate_path = '/tmp/azurekey'\n-    \n-    sms = ServiceManagementService(subscription_id, certificate_path)\n-\n-    image_name='5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-65-20140606'\n-    \n-    \n-    \n-    tm = timestamp()\n-    name = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-    label = name\n-    desc = name\n-    location = request['loc']\n-    \n-    sms.create_hosted_service(name, label, desc, location)\n-\n-    i = datetime.datetime.now()\n-    dateVar = '{0}-{1}-{2}'.format(i.year, i.month, i.day)\n-    media_link = 'https://portalvhdsmtcz83fp9vjrb.blob.core.windows.net/vhds/'+ name + '-' + name + '-' +dateVar +'.vhd'\n-    \n-    \n-    \n-    location = request['loc']\n-    linux_user_id='azureuser'\n-    linux_config = LinuxConfigurationSet(name, 'azureuser',user_password=None,disable_ssh_password_authentication=True)\n-    \n-    \n-    azure_config = \"/tmp\" + '/.azure'\n-    cert_data_path = azure_config + \"/myCert.pfx\"\n-    with open(cert_data_path, \"rb\") as bfile:\n-        cert_data = base64.b64encode(bfile.read())\n-    \n-    cert_format = 'pfx'\n-    cert_password = ''\n-    cert_res = sms.add_service_certificate(service_name=name,\n-                                data=cert_data,\n-                                certificate_format=cert_format,\n-                                password=cert_password)\n-    \n-    vars(cert_res)\n-    time.sleep(60)\n-    \n-    \n-    azure_config = \"/tmp\" + '/.azure'\n-    thumbprint_path = azure_config + '/thumbprint'\n-    authorized_keys = \"/home/\" + linux_user_id + \"/.ssh/authorized_keys\" \n-    try:\n-        thumbprint=open(thumbprint_path, 'r').readline().split('\\n')[0]\n-    except:\n-        thumbprint=None\n-    \n-    \n-    publickey = PublicKey(thumbprint, authorized_keys)\n-    linux_config.ssh.public_keys.public_keys.append(publickey)\n-    \n-    print vars(publickey)\n-    print vars(linux_config.ssh.public_keys.public_keys.list_type)\n-    \n-    \n-    \n-    print vars(linux_config.ssh.public_keys)\n-    print vars(linux_config.ssh.key_pairs)\n-    \n-    os_hd  = OSVirtualHardDisk(image_name, media_link)\n-    \n-    print vars(os_hd)\n-    \n-    network = ConfigurationSet()\n-    network.configuration_set_type = 'NetworkConfiguration'\n-    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('ssh', 'tcp', '22', '22'))\n-    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('http', 'tcp','8091','8091'))\n-    '''\n-    portIndex = 0\n-    while portIndex <= 65535:\n-        network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('http', 'tcp', \"{0}\".format(portIndex), \n-                                                                                     '{0}'.format(portIndex)))\n-        portIndex = portIndex + 1\n-    '''\n-    result = sms.create_virtual_machine_deployment(service_name=name,\n-        deployment_name=name,\n-        deployment_slot='production',\n-        label=name,\n-        role_name=name,\n-        system_config=linux_config,\n-        network_config=network,\n-        os_virtual_hard_disk=os_hd,\n-        role_size='Large')\n-    \n-    request_id = result.request_id\n-    print request_id\n-    print result\n-    \n-    _wait_for_async(sms,result.request_id)\n-    _wait_for_deployment(sms,service_name, deployment_name)\n-    _wait_for_role(service_name, deployment_name, role_name)\n-        \n-    cpus = int(request['cpus']) - 1\n-    i=0\n-    while i<cpus:\n-        tm = timestamp()\n-        rolename = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-        result = sms.add_role(service_name=name, deployment_name=name, role_name=rolename,\n-                              system_config = linux_config, os_virtual_hard_disk=os_hd, network_config= network)\n-        request_id = result.request_id\n-        print request_id\n-        print result\n-    \n-    print vars(linux_config.ssh.public_keys)\n-    print vars(linux_config.ssh.key_pairs)\n-    \n-    time.sleep (60)\n-    status = sms.get_operation_status(request_id)\n-    try:\n-        print vars(status.error)\n-    except:\n-        print vars(status)\n-    \n-    service_name = name\n-    deployment_name = name\n-    props = sms.get_deployment_by_name(service_name, deployment_name)\n-    vars(props)\n-    \n-    result = sms.list_locations()\n-    for location in result:\n-        print(location.name)\n-    \n-\n-    deployment = sms.get_deployment_by_slot(name, 'production')\n-\n-    for instance in deployment.role_instance_list:\n-        while instance.instance_status != \"ReadyRole\":\n-            continue\n-        print('Instance name: ' + instance.instance_name)\n-        print('Instance status: ' + instance.instance_status)\n-        print('Instance size: ' + instance.instance_size)\n-        print('Instance role name: ' + instance.role_name)\n-        print('Instance ip address: ' + instance.ip_address)\n-        print('')\n-    \n-        \n-    node = {\n-            'nodeid':None,\n-            'private_ip':None,\n-            'public_ip': None}\n-    \n-    return node\n-    \n-    "
    },
    {
      "sha": "1b13d5f57c3b80787fe6ff211ad358f27d57a64b",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/621d3c67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 210,
      "changes": 210,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/621d3c67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/621d3c67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/621d3c67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,210 +0,0 @@\n-import os\n-import sys\n-import json\n-\n-html_head = \"\"\"\n-<html xmlns=\"http://www.w3.org/1999/xhtml\">\n-<head>\n-  <meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\" />\n-  <title>Compare stats</title>\n-  <script type=\"text/javascript\" src=\"http://www.google.com/jsapi\">\n-  </script>\"\"\"\n-script_template = \"\"\"<script type=\"text/javascript\">\n-    google.load('visualization', '1', {packages: ['table']});\n-    function %s() {\n-      // Create and populate the data table.\n-      var data = new google.visualization.DataTable();\n-      %s\n-\n-      // Create and draw the visualization.\n-      var table = new google.visualization.Table(document.getElementById('%s'));\n-\n-      var formatter = new google.visualization.TableArrowFormat();\n-      %s\n-      table.draw(data, {allowHtml: true, showRowNumber: true});\n-    }\n-\n-    google.setOnLoadCallback(%s);\n-  </script>\"\"\"\n-table_template = \"\"\"\n-<div id=\"{0}\" style=\"width: {1}px; height: {2}px;\"></div>\n-\"\"\"\n-\n-\n-def compare_stats(file1, file2):\n-    print file1\n-    print file2\n-    json_dict = {}\n-    files = [file1, file2]\n-\n-    data = {}\n-    for f in files:\n-        json_data = open(f)\n-        try:\n-            data[f] = json.load(json_data)\n-        except ValueError, e:\n-            print \"can't compare: %s\" % (json_data)\n-            return\n-\n-\n-    temp_ns_server_json = {}\n-\n-    for data_file in data:\n-        temp_ns_server_json[data_file] = {}\n-        for block in data[data_file]:\n-            if block == \"ns_server\":\n-                for sublock in data[data_file][block]:\n-                    if sublock != '':\n-                        temp_ns_server_json[data_file][block + \"_\" + sublock] = {}\n-                        temp_ns_server_json[data_file][block + \"_\" + sublock] = data[data_file][block][sublock]\n-\n-\n-    for data_file in data:\n-        for bucket in temp_ns_server_json[data_file]:\n-            data[data_file][bucket] = temp_ns_server_json[data_file][bucket]\n-        del data[data_file][\"ns_server\"]\n-\n-    blocks = {}\n-    for block in data[files[0]]:\n-        blocks[block] = {}\n-        for sublock in data[files[0]][block]:\n-            if sublock != '':\n-                blocks[block][sublock] = {}\n-\n-    content = html_head\n-\n-    information = '<p style=\\\"color:red;font-size:18px;\\\">Differences of more than 10 percent</p>'\n-    for block in blocks:\n-        information += \"<p>\" + block\n-        json_dict[block] = {}\n-        table = \"data.addColumn('string', '%s');\" % (block)\n-        for sublock in blocks[block]:\n-            if sublock == '':\n-                 continue\n-            json_dict[block][sublock] = {}\n-            for i in xrange(len(files)):\n-                table += (\"data.addColumn('string', '%s:f%s');\" % (sublock, i + 1)).replace(\":8091\", \"\")\n-            table += \"data.addColumn('number', '%');\"\n-        column_counter = 0\n-        temp = \"\"\n-        for sublock in  blocks[block]:\n-            if sublock == '':\n-                continue\n-            for stat in  data[files[0]][block][sublock]:\n-                for sublock in  blocks[block]:\n-                    if sublock == '':\n-                        continue\n-                    json_dict[block][sublock][stat] = {}\n-                    if column_counter == 0:\n-                        temp += \"['%s', \" % stat\n-                    else:\n-                        temp += \", \"\n-                    isInt = True\n-                    for i in xrange(len(files)):\n-                        if stat not in data[files[i]][block][sublock].keys():\n-                            cell = \"NONE\"\n-                        else:\n-                            cell = str(data[files[i]][block][sublock][stat])\n-                        if i == 0:\n-                            json_dict[block][sublock][stat][\"new\"] = cell\n-                        else:\n-                            json_dict[block][sublock][stat][\"old\"] = cell\n-                        try:\n-                            x = float(cell)\n-                        except ValueError, e:\n-                            isInt = False;\n-                        temp += \"'%s',\" % cell\n-                        column_counter += 1\n-                    if isInt:\n-                        if data[files[0]][block][sublock][stat] != 0 and  data[files[1]][block][sublock][stat]:\n-                            percentage = int(100 * (data[files[0]][block][sublock][stat] - data[files[1]][block][sublock][stat]) / (data[files[0]][block][sublock][stat]))\n-                            temp += \"%s\" % percentage\n-                            json_dict[block][sublock][stat][\"diff\"] = [\"+\", \"-\"][percentage >= 0] + str(percentage) + \"%\"\n-                            if percentage > 10:\n-                                diff_str = \"%s:%s %s - %s=+%s%%\" % (sublock, stat, data[files[1]][block][sublock][stat], data[files[0]][block][sublock][stat], percentage)\n-                                information += \"<p style=\\\"font-family:arial;color:grey;font-size:12px;\\\">&nbsp;&nbsp;\" + diff_str + \"</p>\"\n-                                print diff_str\n-                        else:\n-                            temp += \"0\"\n-                    else:\n-                        temp += \"0\"\n-                    if column_counter == len(blocks[block]) * len(files):\n-                        table += \"\"\"\n-                    data.addRow(%s]);\"\"\" % (temp);\n-                        column_counter = 0\n-                        temp = \"\"\n-            break\n-        formater = \"\"\n-        columns_format = 0\n-        for columns_format in  xrange(len(blocks[block])):\n-\n-            formater += \"\"\"\n-            formatter.format(data, %s); // Apply formatter to column\"\"\" % ((columns_format + 1) * 3)\n-\n-        content += script_template % (block, table, block, formater, block)\n-\n-    content += \"\"\"\n-    </head>\n-    <body style=\"font-family: Arial;border: 0 none;\">\n-    \"\"\"\n-    content += \"<p>LEGEND</p>\"\n-    content += \"\"\"<ul>\n-    <li>f1: %s</li>\n-    <li>f2: %s</li>\n-    </ul>\"\"\" % (file1, file2)\n-    for block in blocks:\n-        if data[files[0]][block].keys()[0] == '':\n-            num_rows = len(data[files[0]][block][data[files[0]][block].keys()[1]].keys())\n-        else:\n-            num_rows = len(data[files[0]][block][data[files[0]][block].keys()[0]].keys())\n-        num_columns = len(data[files[0]][block].keys()) * 3 + 1\n-        content += \"<p style=\\\"background-color:green;\\\">%s</p>\" % (block)\n-        content += table_template.format(block, num_columns * 111, 22 * num_rows + 35)\n-    content += information\n-\n-\n-    content += \"\"\"</body>\n-    </html>\"\"\"\n-    dirs0 = os.path.dirname(files[0]).split(os.sep)\n-    dirs1 = os.path.dirname(files[1]).split(os.sep)\n-    fn, fe = os.path.splitext(files[0])\n-    file_name = dirs0[-1] + \"_\" + dirs0[-2] + \"_\" + dirs1[-2] + \"_\" + fn.split(os.sep)[-1]\n-    html_path = os.path.dirname(files[0]) + \"/\" + file_name + \".html\"\n-    json_path = os.path.dirname(files[0]) + \"/\" + file_name + \".json\"\n-    file1 = open(html_path, 'w')\n-    file1.write(content)\n-    file1.close()\n-    json.dump(json_dict, open(json_path, 'w'), indent=4, sort_keys=True)\n-    print \"\"\"\n-    the comparison has been saved in %s & %s\"\"\" % (html_path, json_path)\n-\n-def compare_by_folders(folder1, folder2):\n-    folders = os.walk(folder1).next()[1]\n-    for folder in folders:\n-            sub_folder = os.path.join(folder1, folder)\n-            files = [ f for f in os.listdir(sub_folder) if os.path.isfile(os.path.join(sub_folder, f))]\n-            for file in files:\n-                fileName, fileExtension = os.path.splitext(os.path.join(folder1, folder, file))\n-                if fileExtension != \".txt\":\n-                    print \"can't  compare files with %s format: %s\" % (fileExtension, os.path.join(folder1, folder))\n-                    continue\n-                try:\n-                    with open(os.path.join(folder2, folder, file)):\n-                        print \"Generate report for  %s & %s\" % (os.path.join(folder1, folder, file), os.path.join(folder2, folder, file))\n-                        compare_stats(os.path.join(folder1, folder, file), os.path.join(folder2, folder, file))\n-                except IOError:\n-                    print 'file was not found: %s. comparison of the file will be skipped' % (os.path.join(folder2, folder, file))\n-\n-\n-def main():\n-    files = []\n-    for arg in sys.argv[1:]:\n-        if not os.path.isdir(arg):\n-            print 'folder was not found: %s' % (arg)\n-            sys.exit()\n-    compare_by_folders(sys.argv[1], sys.argv[2])\n-\n-\n-\n-if __name__ == \"__main__\":\n-    main()"
    },
    {
      "sha": "393a0d396001026b9ed8eaea5353ccdd8eb63d05",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/704890b2e42000141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 114,
      "changes": 114,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/704890b2e42000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/704890b2e42000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/704890b2e42000141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,114 +0,0 @@\n-<table id =\"AWS\">\n-        <tbody>\t\n-               <tr>\n-                   <td>\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   </td>\n-                   <td>\n-                \t\t<h3>Enter the deployment name</h3>\n-                \t</td>\n-                \t<td>\n-                \t\t<input name=\"depname\" type = \"text\">\n-                \t</td>\n-                \t\t\n-                \t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t</td>\n-                \t \n-                \t<td>\n-                \t\t<h3>Number of servers</h3>\n-                \t</td>\n-                \t<td>\n-                \t\t<input name=\"cpus\" type = \"text\">\n-                \t</td>\n-                </tr>\n-         \n-               <tr>\n-                    <td>\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                    </td>\n-                    \n-                 \t<td>\n-\t\t\t<h3>Select a Cloud Provider</h3>\n-\t\t</td>\n-\t\n-\t\t<td>\n-\t\t\t<select name=\"provider\">\n-\t   \t\t\t\t<option>AWS </option>\n-\t\t\t</select>     \n-\t\t</td>\n-\t\n-\t    <td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t</td>\n-                \t\n-\t\t<td>\n-\t\t\t<h3>Select a region</h3>\n-\t\t</td>\n-\t\t\n-\t\t<td> \n-\t\t\t<select name=\"loc\">\n-\t   \t\t\t<option>East</option>\n-\t   \t\t\t<option>West</option>\n-\t   \t\t\t<option>SouthEast</option>\n-\t\t\t</select>\n-\t\t</td>\n-\t</tr>\n-\t\n-\t<tr>\n-\t    <td>\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-        </td>\n-\t\t<td>\n-\t\t\t<h3>Select a machine</h3>  \n-\t\t</td>\n-\t\t<td>\n-\t\t\t<select name=\"machine\">\n-\t    \t\t<option>m1.large</option>\n-\t    \t\t<option>m3.large</option>\n-\t    \t\t<option>m1.small</option>\n-\t\t\t</select>       \n-\t\t</td>\n-\t\t\n-\t\t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    \n-                \t</td>\n-                \t\n-\t\t<td>\n-\t\t\t<h3>Image</h3>\n-\t\t</td>\n-\t\t<td>\n-\t\t\t<select name=\"cbserver\">\n-\t    \t\t<option>Linux</option>\n-\t    \t\t<option>Windows</option>\n-\t\t\t</select>\n-\t\t</td>\n-\t</tr>\n-\t\n-\t<tr>\n-\t\n-\t    <td>\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-        </td>\n-\t\t<td>\n-\t\t     <h3>Select a machine</h3>\n-\t\t</td>\n-\t</tr>\n-  </tbody>\n-</table>    \n-\t\t\n\\ No newline at end of file"
    },
    {
      "sha": "7532900d0139b1c52bf0de797b5cf70957bb0c7e",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/70a2dd4ea11b00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 247,
      "changes": 247,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/70a2dd4ea11b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/70a2dd4ea11b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/70a2dd4ea11b00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,247 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-from time import sleep\n-\n-\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = password = ''\n-    if request.POST:\n-        '''\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            state = \"Your username and/or password were incorrect.\"\n-            return render_to_response(\"message.html\",{'state':state, 'username': username})\n-            '''\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        result = cb.get(\"user::piushs\").value\n-        \n-        \n-        \n-        if (result['password1'] == password) :\n-                request.session['username'] = username\n-                return render_to_response(\"deployments.html\",{'result':result})\n-        else :\n-                return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})            \n- \n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    return render_to_response('deployments.html', {'result' :result})\n-\n-@csrf_exempt\n-def couchdep(request) :\n-    return render_to_response('couchdbdep.html')\n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        \n-def aws_mkfile(nodesup):\n-\n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/Users/piush/Key/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = \"{0}\".format(node.public_ips)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        Config.set('servers', \"{0}\".format(count),a)\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    \n-\n-@csrf_exempt\n-def deploy(request):\n-    \n-    \n-    username = request.session['username']\n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    result = json.loads(result)\n-\n-    depname = request.POST.get('depname')\n-    cpus = request.POST.get('cpus')\n-    provider = request.POST.get('provider')\n-    loc = request.POST.get('loc')\n-    mc = request.POST.get('machine')\n-    cbs = request.POST.get('machine')    \n-    \n-    \n-    \n-    \n-    location = request.POST.get(\"loc\")\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"**********\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"cpus\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    \n-    bucket =[]\n-    vms = []\n-    \n-    for node in nodesup :\n-        vms.append({'ip' : node.public_ips})\n-        \n-    bucket.append ({ 'name' : \"default\", 'vm':vms });\n-    \n-    print \"hehhr\" \n-    print result\n-\n-    if result['deploy'] == None:\n-        print \"1\"\n-        result['deploy'] = [{'name':depname,'Provider':provider,'cpu': cpus,'cbi':cbs, 'loc':loc, 'mc':mc, 'bucket': bucket}]\n-    else :\n-        print \"2\"\n-        result['deploy'].append({'name':depname,'Provider':provider,'cpu': cpus,'cbi':cbs, 'loc':loc, 'mc':mc, 'bucket' : bucket})\n-    \n-    \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    aws_mkfile(nodesup)\n-   \n-    sleep (120) \n-    path = os.getcwd() \n-    print path\n-    os.chdir(path + \"/auth/testrunner\")\n-    os.system('pwd')\n-    \n-    os.system('python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-966-rel,amazon=true')\n-    os.chdir(path)\n-    \n-    \n-    return HttpResponse(\"Deployment Successful\")\n-\n-\n-def mngcluster(request):\n-    \n-    \n-    return render_to_response(\"managecluster.html\")\n\\ No newline at end of file"
    },
    {
      "sha": "0e0dc3adedcedaa4dbe1d200172d2404548b8259",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/80722667b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 50,
      "changes": 50,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/80722667b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/80722667b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/80722667b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,50 +0,0 @@\n-# XPERF test w/o views:\n-# 4K ops/sec per cluster\n-# 80% reads, 20% write (12% updates, 4% deletes, 4% inserts)\n-# 16 clients per cluster\n-# 10M dataset\n-# bidirectional\n-# 1 bucket\n-# stop after 2 hours\n-\n-performance.iperf.XPerfTests.test_mixed_bidir\n-\n-params:\n-\n-# general\n-batch=50\n-kind=json\n-mem_quota=24000\n-\n-# xdcr\n-xdcr_num_buckets=1\n-\n-# load phase\n-items=10000000\n-hot_init_items=1000000\n-wait_for_xdc_replication=1\n-\n-# access phase\n-ratio_sets=0.20\n-ratio_misses=0.0\n-ratio_creates=0.20\n-ratio_deletes=0.25\n-ratio_hot=0.1\n-ratio_hot_gets=0.99\n-ratio_hot_sets=0.99\n-ratio_expirations=0.03\n-mcsoda_max_ops_sec=250\n-max_creates=1000000000\n-total_clients=16\n-time=7200\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-load_wait_until_drained=1\n-loop_wait_until_drained=0\n-mcsoda_heartbeat=3\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0\n-cbm=1"
    },
    {
      "sha": "7fab95893e994a6d7203766d8036a940b67b0c88",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/90b864ce032700141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 161,
      "changes": 161,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/90b864ce032700141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/90b864ce032700141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/90b864ce032700141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,161 +0,0 @@\n-from azure import *\n-from azure.servicemanagement import *\n-import base64\n-import os\n-\n-import time\n-\n-def AzureHandler():\n-    subscription_id = '3d01005f-455d-4430-b930-8455310e1f65'\n-    certificate_path = '/Users/piush/mycert.pem'\n-    \n-    sms = ServiceManagementService(subscription_id, certificate_path)\n-    \n-    '''\n-    name = 'testaccount'\n-    label = 'testaccount'\n-    location = 'East US'\n-    desc = 'My storage account description.'\n-    \n-    result = sms.create_storage_account(name, desc, label, location=location)\n-    \n-    operation_result = sms.get_operation_status(result.request_id)\n-    print('Operation status: ' + operation_result.status)\n-    '''\n-    \n-    \n-    result = sms.list_storage_accounts()\n-    for account in result:\n-        print('Service name: ' + account.service_name)\n-        print('Affinity group: ' + account.storage_service_properties.affinity_group)\n-        print('Location: ' + account.storage_service_properties.location)\n-        print('')\n-    \n-    \n-    name = 'piush9'\n-    label = 'myhostedservice'\n-    desc = 'my hosted service'\n-    location = 'East US'\n-    \n-    # You can either set the location or an affinity_group\n-    sms.create_hosted_service(name, label, desc, location)\n-    \n-    result = sms.list_hosted_services()\n-    \n-    for hosted_service in result:\n-        print('Service name: ' + hosted_service.service_name)\n-        print('Management URL: ' + hosted_service.url)\n-        print('Affinity group: ' + hosted_service.hosted_service_properties.affinity_group)\n-        print('Location: ' + hosted_service.hosted_service_properties.location)\n-        print('')\n-    \n-    #image_name1 = '0b11de9248dd4d87b18621318e037d37__RightImage-CentOS-6.3-x64-v5.8.8.8'\n-    image_name1='5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-65-20140606'\n-    image_name = 'couchbase-251-Ubuntu12'\n-    \n-    \n-    result = sms.list_os_images()\n-    \n-    for image in result:\n-    \tprint('Name: ' + image.name)          \n-    \tprint('OS: ' + image.os)\n-    \tprint('Category: ' + image.category)\n-    \tprint('Description: ' + image.description)\n-    \tprint('Location: ' + image.location)\n-    \tprint('Affinity group: ' + image.affinity_group)\n-    \tprint('Media link: ' + image.media_link)\n-        print('Label: ' + image.label)\n-    \tprint('')\n-    \n-    media_link = 'https://portalvhdsmtcz83fp9vjrb.blob.core.windows.net/vhds/piush9-piush9-2014-08-16.vhd'\n-    \n-    \n-    location = 'East US'\n-    linux_user_id='azureuser'\n-    linux_config = LinuxConfigurationSet('piush9', 'azureuser',user_password=None,disable_ssh_password_authentication=True)\n-    \n-    \n-    azure_config = \"/Users/piush\" + '/.azure'\n-    cert_data_path = azure_config + \"/myCert.pfx\"\n-    with open(cert_data_path, \"rb\") as bfile:\n-        cert_data = base64.b64encode(bfile.read())\n-    \n-    cert_format = 'pfx'\n-    cert_password = ''\n-    cert_res = sms.add_service_certificate(service_name=name,\n-                                data=cert_data,\n-                                certificate_format=cert_format,\n-                                password=cert_password)\n-    \n-    vars(cert_res)\n-    time.sleep(60)\n-    \n-    \n-    azure_config = \"/Users/piush\" + '/.azure'\n-    thumbprint_path = azure_config + '/thumbprint'\n-    authorized_keys = \"/home/\" + linux_user_id + \"/.ssh/authorized_keys\" \n-    try:\n-        thumbprint=open(thumbprint_path, 'r').readline().split('\\n')[0]\n-    except:\n-        thumbprint=None\n-    \n-    thumbprint\n-    \n-    publickey = PublicKey(thumbprint, authorized_keys)\n-    linux_config.ssh.public_keys.public_keys.append(publickey)\n-    \n-    print vars(publickey)\n-    print vars(linux_config.ssh.public_keys.public_keys.list_type)\n-    \n-    \n-    \n-    print vars(linux_config.ssh.public_keys)\n-    print vars(linux_config.ssh.key_pairs)\n-    \n-    os_hd  = OSVirtualHardDisk(image_name1, media_link)\n-    \n-    print vars(os_hd)\n-    \n-    network = ConfigurationSet()\n-    network.configuration_set_type = 'NetworkConfiguration'\n-    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('ssh', 'tcp', '22', '22'))\n-    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('http', 'tcp', '8091', '8091'))\n-    \n-    \n-    \n-    name = 'piush9'\n-    result = sms.create_virtual_machine_deployment(service_name=name,\n-        deployment_name=name,\n-        deployment_slot='production',\n-        label=name,\n-        role_name=name,\n-        system_config=linux_config,\n-        network_config=network,\n-        os_virtual_hard_disk=os_hd,\n-        role_size='Large')\n-    \n-    request_id = result.request_id\n-    print request_id\n-    print result\n-    \n-    print vars(linux_config.ssh.public_keys)\n-    print vars(linux_config.ssh.key_pairs)\n-    \n-    time.sleep (60)\n-    status = sms.get_operation_status(request_id)\n-    try:\n-        print vars(status.error)\n-    except:\n-        print vars(status)\n-    \n-    service_name = name\n-    deployment_name = name\n-    props = sms.get_deployment_by_name(service_name, deployment_name)\n-    vars(props)\n-    \n-    result = sms.list_locations()\n-    for location in result:\n-        print(location.name)\n-    \n-    role = sms.get_role(service_name=name, deployment_name=name, role_name=name)\n-    print role"
    },
    {
      "sha": "807fd20624b132c1c878ee9871a310cf6f8a5600",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/90ce3267b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/90ce3267b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/90ce3267b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/90ce3267b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab"
    },
    {
      "sha": "eb2a9056d054e4987a8f3cf43724668cc083de45",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/a0258e7bdf1a00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 74,
      "changes": 74,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/a0258e7bdf1a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/a0258e7bdf1a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/a0258e7bdf1a00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,74 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n- \n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>CouchDB Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select id=\"deplist\" onchange=\"test();\">\n-                 \t\t\n-                  \t\t{% for car in obj %}\n-                     \t\t<option value=\"{{ car.tag }}\">{{car.tag}}</option>\n-                  \t\t{% endfor %} \n-\t\t\t    </select>\n-                </div>\n-            </fieldset>       \n-       \n-       \t\t<script name = \"text/javascript\">\n-          \n-      \t\t\t function getSelectedText(elementId) {\n-              \t\t\t  var elt = document.getElementById(elementId);\n-\n-               \t\t\t if (elt.selectedIndex == -1)\n-                    \t\treturn null;\n-\n-               \t\t\treturn elt.options[elt.selectedIndex].text;\n-       \t\t\t } \n-       \n-\t\t\t\t function test()\n-\t\t\t\t {\n-\t\t\t\t\t{% for car in obj %}\n-\t\t\t\t\t\n-\t\t           \t\t document.getElementById('demo').innerHTML = \"M\"\n-\t\t          \t\t\n-\t\t\t\t\n-\t\t\t\t\t{% endfor %}\n-\n-\t\t\t\t }\n-\t\t\t\t alert (\"Hello\")\n-\t\t    </script> \n-\n-\t\t\t<p id = \"demo\"> </p>    \n-\t\t        \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "dede90d36fbf4d70bb8987cfee4e45a76fff85f2",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/a0ea10e9c11900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 181,
      "changes": 181,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/a0ea10e9c11900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/a0ea10e9c11900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/a0ea10e9c11900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,181 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    username = password = ''\n-    if request.POST:\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            state = \"Your username and/or password were incorrect.\"\n-            return render_to_response(\"message.html\",{'state':state, 'username': username})\n-\n-    return render_to_response(\"auth.html\",{'state':state, 'username': username})\n-\n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    \n-    \n-    \n-    result = json.loads(result)\n-    print result['username']\n-\n-    if result['deploy'] == None:\n-        result['deploy'] = [{'name':'7','Provider':'3','cpu':'3','cbi':'3'}]\n-    else :\n-        result['deploy'].append({'name':'3','Provider':'3','cpu':'3','cbi':'3'})\n-    \n-    result['deploy'].append({'name':'4','Provider':'3','cpu':'3','cbi':'3'})              \n-                        \n-    \n-    #results['deploy'].add({'name':'1','Provider':'2','cpu':'3','cbi':'4'})\n-    cb.set(\"user::{0}\".format(uname), result)\n-\n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    \n-    print result\n-\n-    return render_to_response('deployments.html')\n-\n-@csrf_exempt\n-def couchdep(request) :    \n-    return render_to_response('couchdbdep.html')\n-\n-\n-@csrf_exempt\n-def deploy(request):\n-    \n-    '''\n-    location = request.POST.get(\"loc\")\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"cpus\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    \n-    for node in nodes :\n-        print node.id\n-      \n-    regionNodes = driver.list_nodes()\n-    node = [val for val in regionNodes if val.id == 'i-0bc32d21'][0] \n-    print node\n-      \n-    regionNodes = driver.list_nodes()\n-    node = [val for val in regionNodes if val.id == 'i-60c02e4a'][0] \n-    print node\n-    \n-    \n-\n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node\n-   '''    \n-    path = os.getcwd() \n-    print path\n-    os.chdir(path + \"/auth/testrunner\")\n-    \n-    subprocess.call([\"pwd\"])\n-    subprocess.call([\"cat scripts/install.py\"])\n-   # subprocess.call([\"scripts/install.py -i /tmp/ubuntu.ini -p product=cb,version=3.0.0-966-rel,amazon=true;\"])\n-\n-    \n-    \n-    return HttpResponse(\"Deployment Successful\")\n\\ No newline at end of file"
    },
    {
      "sha": "19d881bc023bbf1e4e9a1902e687260b4ca7086b",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/d3814467b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 139,
      "changes": 139,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/d3814467b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/d3814467b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1/d3814467b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,139 +0,0 @@\n-from testconstants import COUCHBASE_DATA_PATH, WIN_COUCHBASE_DATA_PATH\n-from transfer.transfer_base import TransferBaseTest\n-from membase.api.rest_client import RestConnection, Bucket\n-from remote.remote_util import RemoteMachineShellConnection\n-import time\n-\n-class RecoveryUseTransferTests(TransferBaseTest):\n-\n-    def setUp(self):\n-        self.times_teardown_called = 1\n-        super(RecoveryUseTransferTests, self).setUp()\n-\n-    def tearDown(self):\n-        if not self.input.param(\"skip_cleanup\", True):\n-            if self.times_teardown_called > 1 :\n-                if self.os == 'windows':\n-                    self.shell.delete_files(\"/cygdrive/c%s\" % (self.backup_location))\n-                else:\n-                    self.shell.delete_files(self.backup_location)\n-                self.shell.disconnect()\n-                del self.buckets\n-        if self.input.param(\"skip_cleanup\", True):\n-            if self.case_number > 1 or self.times_teardown_called > 1:\n-                if self.os == 'windows':\n-                    self.shell.delete_files(\"/cygdrive/c%s\" % (self.backup_location))\n-                else:\n-                    self.shell.delete_files(self.backup_location)\n-                self.shell.disconnect()\n-                del self.buckets\n-        self.times_teardown_called += 1\n-        super(RecoveryUseTransferTests, self).tearDown()\n-\n-    def recover_to_cbserver(self):\n-        \"\"\"Recover data with 2.0 couchstore files to a 2.0 online server\n-\n-        We load a number of items to one node first and then do some mutation on these items.\n-        Later we use cbtranfer to transfer the couchstore files we have on this\n-        node to a new node. We verify the data by comparison between the items in KVStore\n-        and items in the new node.\"\"\"\n-\n-        self.load_data()\n-\n-        kvs_before = {}\n-        bucket_names = []\n-        for bucket in self.buckets:\n-            kvs_before[bucket.name] = bucket.kvs[1]\n-            bucket_names.append(bucket.name)\n-\n-        del self.buckets\n-        self.buckets = []\n-        if self.default_bucket:\n-            self.cluster.create_default_bucket(self.server_recovery, self.bucket_size, self.num_replicas)\n-            self.buckets.append(Bucket(name=\"default\", authType=\"sasl\", saslPassword=\"\", num_replicas=self.num_replicas, bucket_size=self.bucket_size))\n-        self._create_sasl_buckets(self.server_recovery, self.sasl_buckets)\n-        self._create_standard_buckets(self.server_recovery, self.standard_buckets)\n-\n-        transfer_source = \"couchstore-files://%s\" % (COUCHBASE_DATA_PATH)\n-        if self.os == 'windows':\n-            output, error = self.shell.execute_command(\"taskkill /F /T /IM cbtransfer.exe\")\n-            self.shell.log_command_output(output, error)\n-            self.shell.delete_files(\"/cygdrive/c%s\" % self.win_data_location)\n-            self.shell.execute_command(\"mkdir /cygdrive/c%s\" % self.win_data_location)\n-            self.shell.execute_command(\"cp -rf %s /cygdrive/c/tmp/\" % (WIN_COUCHBASE_DATA_PATH))\n-            transfer_source = \"couchstore-files://C:%s\" % (self.win_data_location)\n-        for bucket in self.buckets:\n-            bucket.kvs[1] = kvs_before[bucket.name]\n-            transfer_destination = \"http://%s@%s:%s\" % (self.couchbase_login_info,\n-                                                        self.server_recovery.ip,\n-                                                        self.server_recovery.port)\n-            self.shell.execute_cbtransfer(transfer_source, transfer_destination, \"-b %s -B %s\" % (bucket.name, bucket.name))\n-        del kvs_before\n-\n-        time.sleep(self.expire_time + 1)\n-        shell_server_recovery = RemoteMachineShellConnection(self.server_recovery)\n-        for bucket in self.buckets:\n-            shell_server_recovery.execute_cbepctl(bucket, \"\", \"set flush_param\", \"exp_pager_stime\", 5)\n-        shell_server_recovery.disconnect()\n-        time.sleep(30)\n-\n-        self._wait_for_stats_all_buckets([self.server_recovery])\n-        self._verify_all_buckets(self.server_recovery, 1, self.wait_timeout * 50, self.max_verify, True, 1)\n-        self._verify_stats_all_buckets([self.server_recovery])\n-\n-    def recover_to_backupdir(self):\n-        \"\"\"Recover data with 2.0 couchstore files to a 2.0 backup diretory\n-\n-        We load a number of items to a node first and then do some mutataion on these items.\n-        Later we use cbtransfer to transfer the couchstore files we have on this node to\n-        a backup directory. We use cbrestore to restore these backup files to the same node\n-        for verification.\"\"\"\n-\n-        self.load_data()\n-\n-        kvs_before = {}\n-        bucket_names = []\n-\n-        if self.os == 'windows':\n-            output, error = self.shell.execute_command(\"taskkill /F /T /IM cbtransfer.exe\")\n-            self.shell.log_command_output(output, error)\n-            self.shell.delete_files(\"/cygdrive/c%s\" % self.backup_location)\n-            self.shell.create_directory(\"/cygdrive/c%s\" % self.backup_location)\n-        else:\n-            self.shell.delete_files(self.backup_location)\n-            self.shell.create_directory(self.backup_location)\n-\n-        transfer_source = \"couchstore-files://%s\" % (COUCHBASE_DATA_PATH)\n-        transfer_destination = self.backup_location\n-        if self.os == 'windows':\n-            self.shell.delete_files(\"/cygdrive/c%s\" % self.win_data_location)\n-            self.shell.execute_command(\"mkdir /cygdrive/c%s\" % self.win_data_location)\n-            self.shell.execute_command(\"cp -rf %s /cygdrive/c/tmp/\" % (WIN_COUCHBASE_DATA_PATH))\n-            transfer_source = \"couchstore-files://C:%s\" % (self.win_data_location)\n-            transfer_destination = \"C:%s\" % self.backup_location\n-\n-        for bucket in self.buckets:\n-            kvs_before[bucket.name] = bucket.kvs[1]\n-            bucket_names.append(bucket.name)\n-\n-        self.shell.execute_cbtransfer(transfer_source, transfer_destination)\n-\n-        self._all_buckets_delete(self.server_origin)\n-        if self.default_bucket:\n-            self.cluster.create_default_bucket(self.server_origin, self.bucket_size, self.num_replicas)\n-            self.buckets.append(Bucket(name=\"default\", authType=\"sasl\", saslPassword=\"\", num_replicas=self.num_replicas, bucket_size=self.bucket_size))\n-        self._create_sasl_buckets(self.server_origin, self.sasl_buckets)\n-        self._create_standard_buckets(self.server_origin, self.standard_buckets)\n-\n-        for bucket in self.buckets:\n-            bucket.kvs[1] = kvs_before[bucket.name]\n-        del kvs_before\n-        self.shell.restore_backupFile(self.couchbase_login_info, self.backup_location, bucket_names)\n-        time.sleep(self.expire_time + 1)\n-        for bucket in self.buckets:\n-            self.shell.execute_cbepctl(bucket, \"\", \"set flush_param\", \"exp_pager_stime\", 5)\n-        time.sleep(30)\n-\n-        self._wait_for_stats_all_buckets([self.server_origin])\n-        self._verify_all_buckets(self.server_origin, 1, self.wait_timeout * 50, self.max_verify, True, 1)\n-        self._verify_stats_all_buckets([self.server_origin])"
    },
    {
      "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/00154067b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/00154067b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/00154067b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/00154067b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab"
    },
    {
      "sha": "5a7d909f04abffe0ae16dd011524f4e4cdb19122",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/001fc1e8761600141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 63,
      "changes": 63,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/001fc1e8761600141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/001fc1e8761600141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/001fc1e8761600141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,63 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n-\n-        <form id=\"couchdbform\" class=\"content\" action=\"\" method=\"POST\"> \n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-\t\t\t\t\t<h2>Select a Cloud Provider</h2>\n-\t\t\t\t\t<br/>\n-\t\t\t\t\t<select>\n-\t\t\t\t\t   <option>AWS </option>\n-\t\t\t\t\t</select>     \n-\t\t\t\t\t\n-\t\t\t\t\t<br/>\n-\t\t\t\t\t<h2>Select a region</h2> \n-\t\t\t\t\t<select>\n-\t\t\t\t\t   <option>East</option>\n-\t\t\t\t\t   <option>West</option>\n-\t\t\t\t\t   <option>SouthEast</option>\n-\t\t\t\t\t</select>\n-\t\t\t\t\t\n-\t\t\t\t\t<br/>\n-\t\t\t\t\t<h2>Select a machine</h2>  \n-\t\t\t\t\t<select>\n-\t\t\t\t\t    <option>m1.large</option>\n-\t\t\t\t\t    <option>m3.large</option>\n-\t\t\t\t\t    <option>m1.small</option>\n-\t\t\t\t\t</select>       \n-\t\t\t\t\t\n-\t\t\t\t\t<br/>\n-\t\t\t\t\t<h3>Select a couchbase server</h3>\n-\t\t\t\t\t\n-\t\t\t\t\t<select>\n-\t\t\t\t\t    <option>m1.large</option>\n-\t\t\t\t\t    <option>m3.large</option>\n-\t\t\t\t\t    <option>m1.small</option>\n-\t\t\t\t\t</select>\n-                \n-            </fieldset>           \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "75067cd55a95e50ab0742928a85348c1163345d7",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/10104926631300141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/10104926631300141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/10104926631300141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/10104926631300141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab"
    },
    {
      "sha": "cb020acfdc39cb9095453f536cd8946783bfc880",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/20f6892ced1900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 56,
      "changes": 56,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/20f6892ced1900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/20f6892ced1900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/20f6892ced1900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,56 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n-\n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>CouchDB Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select id=\"deplist\">\n-               \n-                  var p = {{obj}}\n-                  for (var key in p)\n-                  {\n-                     option = document.createElement(\"option\");\n-                     option.value = p[key]\n-                     option.innerHTML = next_year;\n-                     select.appendChild(option);\n-                  }\n-                  <option> {{obj}} </option>\n-                  <option> dep2 </option>\n-                  <option> dep3 </option>\n-                  <option> dep4</option>\n-\t\t\t    </select>\n-                </div>\n-            </fieldset>           \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "d91dd9ca7f619cd34eadb419b8461b3fe82cafb6",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/30cfc596512600141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 436,
      "changes": 436,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/30cfc596512600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/30cfc596512600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/30cfc596512600141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,436 +0,0 @@\n-\n-# Create your views here.\n-\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-import time\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-\n-def _create_node_AWS(request):\n-    location = request['loc']\n-        \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-        \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}_\".format(request['depname']) + \"{0}\".format(tm)\n-        node = driver.create_node(name=nodename, image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;  \n-        \n-    return nodes\n-        \n-def _create_node_GCE(request):\n-    \n-    Driver = get_driver(Provider.GCE)\n-    print request['email']\n-    print request['loc']\n-    print request['projid']\n-    \n-    gce = Driver('{0}'.format(request['email']), \"./PRIV.pem\",\n-                datacenter='{0}'.format(request['loc']),\n-             project='{0}'.format(request['projid']))\n-    \n-    sizes = gce.list_sizes()\n-\n-    for size in sizes:\n-            print size\n-            \n-    images = gce.list_images()\n-\n-    for image in images:\n-        print image\n-        \n-    location = request['loc']\n-    \n-    fp = open(\"/tmp/id_rsa.pub\", 'r')\n-    key = fp.read()\n-    fp.close()\n-    \n-    metadata = {'sshKeys': 'user:%s' %key}\n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    \n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-        node = gce.create_node(name=nodename, image='centos-6', size=request['machine'], ex_metadata= metadata)\n-        nodes.append(node)\n-        a = a+1;  \n-    driver = gce\n-     \n-    return nodes\n-    \n-def create_instance(request):\n-    \n-    \n-    if request['provider'] == \"AWS\":\n-       nodes =  _create_node_AWS(request)\n-    elif request['provider'] == \"GCE\":\n-        nodes = _create_node_GCE(request)\n-        \n-   \n-    \n-    return nodes\n-    \n-def handleNewDeployment(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    bucket =[]\n-    vms = []\n-    \n-    if (request['provider'] == \"AWS\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns': convert_node_ip_string(node.__dict__['extra']['dns_name'])})\n-    elif (request['provider'] == \"GCE\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id})  \n-            \n-    bucket.append ({ 'bucketname' : request['bucketname'], 'bucketsize':request['bucket_size']});\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    print \"hehhr\" \n-    print result\n-    \n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    request['status'] = \"IHDE\"        \n-    \n-    if result['deploy'] == None:\n-        print \"1\"\n-        result['deploy'] = [{'request':request, \n-                             'bucket': bucket,\n-                             'vm':vms}]\n-    else :\n-        print \"2\"\n-        result['deploy'].append({'request':request, 'bucket' : bucket, 'vm':vms})\n-    \n-    \n-    print result       \n-    \n-    cb.set(\"DeploymentRequest\",request)\n-    cb.set(\"user::{0}\".format(request['username']), result)\n-    \n-    if (request['provider'] == \"AWS\"):\n-        aws_mkfile(nodesup,request['username'], request['keyfile'] )\n-    elif(request['provider'] == \"GCE\"):\n-        gce_mkfile(nodesup)\n-\n-\n-def handleNewInstances(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    resultSession = cb.get(\"SessionDetails\").value\n-    \n-    depIndex = resultSession['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    \n-    vms = result['deploy'][depIndex]['vm']\n-    \n-    newVM= []\n-    mainVm = vms[0]\n-    newVM.append(mainVm)\n-    cb.set(\"VMPrimary\",mainVm)\n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                    'dns':node.__dict__['extra']['dns_name']})\n-        newVM.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                    'dns':node.__dict__['extra']['dns_name']})\n-     \n-    \n-    result['deploy'][depIndex]['newvm'] = newVM   \n-    result['deploy'][depIndex]['vm'] = vms \n-    cpu = result['deploy'][depIndex]['request']['cpus'] \n-    result['deploy'][depIndex]['request']['cpus']  = int (cpu) +1 \n-    \n-    cb.set(\"user::{0}\".format(request['username']),result)\n-    \n-    print result\n-    \n-    request[\"status\"] = \"IHAD\"\n-    \n-    cb.set(\"DeploymentRequest\",request)\n-       \n-    aws_mkfile(nodesup,request['username'], request['keyfile'] )\n-    aws_mkfile_add(newVM,request['username'], request['keyfile'])\n-\n-\n-def delInstance(request,cb):\n-    \n-    location = request['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    \n-    machines = request['delmachines']\n-    \n-    listIns = []\n-    for mc in machines:\n-        listIns.append(mc['nodeid'])\n-        \n-    pvm = cb.get(\"VMPrimary\").value\n-    print list\n-\n-     \n-    sessRes = cb.get(\"SessionDetails\").value\n-    username = sessRes['username']\n-    depname = sessRes['deploymentname']\n-    depIndex = sessRes['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value  \n-    \n-    a = 0;\n-    listDns = []\n-    for mc in machines:\n-        listDns.append(mc['dns'])\n-    \n-    \n-    print listDns\n-    for res in result['deploy'][depIndex]['vm']:\n-        for l in listDns:\n-            if res['dns'] == l:\n-                index = result['deploy'][depIndex]['vm'].index(res)\n-                del result['deploy'][depIndex]['vm'][index]\n-    \n-    \n-    cb.set ('user::{0}'.format(username), result)\n-    cpu = result['deploy'][depIndex]['request']['cpus']\n-    result['deploy'][depIndex]['request']['cpus'] = int(cpu) - len(machines)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    \n-    for res in listDns:\n-        cmd='sudo ./couchbase-cli rebalance -c {0}  --server-remove={1}  -u Administrator -p password'.format(pvm,res)\n-        p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                              cwd = r'/root/opt/couchbase/bin', shell =True)\n-        p4.wait()\n-        \n-    for node in nodes :\n-        if (node.id in listIns):\n-            driver.destroy_node(node)\n-            \n-    request['status'] = \"IHDEL\"\n-    print result       \n-    cb.set(\"DeploymentRequest\", request)\n-    \n-    \n-    \n-def main():\n-    cb = Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-\n-    while True:\n-        try:\n-            request = cb.get(\"DeploymentRequest\").value\n-        except:\n-            continue\n-        \n-        if request['status'] == \"RDDE\":\n-            handleNewDeployment(request,cb)  \n-        elif request['status'] == \"RDAD\":    \n-            handleNewInstances(request,cb)  \n-        elif request['status'] == \"RDDEL\":\n-            delInstance(request,cb)       \n-            \n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('u', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-    \n-\n-def aws_mkfile_add(vm, user, key):\n-    '''\n-    filekey = open(\"/tmp/piushs.pem\".format(user), \"w\")\n-    filekey.write(key)\n-    filekey.close()\n-    '''\n-    cfgfile = open(\"/tmp/addIns.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/{0}.pem\".format(user))\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for v in vm:\n-        \n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(v['dns']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def gce_mkfile(nodesup):\n-    '''\n-    filekey = open(\"/tmp/{0}.pem\".format(user), \"w\")\n-    filekey.write(key)\n-    filekey.close()\n-    '''\n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','user')\n-    Config.set('global','ssh_key', \"/tmp/id_rsa\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        count = count +1\n-    \n-    Config.add_section('membase')  \n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-\n-def aws_mkfile(nodesup, user, key):\n-    '''\n-    filekey = open(\"/tmp/{0}.pem\".format(user), \"w\")\n-    filekey.write(key)\n-    filekey.close()\n-    '''\n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(node.__dict__['extra']['dns_name']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-if __name__ == \"__main__\":\n-    main()"
    },
    {
      "sha": "5d207602669172ff85cef2de6a1c14b697576e0a",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/4027d304cb1900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 183,
      "changes": 183,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/4027d304cb1900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/4027d304cb1900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/4027d304cb1900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,183 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    username = password = ''\n-    if request.POST:\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            state = \"Your username and/or password were incorrect.\"\n-            return render_to_response(\"message.html\",{'state':state, 'username': username})\n-\n-    return render_to_response(\"auth.html\",{'state':state, 'username': username})\n-\n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    \n-    \n-    \n-    result = json.loads(result)\n-    print result['username']\n-\n-    if result['deploy'] == None:\n-        result['deploy'] = [{'name':'7','Provider':'3','cpu':'3','cbi':'3'}]\n-    else :\n-        result['deploy'].append({'name':'3','Provider':'3','cpu':'3','cbi':'3'})\n-    \n-    result['deploy'].append({'name':'4','Provider':'3','cpu':'3','cbi':'3'})              \n-                        \n-    \n-    #results['deploy'].add({'name':'1','Provider':'2','cpu':'3','cbi':'4'})\n-    cb.set(\"user::{0}\".format(uname), result)\n-\n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    \n-    print result\n-\n-    return render_to_response('deployments.html')\n-\n-@csrf_exempt\n-def couchdep(request) :    \n-    return render_to_response('couchdbdep.html')\n-\n-\n-@csrf_exempt\n-def deploy(request):\n-    \n-    '''\n-    location = request.POST.get(\"loc\")\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"cpus\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    \n-    for node in nodes :\n-        print node.id\n-      \n-    regionNodes = driver.list_nodes()\n-    node = [val for val in regionNodes if val.id == 'i-0bc32d21'][0] \n-    print node\n-      \n-    regionNodes = driver.list_nodes()\n-    node = [val for val in regionNodes if val.id == 'i-60c02e4a'][0] \n-    print node\n-    \n-    \n-\n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node\n-   '''    \n-    path = os.getcwd() \n-    print path\n-   # os.chdir(path + \"/auth/testrunner\")\n-    '''\n-    subprocess.Popen(r'auth/testrunner/myinstall.py\", \"-i ubuntu.ini -p product=cb,version=3.0.0-966-rel,amazon=true', cwd = r'')\n-    subprocess.call(['cat scripts/install.py'], shell = True)\n-    subprocess.call([\"cat scripts/install.py > myinstall.py\"], shell =True)\n-    subprocess.call([\"myinstall.py\", \"-i ubuntu.ini -p product=cb,version=3.0.0-966-rel,amazon=true\"])\n-    '''\n-    subprocess.Popen([\"ls\", \"-lrt\"], cwd=\"auth/testrunner\")\n-    \n-    \n-    return HttpResponse(\"Deployment Successful\")\n\\ No newline at end of file"
    },
    {
      "sha": "1427ba05845be2fa160fb1b9a374c96a9a617de4",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/43e64c67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 19,
      "changes": 19,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/43e64c67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/43e64c67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/43e64c67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,19 +0,0 @@\n-[global]\n-username:root\n-password:couchbase\n-port:8091\n-data_path:/data\n-index_path:/data2\n-\n-[servers]\n-1:10.2.1.65\n-2:10.2.1.66\n-3:10.2.1.67\n-4:10.2.1.68\n-\n-[clients]\n-1:10.2.1.60\n-\n-[membase]\n-rest_username:Administrator\n-rest_password:password"
    },
    {
      "sha": "8ec3ff909fe00c84c9e583bee9227be1a61b4402",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/502f36103b1400141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 86,
      "changes": 86,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/502f36103b1400141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/502f36103b1400141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/502f36103b1400141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,86 +0,0 @@\n-\"\"\"\n-Django settings for CouchbaseCloud project.\n-\n-For more information on this file, see\n-https://docs.djangoproject.com/en/1.6/topics/settings/\n-\n-For the full list of settings and their values, see\n-https://docs.djangoproject.com/en/1.6/ref/settings/\n-\"\"\"\n-\n-# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\n-import os\n-BASE_DIR = os.path.dirname(os.path.dirname(__file__))\n-\n-\n-# Quick-start development settings - unsuitable for production\n-# See https://docs.djangoproject.com/en/1.6/howto/deployment/checklist/\n-\n-# SECURITY WARNING: keep the secret key used in production secret!\n-SECRET_KEY = '(lsop3%pb1!ddjfidb!j^9&7u9y3f9yy#x-xlxe4ve771=k$5y'\n-\n-# SECURITY WARNING: don't run with debug turned on in production!\n-DEBUG = True\n-\n-TEMPLATE_DEBUG = True\n-\n-ALLOWED_HOSTS = []\n-\n-\n-# Application definition\n-\n-INSTALLED_APPS = (\n-    'django.contrib.admin',\n-    'django.contrib.auth',\n-    'django.contrib.contenttypes',\n-    'django.contrib.sessions',\n-    'django.contrib.messages',\n-    'django.contrib.staticfiles',\n-)\n-\n-MIDDLEWARE_CLASSES = (\n-    'django.contrib.sessions.middleware.SessionMiddleware',\n-    'django.middleware.common.CommonMiddleware',\n-    'django.middleware.csrf.CsrfViewMiddleware',\n-    'django.contrib.auth.middleware.AuthenticationMiddleware',\n-    'django.contrib.messages.middleware.MessageMiddleware',\n-    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n-)\n-\n-ROOT_URLCONF = 'CouchbaseCloud.urls'\n-\n-WSGI_APPLICATION = 'CouchbaseCloud.wsgi.application'\n-\n-\n-# Database\n-# https://docs.djangoproject.com/en/1.6/ref/settings/#databases\n-\n-DATABASES = {\n-    'default': {\n-        'ENGINE': 'django.db.backends.sqlite3',\n-        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n-    }\n-}\n-\n-\n-TEMPLATE_DIRS = (\n-    '/Users/piush/Desktop/CouchbaseCloud/CouchbaseCloud/CouchbaseCloud/Templates'\n-)\n-# Internationalization\n-# https://docs.djangoproject.com/en/1.6/topics/i18n/\n-\n-LANGUAGE_CODE = 'en-us'\n-\n-TIME_ZONE = 'UTC'\n-\n-USE_I18N = True\n-\n-USE_L10N = True\n-\n-USE_TZ = True\n-\n-\n-# Static files (CSS, JavaScript, Images)\n-# https://docs.djangoproject.com/en/1.6/howto/static-files/\n-\n-STATIC_URL = '/static/'"
    },
    {
      "sha": "4e6bb1758e1e5430ad6cd2664b8edd7321aab546",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/50f256a7771600141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 66,
      "changes": 66,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/50f256a7771600141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/50f256a7771600141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/50f256a7771600141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,66 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n-\n-        <form id=\"couchdbform\" class=\"content\" action=\"\" method=\"POST\"> \n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-\t\t\t\t\t<h2>Select a Cloud Provider</h2>\n-\t\t\t\t\t<br/>\n-\t\t\t\t\t<select>\n-\t\t\t\t\t   <option>AWS </option>\n-\t\t\t\t\t</select>     \n-\t\t\t\t\t\n-\t\t\t\t\t<br/>\n-\t\t\t\t\t<h2>Select a region</h2> \n-\t\t\t\t\t<br/>\n-\t\t\t\t\t<select>\n-\t\t\t\t\t   <option>East</option>\n-\t\t\t\t\t   <option>West</option>\n-\t\t\t\t\t   <option>SouthEast</option>\n-\t\t\t\t\t</select>\n-\t\t\t\t\t\n-\t\t\t\t\t<br/>\n-\t\t\t\t\t<h2>Select a machine</h2>  \n-\t\t\t\t\t<br/>\n-\t\t\t\t\t<select>\n-\t\t\t\t\t    <option>m1.large</option>\n-\t\t\t\t\t    <option>m3.large</option>\n-\t\t\t\t\t    <option>m1.small</option>\n-\t\t\t\t\t</select>       \n-\t\t\t\t\t\n-\t\t\t\t\t<br/>\n-\t\t\t\t\t<h3>Select a couchbase server</h3>\n-\t\t\t\t\t<br/>\n-\t\t\t\t\t<select>\n-\t\t\t\t\t    <option>Couchbase Server 3.0</option>\n-\t\t\t\t\t    <option>Couchbase Server 3.0 + DR XDCR</option>\n-\t\t\t\t\t    <option>Couchbase server 3.0 + Full text search</option>\n-\t\t\t\t\t    <option>Couchbase Server 3.0 + Sync Gateway</option>\n-\t\t\t\t\t</select>\n-                \n-            </fieldset>           \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "eebad30d9eb42cf166b336c15fe3b88a77046890",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/51aa1e67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 45,
      "changes": 45,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/51aa1e67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/51aa1e67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/51aa1e67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,45 +0,0 @@\n-# mixed 3M load, 0.6M hot reload, 1.5M access creates\n-# rebalance 3-2 after creating 0.3M items\n-#\n-# consistent view off\n-# system memory: 12G per node\n-\n-performance.eperf.EPerfClient.test_eperf_rebalance\n-\n-params:\n-\n-# general\n-batch=50\n-kind=nonjson\n-mem_quota=12000\n-\n-# load phase\n-hot_init_items=600000\n-items=3000000\n-\n-# access phase\n-# Read:Insert:Update:Delete Ratio = 50:4:40:6.\n-ratio_sets=0.5\n-ratio_misses=0.05\n-ratio_creates=0.08\n-ratio_deletes=0.13\n-ratio_hot=0.05\n-ratio_hot_gets=0.099\n-ratio_hot_sets=0.099\n-ratio_expirations=0.03\n-max_creates=1800000\n-\n-# rebalance\n-reb_cons_view=0\n-rebalance_after=300000\n-num_nodes_after=1\n-reb_mode=2\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-mcsoda_max_ops_sec=1000\n-mcsoda_heartbeat=3\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "d0c7bf0698f0ea56fd0bb7f871874dc699214c73",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/6019f201b82100141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 47,
      "changes": 47,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/6019f201b82100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/6019f201b82100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/6019f201b82100141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,47 +0,0 @@\n-\n-\n-\n-import os\n-\n-import os.path\n-import subprocess\n-\n-from couchbase import Couchbase\n-\n-PATH = '/tmp/test.ini'\n-\n-cb = Couchbase.connect (bucket = \"default\", host = \"localhost\")\n-\n-while True:\n-    \n-    try:\n-        result = cb.get(\"DeploymentRequest\").value\n-    except:\n-        continue\n-    if result['status'] == \"DE\":\n-        \n-        \n-        \n-        substr = \"Can't establish SSH session\"\n-        op = \"Can't establish SSH session\"\n-        print op.find(substr)\n-        while  op.find(substr) != -1 :\n-             p2 = subprocess.Popen(r'sudo -s python scripts/install.py -i /tmp/test_processing.ini -p product=cb,version=3.0.0-966-rel,amazon=true',\n-                          cwd = r'/auth/testrunner', shell =True)\n-\n-             output, error = p2.communicate()\n-             op = \"{0}\".p2(output)\n-             print op\n-             p2.wait()\n-             \n-        result['status'] = 'IN'\n-        cb.set(\"DeploymentRequest\",result)\n-        \n-        \n-        \n-        cmd = ''\n-        p4 = subprocess.Popen(r'sudo python testrunner.py -i /tmp/test.ini -t clitest.couchbase_clitest.CouchbaseCliTest.testAddRemoveNodes -p nodes_add={0},nodes_rem=0,skip_cleanup=True'.format(request['cpus']),\n-                              cwd = r'/auth/testrunner', shell =True)\n-        p4.wait()\n-        \n-        \n\\ No newline at end of file"
    },
    {
      "sha": "62e6249d41af3c47f3170b3a3b895c599bdf5c13",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/605ecb2ff72700141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 663,
      "changes": 663,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/605ecb2ff72700141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/605ecb2ff72700141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/605ecb2ff72700141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,663 +0,0 @@\n-\n-# Create your views here.\n-\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-import time\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-from pprint import pprint\n-\n-import az\n-\n-\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-\n-def _create_node_AWS(request):\n-    location = request['loc']\n-        \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-        \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}_\".format(request['depname']) + \"{0}\".format(tm)\n-        node = driver.create_node(name=nodename, image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-        \n-    return nodesup\n-        \n-def _create_node_GCE(request):\n-    \n-    Driver = get_driver(Provider.GCE)\n-    print request['email']\n-    print request['loc']\n-    print request['projid']\n-    \n-    '''\n-    gce = Driver('{0}'.format(request['email']), \"./PRIV.pem\",\n-                datacenter='{0}'.format(request['loc']),\n-             project='{0}'.format(request['projid']))\n-    '''\n-    \n-    gce = Driver('265882800008-3blh6m3ocdfhkm6kl2ihhfsls0a44nd6@developer.gserviceaccount.com', './PRIV.pem',\n-             datacenter='us-central1-a',\n-             project='poised-resource-658')\n-    sizes = gce.list_sizes()\n-\n-    for size in sizes:\n-            print size\n-            \n-    images = gce.list_images()\n-\n-    for image in images:\n-        print image\n-        \n-    location = request['loc']\n-    \n-    fp = open(\"/tmp/id_rsa.pub\", 'r')\n-    key = fp.read()\n-    fp.close()\n-    \n-    metadata = {'sshKeys': 'user:%s' %key}\n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    \n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-        node = gce.create_node(name=nodename, image='centos-6', size=request['machine'], ex_metadata= metadata)\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = gce.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-     \n-    return nodesup\n-\n-def _create_node_RackSpace(request):\n-    \n-    cls = get_driver(Provider.RACKSPACE)\n-    \n-    driver = cls(request['rkusername'],request['apikey'])\n-    \n-    pprint(driver.list_sizes())\n-    pprint(driver.list_nodes())\n-\n-    images = driver.list_images()\n-    \n-    sizes = driver.list_sizes()\n-\n-    for image in images:\n-       if image.id == \"3a6e29eb-3e17-40ed-9f1e-c6c0fb8fcb76\":\n-           os_image = image\n-           break\n-       \n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    \n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-        node = driver.create_node(name=nodename, image=os_image, size=sizes[4], ex_keyname=request['keyname'])\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-       \n-    return nodesup\n-\n-def create_instance(request):\n-    \n-    \n-    if request['provider'] == \"AWS\":\n-       nodes =  _create_node_AWS(request)\n-    elif request['provider'] == \"GCE\":\n-        nodes = _create_node_GCE(request)\n-    elif request['provider'] == \"RackSpace\":\n-        nodes = _create_node_RackSpace(request)\n-    elif request['provider'] == \"Azure\":\n-        nodes = az.AzureHandler(request)\n-    \n-    return nodes\n-    \n-def handleNewDeployment(request,cb,depReq):\n-    \n-    nodesup = create_instance(request)\n-    \n-    bucket =[]\n-    vms = []\n-    \n-    if (request['provider'] == \"AWS\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns': convert_node_ip_string(node.__dict__['extra']['dns_name'])})\n-    elif (request['provider'] == \"GCE\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'pip': convert_node_ip_string(node.private_ips), 'dns':convert_node_ip_string(node.public_ips)})  \n-    elif (request['provider'] == \"RackSpace\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips[0]), 'nodeid':node.id,\n-                        'pip': convert_node_ip_string(node.private_ips), 'dns':convert_node_ip_string(node.public_ips[0])}) \n-            \n-    bucket.append ({ 'bucketname' : request['bucketname'], 'bucketsize':request['bucket_size']});\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    print \"hehhr\" \n-    print result\n-    \n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    request['status'] = \"IHDE\"        \n-    \n-    if result['deploy'] == None:\n-        print \"1\"\n-        result['deploy'] = [{'request':request, \n-                             'bucket': bucket,\n-                             'vm':vms}]\n-    else :\n-        print \"2\"\n-        result['deploy'].append({'request':request, 'bucket' : bucket, 'vm':vms})\n-    \n-    \n-    print result       \n-    \n-    cb.set(depReq,request)\n-    cb.set(\"user::{0}\".format(request['username']), result)\n-    \n-    if (request['provider'] == \"AWS\"):\n-        aws_mkfile(nodesup)\n-    elif(request['provider'] == \"GCE\"):\n-        gce_mkfile(nodesup)\n-        gce_mkfile_cluster(nodesup)\n-    elif(request['provider'] == \"RackSpace\"):\n-        rackspace_mkfile(nodesup)\n-\n-def handleNewInstances(request,cb,depReq):\n-    \n-    nodesup = create_instance(request)\n-    \n-    resultSession = cb.get(\"SessionDetails\").value\n-    \n-    depIndex = resultSession['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    \n-    vms = result['deploy'][depIndex]['vm']\n-    \n-    newVM= []\n-    mainVm = vms[0]\n-    newVM.append(mainVm)\n-    cb.set(\"VMPrimary\",mainVm)\n-    for node in nodesup :\n-        if request['provider'] == \"AWS\":\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':node.__dict__['extra']['dns_name']})\n-            newVM.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':node.__dict__['extra']['dns_name']})\n-        elif request['provider'] == \"GCE\":\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':convert_node_ip_string(node.public_ips), 'pip':convert_node_ip_string(node.private_ips)})\n-            newVM.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':convert_node_ip_string(node.public_ips), 'pip':convert_node_ip_string(node.private_ips)})\n-        elif request['provider'] == \"RackSpace\":\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips[0]), 'nodeid':node.id,\n-                        'dns':convert_node_ip_string(node.public_ips[0]), 'pip':convert_node_ip_string(node.private_ips)})\n-            newVM.append({'ip' : convert_node_ip_string(node.public_ips[0]), 'nodeid':node.id,\n-                        'dns':convert_node_ip_string(node.public_ips[0]), 'pip':convert_node_ip_string(node.private_ips)})\n-         \n-    \n-    result['deploy'][depIndex]['newvm'] = newVM   \n-    result['deploy'][depIndex]['vm'] = vms \n-    cpu = result['deploy'][depIndex]['request']['cpus'] \n-    result['deploy'][depIndex]['request']['cpus']  = int (cpu) +1 \n-    \n-    cb.set(\"user::{0}\".format(request['username']),result)\n-    \n-    print result\n-    \n-    request[\"status\"] = \"IHAD\"\n-    \n-    cb.set(\"DeploymentRequest\",request)\n-     \n-    if request['provider'] == \"AWS\":  \n-        aws_mkfile(nodesup)\n-    elif request['provider'] == \"GCE\":\n-        gce_mkfile(nodesup)\n-    else:\n-        rackspace_mkfile(nodesup)\n-    \n-\n-def del_aws_ins(request, listIns):\n-    \n-    location = request['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    for node in nodes :\n-        if (node.id in listIns):\n-            driver.destroy_node(node)\n-            \n-def del_inst(request, listIns):\n-    \n-    Driver = get_driver(Provider.GCE)\n-    print request['email']\n-    print request['loc']\n-    print request['projid']\n-    \n-    '''\n-    gce = Driver('{0}'.format(request['email']), \"./PRIV.pem\",\n-                datacenter='{0}'.format(request['loc']),\n-             project='{0}'.format(request['projid']))\n-    '''\n-    \n-    gce = Driver('265882800008-3blh6m3ocdfhkm6kl2ihhfsls0a44nd6@developer.gserviceaccount.com', './PRIV.pem',\n-             datacenter='us-central1-a',\n-             project='poised-resource-658')\n-    \n-    nodes = gce.list_nodes()\n-    \n-    for node in nodes :\n-        if (node.id in listIns):\n-            gce.destroy_node(node)\n-            \n-            \n-def del_inst_rackspace(request, listIns):\n-    \n-    cls = get_driver(Provider.RACKSPACE)\n-\n-\n-\n-    driver = cls(request['rkusername'],request['apikey'])\n-    \n-    nodes = driver.list_nodes()\n-    \n-    for node in nodes :\n-        if (node.id in listIns):\n-            driver.destroy_node(node)\n-    \n-\n-def delInstance(request,cb):\n-      \n-    machines = request['delmachines']\n-    \n-    listIns = []\n-    for mc in machines:\n-        listIns.append(mc['nodeid'])\n-        \n-    pvm = cb.get(\"VMPrimary\").value\n-    print list\n-\n-     \n-    sessRes = cb.get(\"SessionDetails\").value\n-    username = sessRes['username']\n-    depname = sessRes['deploymentname']\n-    depIndex = sessRes['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value  \n-    \n-    a = 0;\n-    listDns = []\n-    listPip = []\n-    \n-    if (request['provider'] == \"AWS\"):\n-        for mc in machines:\n-            listDns.append(mc['dns'])\n-    else:\n-        for mc in machines:\n-            listPip.append(mc['pip'])\n-        \n-    \n-    \n-    print listDns\n-    newVM = []\n-    \n-    for res in result['deploy'][depIndex]['vm']:\n-        if res['dns'] not in listDns:\n-                newVM.append(res)\n-    \n-    result['deploy'][depIndex]['vm'] = newVM\n-    \n-    cb.set ('user::{0}'.format(username), result)\n-    cpu = result['deploy'][depIndex]['request']['cpus']\n-    result['deploy'][depIndex]['request']['cpus'] = int(cpu) - len(machines)\n-    \n-   \n-    \n-    if request['provider'] == \"AWS\":\n-        \n-        for res in listDns:\n-            cmd='sudo ./couchbase-cli rebalance -c {0}  --server-remove={1}  -u Administrator -p password'.format(pvm,res)\n-            p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                                  cwd = r'/root/opt/couchbase/bin', shell =True)\n-            p4.wait()\n-        \n-        del_aws_ins(request, listIns)\n-    elif request['provider'] == \"GCE\":\n-        \n-        for res in listPip:\n-            cmd='sudo ./couchbase-cli rebalance -c {0}  --server-remove={1}  -u Administrator -p password'.format(pvm,res)\n-            p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                                  cwd = r'/root/opt/couchbase/bin', shell =True)\n-            p4.wait()\n-            \n-        del_inst(request,listIns)\n-    else:\n-        \n-        for res in listPip:\n-            cmd='sudo ./couchbase-cli rebalance -c {0}  --server-remove={1}  -u Administrator -p password'.format(pvm,res)\n-            p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                                  cwd = r'/root/opt/couchbase/bin', shell =True)\n-            p4.wait()\n-            \n-        del_inst_rackspace(request,listIns)\n-        \n-    request['status'] = \"IHDEL\"\n-    print result       \n-    cb.set(\"DeploymentRequest\", request)\n-    \n-    \n-    \n-def main(argv):\n-    \n-    depReq = argv[0]\n-    cb = Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-\n-    \n-    try:\n-        request = cb.get(depReq).value\n-    except:\n-        continue\n-    \n-    if request['status'] == \"RDDE\":\n-        handleNewDeployment(request,cb,depReq)  \n-    elif request['status'] == \"RDAD\":    \n-        handleNewInstances(request,cb,depReq)  \n-    elif request['status'] == \"RDDEL\":\n-        delInstance(request,cb,depReq)       \n-            \n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('u\\'', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-    \n-\n-def aws_mkfile_add(vm, user, key):\n-    '''\n-    filekey = open(\"/tmp/piushs.pem\".format(user), \"w\")\n-    filekey.write(key)\n-    filekey.close()\n-    '''\n-    cfgfile = open(\"/tmp/addIns.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/{0}.pem\".format(user))\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for v in vm:\n-        \n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(v['dns']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def gce_mkfile(nodesup):\n-   \n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','user')\n-    Config.set('global','ssh_key', \"/tmp/id_rsa\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        count = count +1\n-    \n-    Config.add_section('membase')  \n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def gce_mkfile_cluster(nodesup):\n-   \n-    cfgfile = open(\"/tmp/testCluster.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','user')\n-    Config.set('global','ssh_key', \"/tmp/id_rsa\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        if count == 1:\n-            a = convert_node_ip_string(node.public_ips)\n-            Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        else:\n-            a = convert_node_ip_string(node.private_ips)\n-            Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        count = count +1\n-    \n-    Config.add_section('membase')  \n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def aws_mkfile(nodesup):\n-    \n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(node.__dict__['extra']['dns_name']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    \n-    cfgfile = open(\"/tmp/testCluster.ini\",'w')\n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-\n-def rackspace_mkfile(nodesup):\n-    \n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','root')\n-    Config.set('global','ssh_key', \"/tmp/rackspacepk\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips[0])\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    \n-    cfgfile = open(\"/tmp/testCluster.ini\",'w')\n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-if __name__ == \"__main__\":\n-    main(sys.argv[1:])"
    },
    {
      "sha": "f381821681a39465a565a99aed7e9a2225233ccd",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/611d3c67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 40,
      "changes": 40,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/611d3c67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/611d3c67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/611d3c67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,40 +0,0 @@\n-#TODO: allow workers to pull this from cache\n-\n-RABBITMQ_IP = '172.23.105.99'\n-OBJECT_CACHE_IP = \"172.23.105.92\"\n-OBJECT_CACHE_PORT = \"11911\"\n-SERIESLY_IP = ''\n-COUCHBASE_IP = '172.23.105.49'\n-COUCHBASE_PORT = '8091'\n-COUCHBASE_USER = \"Administrator\"\n-COUCHBASE_PWD = \"password\"\n-SSH_USER = \"root\"\n-SSH_PASSWORD = \"password\"\n-WORKERS = ['127.0.0.1']\n-WORKER_CONFIGS = [\"all\"]\n-CB_CLUSTER_TAG = \"default\"\n-\n-CLUSTER_IPS = [\"172.23.105.58\",\"172.23.105.61\",\"172.23.105.60\",\"172.23.105.63\"]\n-\n-\n-# xdcr config\n-\"\"\"\n-\" pointer information to remote sites\n-\" remote1 = name for remote site\n-\" RABBITMQ_IP = broker managing remote site (can be same as local broker if using different vhosts)\n-\"               this should equal RABBITMQ_IP of remote site\n-\" CB_CLUSTER_TAG = represents vhost watched by workers remote site.\n-\"                  this should equal CB_CLUSTER_TAG of remote site\n-\" COUCHBASE_IP/PORT = IP/PORT of a couchbase node in remote site\n-\"\"\"\n-REMOTE_SITES = {}\n-\n-LOGDIR=\"logs\"  # relative to current dir\n-\n-\n-#Backup Config\n-ENABLE_BACKUPS = False\n-BACKUP_DIR = \"/tmp/backup\"\n-BACKUP_NODE_IP = \"127.0.0.1\"\n-BACKUP_NODE_SSH_USER = \"root\"\n-BACKUP_NODE_SSH_PWD = \"password\""
    },
    {
      "sha": "872dc09e883b7294217e9416f539b04de0120996",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/707a4a88731600141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 57,
      "changes": 57,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/707a4a88731600141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/707a4a88731600141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/707a4a88731600141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,57 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n-\n-        <form id=\"loginform\" class=\"content\" action=\"/login/\" method=\"POST\"> \n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div align = \"center\">\n-                    To manage your CouchDB databases, log in.<p></p>\n-                    If you don't have an account, you can\n-                    <a id=\"signuplink\" href=\"/signup/\">sign up</a> for free!\n-                </div>\n-                \n-                </br>\n-                <div class=\"tinyLineBreak\"></div>\n-                <div>\n-                    <label>Username</label>\n-\t\t        </div>\n-\n-                <div>\n-                    <input class=\"required\" type=\"text\" id=\"login-username\" name=\"username\" value=\"\">\n-                </div>\n-                </br>\n-                <div>\n-                    <label>Password</label>\n-                </div>\n-                <div>\n-                    <input class=\"required\" type=\"password\" id=\"login-password\" name=\"password\">\n-                </div>\n-                </br>\n-\n-                <button type=“button” onclick=\"submitlogin();\">Log in</button>\n-            </fieldset>           \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "a46fced33000294f8a58bd404931524d8e52214d",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/70e63945eb2600141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 108,
      "changes": 108,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/70e63945eb2600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/70e63945eb2600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/70e63945eb2600141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,108 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n- \n-        <form id=\"depform\" class=\"content\" action=\"/mngcluster/\" method=\"POST\"> \n-\n-            <script>\n-               var dep = []\n-               var list = []\n-            </script>\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>Couchbase Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select  id=\"deplist\" name=\"deplist\">\n-                 \t\t\n-                 \t\t<script>\n-                 \t\t\tvar count =0\n-                 \t\t</script>\n-                  \t\t{% for res in result.deploy %}\n-                     \t\t<option value=\"{{ res.request.depname }}\">{{res.request.depname}}</option>\n-                     \t\t\n-                     \t\t<script>\n-                     \t    \tvar map ={}\n-                     \t    \t\n-                     \t    \tmap[\"name\"] = \"{{ res.name }}\"\n-                     \t    \tmap['cpu'] = \"{{ res.cpu }}\"\n-                     \t    \tmap['cbi'] = \"{{ res.cbi }}\"\n-                     \t    \tmap['Provider'] = \"{{ res.Provider }}\"\n-                     \t    \tdep.push(map)\n-                     \t    \tlist.push(\"{{ res.name }}\")\n-                     \t    \t\n-                     \t    \tcount = count + 1\n-                     \t    </script>\n-                     \t    \t\n-                  \t\t{% endfor %} \n-                  \t\t\n-                  \t\t<script>\n-                  \t\t\t\n-                  \t\t</script>\n-\t\t\t    </select>\n-\t\t\t    \n-\t\t\t    <br> </br>\n-\t\t\t    \n-                <input type = \"submit\" value = \"Check Deployment\" >\n-                </div>\n-            </fieldset>       \n-       \n-       \t\t<script name = \"text/javascript\">\n-          \n-      \t\t\t function getSelectedText(elementId) {\n-              \t\t\t  var elt = document.getElementById(elementId);\n-\n-               \t\t\t if (elt.selectedIndex == -1)\n-                    \t\treturn null;\n-\n-               \t\t\treturn elt.options[elt.selectedIndex].text;\n-       \t\t\t } \n-       \n-\t\t\t\t function test()\n-\t\t\t\t {\n-\t\t\t\t\t     var temp = getSelectedText(\"deplist\")\n-\t\t\t\t\t     \n-\t\t\t\t\t     var str=\"\";\n-\t\t\t \t\t     \n-\t\t\t\t\t     for (var i=0; i<dep.length; i++)\n-\t\t\t\t\t     { \n-\t\t\t\t\t    \t    if (temp == dep[i]['name'])\n-\t\t\t\t\t    \t    {\n-\t\t\t\t\t    \t    \tstr = str + dep[i]['name'] + \",\" + dep[i]['Provider'] + \",\" + dep[i]['cbi'] + \",\" + dep[i]['cpu'] + \"\\n\"\n-\t\t\t\t\t    \t    \tdocument.getElementById('demo').innerHTML = str\n-\t\t\t\t\t    \t    }\n-\t\t\t\t\t     }\n-\t\t\t\t\t     \n-\t\t\t\t }\n-\t\t\t\t \n-\t\t    </script> \n-\n-\t\t\t<p id = \"demo\"> </p>    \n-\t\t        \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "6959c72baeb217f69116d5d7fba66ffc38925856",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/90c15cb9761300141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 27,
      "changes": 27,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/90c15cb9761300141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/90c15cb9761300141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/90c15cb9761300141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,27 +0,0 @@\n-<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\">\n-<head>\n-<title>Log in</title>\n-<meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" />\n-<style>\n-body{\n-\tfont-family:Arial,Helvetica,sans-serif;\n-\tfont-size: 12px;\n-}\n-</style>\n-</head>\n-<body>\n-\t{{ state }}\n-\t<form action=\"/login/\" method=\"post\">\n-\t\t{% if next %}\n-\t\t<input type=\"hidden\" name=\"next\" value=\"{{ next }}\" />\n-\t\t{% endif %}\n-\t\tusername:\n-\t\t<input type=\"text\" name=\"username\" value=\"{{ username}}\" /><br />\n-\t\tpassword:\n-\t\t<input type=\"password\" name=\"password\" value=\"\" /><br />\n-\n-\t\t<input type=\"submit\" value=\"Log In\" />\n-\t</form>\n-</body>\n-</html>\n\\ No newline at end of file"
    },
    {
      "sha": "a3bda2ab325412bade938b205902da69735f1bcf",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/a0d04d67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 16,
      "changes": 16,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/a0d04d67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/a0d04d67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/a0d04d67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,16 +0,0 @@\n-[{A68267DB-875D-43FA-B8AB-423039843F02}-DlgOrder]\r\n-Dlg0={A68267DB-875D-43FA-B8AB-423039843F02}-MessageBox-0\r\n-Count=4\r\n-Dlg1={A68267DB-875D-43FA-B8AB-423039843F02}-SdWelcome-0\r\n-Dlg2={A68267DB-875D-43FA-B8AB-423039843F02}-SdStartCopy2-0\r\n-Dlg3={A68267DB-875D-43FA-B8AB-423039843F02}-SdFinish-0\r\n-[{A68267DB-875D-43FA-B8AB-423039843F02}-MessageBox-0]\r\n-Result=6\r\n-[{A68267DB-875D-43FA-B8AB-423039843F02}-SdWelcome-0]\r\n-Result=1\r\n-[{A68267DB-875D-43FA-B8AB-423039843F02}-SdStartCopy2-0]\r\n-Result=1\r\n-[{A68267DB-875D-43FA-B8AB-423039843F02}-SdFinish-0]\r\n-Result=1\r\n-bOpt1=0\r\n-bOpt2=0\r"
    },
    {
      "sha": "08394756b59f1e86aa0d219aaf0e908a6a7c8b4d",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/b0510fba661a00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 65,
      "changes": 65,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/b0510fba661a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/b0510fba661a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/b0510fba661a00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,65 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n-\n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>CouchDB Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select id=\"deplist\">\n-                 \n-                  <option> {{obj}[0]} </option>\n-                  <option> {{obj}}[1]</option>\n-                  <option> {{obj}}[2] </option>\n-                  <option> {{obj}}[3]</option>\n-\t\t\t    </select>\n-                </div>\n-            </fieldset>   \n-            \n-            <p id=\"demo\"> </p>\n-           \n-            \n-<script type=\"text/javascript\">\n-\n-    $(document).ready(function(){\n-\n-\n-        document.write('Getting JSON response...');\n-      /*  $.getJSON(\"/couchdep/\",\n-            function(data) {\n-            alert(\"receiveng\"+data[\"0\"]);\n-            }); */\n-    });\n-\n-</script>\n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "c22a8d4e083a5bddf00f56f68dac9ab8717ce0af",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/e00d27e1ea1a00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 77,
      "changes": 77,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/e00d27e1ea1a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/e00d27e1ea1a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/e00d27e1ea1a00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,77 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n- \n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>CouchDB Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select id=\"deplist\" onchange=\"test();\">\n-                 \t\t\n-                  \t\t{% for car in obj %}\n-                     \t\t<option value=\"{{ car.tag }}\">{{car.tag}}</option>\n-                  \t\t{% endfor %} \n-\t\t\t    </select>\n-                </div>\n-            </fieldset>       \n-       \n-       \t\t<script name = \"text/javascript\">\n-          \n-      \t\t\t function getSelectedText(elementId) {\n-              \t\t\t  var elt = document.getElementById(elementId);\n-\n-               \t\t\t if (elt.selectedIndex == -1)\n-                    \t\treturn null;\n-\n-               \t\t\treturn elt.options[elt.selectedIndex].text;\n-       \t\t\t } \n-       \n-\t\t\t\t function test()\n-\t\t\t\t {\n-\t\t\t\t\t{% for car in obj %}\n-\t\t\t\t\t     var temp = getSelectedText(\"deplist\")\n-\t\t\t \t\t     \n-\t\t\t\t\t     \n-\t\t\t\t\t     {% ifequal \"'\"+temp+\"'\" car.tag|stringformat:\"s\" %}\n-\t\t           \t\t \tdocument.getElementById('demo').innerHTML = \"{{car.tag}}\"\n-\t\t          \t\t {% endifequal %}\n-\t\t\t\t\t\n-\t\t\t\t\t{% endfor %}\n-\n-\t\t\t\t }\n-\t\t\t\t \n-\t\t    </script> \n-\n-\t\t\t<p id = \"demo\"> </p>    \n-\t\t        \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "d1d113090487f91b365d3e217e4923c3446df5e7",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/e0bf2ba8d71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 181,
      "changes": 181,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/e0bf2ba8d71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/e0bf2ba8d71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/e0bf2ba8d71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,181 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    username = password = ''\n-    if request.POST:\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            state = \"Your username and/or password were incorrect.\"\n-            return render_to_response(\"message.html\",{'state':state, 'username': username})\n-\n-    return render_to_response(\"auth.html\",{'state':state, 'username': username})\n-\n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    \n-    \n-    \n-    result = json.loads(result)\n-    print result['username']\n-\n-    if result['deploy'] == None:\n-        result['deploy'] = [{'name':'7','Provider':'3','cpu':'3','cbi':'3'}]\n-    else :\n-        result['deploy'].append({'name':'3','Provider':'3','cpu':'3','cbi':'3'})\n-    \n-    result['deploy'].append({'name':'4','Provider':'3','cpu':'3','cbi':'3'})              \n-                        \n-    \n-    #results['deploy'].add({'name':'1','Provider':'2','cpu':'3','cbi':'4'})\n-    cb.set(\"user::{0}\".format(uname), result)\n-\n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    \n-    print result\n-\n-    return render_to_response('deployments.html')\n-\n-@csrf_exempt\n-def couchdep(request) :    \n-    return render_to_response('couchdbdep.html')\n-\n-\n-@csrf_exempt\n-def deploy(request):\n-    \n-    '''\n-    location = request.POST.get(\"loc\")\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"cpus\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node\n-    '''   \n-    \n-    '''\n-    path = os.getcwd() \n-    print path\n-    os.chdir(path + \"/auth/testrunner\")\n-    os.system('pwd')\n-    \n-    os.system('python scripts/install.py -i /tmp/ubuntu.ini -p product=cb,version=3.0.0-966-rel,amazon=true')\n-    os.chdir(path)\n-    '''\n-    \n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('[global]')\n-    Config.set('Person','HasEyes',True)\n-    Config.set('Person','Age', 50)\n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    \n-    \n-    return HttpResponse(\"Deployment Successful\")\n\\ No newline at end of file"
    },
    {
      "sha": "f0d749e8cc2175482ba9cddd8079d634d429acdc",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/f09bf8e0e91500141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 7,
      "changes": 7,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/f09bf8e0e91500141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/f09bf8e0e91500141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/10/f09bf8e0e91500141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,7 +0,0 @@\n-<p id = \"message\"> </p>\n-\n-<br/>\n-\n-<br/>\n-\n-<button type = \"button\"; id=\"back\" ; align=\"center\" />\n\\ No newline at end of file"
    },
    {
      "sha": "8f135543e938373af198e2d40196760c05556333",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/1016f3afe92000141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 161,
      "changes": 161,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/1016f3afe92000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/1016f3afe92000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/1016f3afe92000141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,161 +0,0 @@\n-<table id =\"AWS\">\n-        <tbody>\t\n-               <tr>\n-                   <td>\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   </td>\n-                   <td>\n-                \t\t<h3>Enter the deployment name</h3>\n-                   </td>\n-                   <td>\n-                \t    <input name=\"depname\" type = \"text\">\n-                   </td>\n-               \t\n-                   <td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   </td>\n-                   \n-                   <td>\n-\t\t     \t\t\t<h3>AWS Access Key</h3>\n-\t\t\t\t   </td>\n-\t\t\n-\t\t\t\t   <td>\n-\t\t     \t\t\t<input type=\"text id=\"ackey\"/>\n-\t\t\t\t   </td>\n-\t          </tr>\n-              \n-              <tr>  \t\n-                   <td>\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   </td> \n-                   <td>\n-                \t\t<h3>Number of servers</h3>\n-                   </td>\n-                   <td>\n-                \t\t<input name=\"cpus\" type = \"text\">\n-                   </td>\n-               \n-                   <td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   </td>\n-                   \n-                   <td>\n-                \t\t<h3>AWS Secret Key</h3>\n-                   </td>\n-                   <td>\n-                \t\t<input name=\"seckey\" type = \"seckey\">\n-                   </td>\n-              </tr>\n-              \n-              <tr>\n-                  <td>\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                  </td>\n-                  <td>\n-\t\t\t\t  \t  <h3>Select a Cloud Provider</h3>\n-\t\t\t\t  </td>\n-\t\n-\t\t\t\t  <td>\n-\t\t\t\t\t\t<select name=\"provider\">\n-\t   \t\t\t\t\t\t<option>AWS </option>\n-\t\t\t\t\t\t</select>     \n-\t\t\t\t  </td>\n-\t\t\t\n-\t    \t\t  <td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                  </td>\n-                \t\n-\t\t\t\t  <td>\n-\t\t\t\t\t\t<h3>Select a region</h3>\n-\t\t\t\t  </td>\n-\t\t\t\t\n-\t\t\t\t\t<td> \n-\t\t\t\t\t\t<select name=\"loc\">\n-\t   \t\t\t\t\t\t<option>East</option>\n-\t   \t\t\t\t\t\t<option>West</option>\n-\t   \t\t\t\t\t\t<option>SouthEast</option>\n-\t\t\t\t\t\t</select>\n-\t\t\t\t\t</td>\n-\t\t\t\t</tr>\n-\t\t\n-\t\t        <tr>\n-\t    \t\t\t<td>\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-        \t\t\t</td>\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t<h3>Select a machine</h3>  \n-\t\t\t\t\t</td>\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t<select name=\"machine\">\n-\t    \t\t\t\t\t\t<option>m1.large</option>\n-\t    \t\t\t\t\t\t<option>m3.large</option>\n-\t    \t\t\t\t\t\t<option>m1.small</option>\n-\t\t\t\t\t\t</select>       \n-\t\t\t\t\t</td>\n-\t\t\t  \n-\t\t\n-\t\t\t\t\t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    \n-                \t</td>\n-                </tr>\n-                \n-                <tr>\n-                \t\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t\t<h3>Image</h3>\n-\t\t\t\t\t</td>\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t\t<select name=\"cbserver\">\n-\t    \t\t\t\t\t  \t<option>Linux</option>\n-\t    \t\t\t\t\t\t<option>Windows</option>\n-\t    \t\t\t\t\t</select>\n-\t    \t\t\t</td>\n-\t    \t\n-\t\t\t\t\t <td>\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-        \t\t\t</td>\n-        \t\t</tr>\n-\t\t</tr>\n-\t\n-\t<tr>\n-\t\n-\t    <td>\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-        </td>\n-\t\t<td>\n-\t\t     <h3>AWS Secret Key</h3>\n-\t\t</td>\n-\t\t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    \n-        </td>\n-\t\t<td>\n-\t\t     <input type=\"text id=\"s\"/>\n-\t\t</td>\n-\t</tr>\n-  </tbody>\n-</table>    \n-\t\t\n\\ No newline at end of file"
    },
    {
      "sha": "34b31b9da58be2b09e39cd437123e72c1720ea84",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/101b55dc7d2600141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 503,
      "changes": 503,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/101b55dc7d2600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/101b55dc7d2600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/101b55dc7d2600141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,503 +0,0 @@\n-\n-# Create your views here.\n-\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-import time\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-\n-def _create_node_AWS(request):\n-    location = request['loc']\n-        \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-        \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}_\".format(request['depname']) + \"{0}\".format(tm)\n-        node = driver.create_node(name=nodename, image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-        \n-    return nodesup\n-        \n-def _create_node_GCE(request):\n-    \n-    Driver = get_driver(Provider.GCE)\n-    print request['email']\n-    print request['loc']\n-    print request['projid']\n-    \n-    gce = Driver('{0}'.format(request['email']), \"./PRIV.pem\",\n-                datacenter='{0}'.format(request['loc']),\n-             project='{0}'.format(request['projid']))\n-    \n-    sizes = gce.list_sizes()\n-\n-    for size in sizes:\n-            print size\n-            \n-    images = gce.list_images()\n-\n-    for image in images:\n-        print image\n-        \n-    location = request['loc']\n-    \n-    fp = open(\"/tmp/id_rsa.pub\", 'r')\n-    key = fp.read()\n-    fp.close()\n-    \n-    metadata = {'sshKeys': 'user:%s' %key}\n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    \n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-        node = gce.create_node(name=nodename, image='centos-6', size=request['machine'], ex_metadata= metadata)\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = gce.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-     \n-    return nodesup\n-    \n-def create_instance(request):\n-    \n-    \n-    if request['provider'] == \"AWS\":\n-       nodes =  _create_node_AWS(request)\n-    elif request['provider'] == \"GCE\":\n-        nodes = _create_node_GCE(request)\n-        \n-   \n-    \n-    return nodes\n-    \n-def handleNewDeployment(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    bucket =[]\n-    vms = []\n-    \n-    if (request['provider'] == \"AWS\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns': convert_node_ip_string(node.__dict__['extra']['dns_name'])})\n-    elif (request['provider'] == \"GCE\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'pip': convert_node_ip_string(node.private_ips), 'dns':convert_node_ip_string(node.public_ips)})  \n-            \n-    bucket.append ({ 'bucketname' : request['bucketname'], 'bucketsize':request['bucket_size']});\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    print \"hehhr\" \n-    print result\n-    \n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    request['status'] = \"IHDE\"        \n-    \n-    if result['deploy'] == None:\n-        print \"1\"\n-        result['deploy'] = [{'request':request, \n-                             'bucket': bucket,\n-                             'vm':vms}]\n-    else :\n-        print \"2\"\n-        result['deploy'].append({'request':request, 'bucket' : bucket, 'vm':vms})\n-    \n-    \n-    print result       \n-    \n-    cb.set(\"DeploymentRequest\",request)\n-    cb.set(\"user::{0}\".format(request['username']), result)\n-    \n-    if (request['provider'] == \"AWS\"):\n-        aws_mkfile(nodesup)\n-    elif(request['provider'] == \"GCE\"):\n-        gce_mkfile(nodesup)\n-        gce_mkfile_cluster(nodesup)\n-\n-\n-def handleNewInstances(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    resultSession = cb.get(\"SessionDetails\").value\n-    \n-    depIndex = resultSession['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    \n-    vms = result['deploy'][depIndex]['vm']\n-    \n-    newVM= []\n-    mainVm = vms[0]\n-    newVM.append(mainVm)\n-    cb.set(\"VMPrimary\",mainVm)\n-    for node in nodesup :\n-        if request['provider'] == \"AWS\":\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':node.__dict__['extra']['dns_name']})\n-            newVM.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':node.__dict__['extra']['dns_name']})\n-        else:\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':node.__dict__['extra']['dns_name'], 'pip':convert_node_ip_string(node.private_ips)})\n-            newVM.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':node.__dict__['extra']['dns_name'], 'pip':convert_node_ip_string(node.private_ips)})\n-         \n-    \n-    result['deploy'][depIndex]['newvm'] = newVM   \n-    result['deploy'][depIndex]['vm'] = vms \n-    cpu = result['deploy'][depIndex]['request']['cpus'] \n-    result['deploy'][depIndex]['request']['cpus']  = int (cpu) +1 \n-    \n-    cb.set(\"user::{0}\".format(request['username']),result)\n-    \n-    print result\n-    \n-    request[\"status\"] = \"IHAD\"\n-    \n-    cb.set(\"DeploymentRequest\",request)\n-     \n-    if request['provider'] == \"AWS\":  \n-        aws_mkfile(nodesup)\n-    else:\n-        gce_mkfile(nodesup)\n-    \n-\n-def del_aws_ins(request, listIns):\n-    \n-    location = request['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    for node in nodes :\n-        if (node.id in listIns):\n-            driver.destroy_node(node)\n-            \n-def del_inst(request, listDns):\n-\n-def delInstance(request,cb):\n-    \n-    \n-    \n-    machines = request['delmachines']\n-    \n-    listIns = []\n-    for mc in machines:\n-        listIns.append(mc['nodeid'])\n-        \n-    pvm = cb.get(\"VMPrimary\").value\n-    print list\n-\n-     \n-    sessRes = cb.get(\"SessionDetails\").value\n-    username = sessRes['username']\n-    depname = sessRes['deploymentname']\n-    depIndex = sessRes['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value  \n-    \n-    a = 0;\n-    listDns = []\n-    for mc in machines:\n-        listDns.append(mc['dns'])\n-    \n-    \n-    print listDns\n-    for res in result['deploy'][depIndex]['vm']:\n-        for l in listDns:\n-            if res['dns'] == l:\n-                index = result['deploy'][depIndex]['vm'].index(res)\n-                del result['deploy'][depIndex]['vm'][index]\n-    \n-    \n-    cb.set ('user::{0}'.format(username), result)\n-    cpu = result['deploy'][depIndex]['request']['cpus']\n-    result['deploy'][depIndex]['request']['cpus'] = int(cpu) - len(machines)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    \n-    for res in listDns:\n-        cmd='sudo ./couchbase-cli rebalance -c {0}  --server-remove={1}  -u Administrator -p password'.format(pvm,res)\n-        p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                              cwd = r'/root/opt/couchbase/bin', shell =True)\n-        p4.wait()\n-     \n-    if request['provider'] == \"AWS\":\n-        del_aws_ins(request, listDns)\n-    else:\n-        del_inst(request,listDns)\n-            \n-    request['status'] = \"IHDEL\"\n-    print result       \n-    cb.set(\"DeploymentRequest\", request)\n-    \n-    \n-    \n-def main():\n-    cb = Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-\n-    while True:\n-        try:\n-            request = cb.get(\"DeploymentRequest\").value\n-        except:\n-            continue\n-        \n-        if request['status'] == \"RDDE\":\n-            handleNewDeployment(request,cb)  \n-        elif request['status'] == \"RDAD\":    \n-            handleNewInstances(request,cb)  \n-        elif request['status'] == \"RDDEL\":\n-            delInstance(request,cb)       \n-            \n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('u\\'', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-    \n-\n-def aws_mkfile_add(vm, user, key):\n-    '''\n-    filekey = open(\"/tmp/piushs.pem\".format(user), \"w\")\n-    filekey.write(key)\n-    filekey.close()\n-    '''\n-    cfgfile = open(\"/tmp/addIns.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/{0}.pem\".format(user))\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for v in vm:\n-        \n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(v['dns']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def gce_mkfile(nodesup):\n-   \n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','user')\n-    Config.set('global','ssh_key', \"/tmp/id_rsa\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        count = count +1\n-    \n-    Config.add_section('membase')  \n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def gce_mkfile_cluster(nodesup):\n-   \n-    cfgfile = open(\"/tmp/testCluster.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','user')\n-    Config.set('global','ssh_key', \"/tmp/id_rsa\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        if count == 1:\n-            a = convert_node_ip_string(node.public_ips)\n-            Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        else:\n-            a = convert_node_ip_string(node.private_ips)\n-            Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        count = count +1\n-    \n-    Config.add_section('membase')  \n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def aws_mkfile(nodesup):\n-    \n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(node.__dict__['extra']['dns_name']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    \n-    cfgfile = open(\"/tmp/testCluster.ini\",'w')\n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-if __name__ == \"__main__\":\n-    main()"
    },
    {
      "sha": "bae18d9029cb6cf0c34ffd0c13d8ada663f35f3c",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/1063a00f332800141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 431,
      "changes": 431,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/1063a00f332800141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/1063a00f332800141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/1063a00f332800141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,431 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-from pprint import pprint\n-\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-@csrf_exempt  \n-def getRamSize(request):\n-    \n-    cb = Couchbase.connect(bucket=\"default\", host = \"localhost\")\n-    \n-    result = cb.get(\"Machine\").value\n-    try:\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-\n-    c = result[request.POST.get('provider')][request.POST.get('machine')]\n-    return HttpResponse(c)\n-    \n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb= Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-    diction = {\"AWS\":{'m3.large': '3584'}, \"GCE\":{\"n1-highmem-4\":'3584', \"n1-highmem-8\":'3584'},\n-               \"RackSpace\":{\"8GB Standard Instance\":'3584'}, \"Azure\" :{\"Large\" : '3584'}}\n-    cb.set (\"Machine\", diction )\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = password = ''\n-    if request.POST:\n-        \n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        try :\n-            result = cb.get(\"user::{0}\".format(username)).value\n-            print result\n-            \n-            try :\n-                store = result\n-                result = json.loads(result)  \n-            except:\n-                result = store\n-                  \n-            session = {}\n-        \n-            if (result['password1'] == password) :\n-                session['username'] = username\n-                sessionname = \"SessionDetails::{0}\".format(username)\n-                cb.set(sessionname,session)\n-                \n-                return render_to_response(\"deployments.html\",{'result':result})\n-            else :\n-                return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})  \n-        except:\n-               return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})        \n- \n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    session = {}\n-    \n-    sessionname = \"SessionDetails::{0}\".format(username)    \n-    session['username'] = uname\n-    cb.set(sessionname,session)\n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    return render_to_response('deployments.html', {'result' :result})\n-\n-@csrf_exempt\n-def handleProgress(request):\n-    \n-    cb = Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-    \n-    res = cb.get(\"SessionDetails:{0}\".format(request['user'])).value\n-    username = res['username']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    return render_to_response('deployments.html',{'result':result})\n-\n-@csrf_exempt\n-def couchdep(request) :\n-    \n-    postval = {'username':request['hiduname']}\n-    return render_to_response('couchdbdep.html', {'postval':postval})\n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-        \n-        \n-def save_dep_GCE(storeReq,request):\n-    \n-    testFile = request.FILES['permission']\n-    textf = testFile.read()\n-    \n-    fp = open('/tmp/PRIV.pem','w')    \n-    fp.write(textf)\n-    fp.close()\n-        \n-\n-@csrf_exempt\n-def save_deployment(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get(\"SessionDetails::{0}\".format(request['hiduname'])).value\n-    \n-    if (result != None):\n-        username = result['username']\n-    \n-    result['deploymentname'] = request.POST.get('depname')\n-    \n-    \n-    cb.set(\"SessionDetails::{0}\".format(username),result)\n-   \n-    provider = request.POST.get('provider')\n-    \n-    'Use the parameters in the request for creating instances'\n-    \n-    if provider == \"AWS\":\n-        storeReq = copy.deepcopy(request.POST)\n-        key = request.FILES['keyfile'] \n-        fp = open(\"/tmp/piushs.pem\", 'w')\n-        fp.write(key.read())\n-        fp.close()\n-        \n-    if provider == \"GCE\":\n-        storeReq = copy.deepcopy(request.POST)\n-        save_dep_GCE(storeReq, request)\n-        \n-    if provider == \"RackSpace\":\n-        storeReq = copy.deepcopy(request.POST)\n-        key = request.FILES['prkeyfile'] \n-        fp = open(\"/tmp/rackspacepk\", 'w')\n-        fp.write(key.read())\n-        fp.close()\n-        \n-    if provider == \"Azure\":\n-        storeReq = copy.deepcopy(request.POST)\n-        key = request.FILES['certificate'] \n-        fp = open(\"/tmp/azurekey\", 'w')\n-        fp.write(key.read())\n-        fp.close()\n-    \n-    storeReq['status'] = \"WA\"\n-    storeReq['username'] = username\n-    \n-    depDoc = \"DeploymentRequest::{0}::{1}\".format(username, timestamp())\n-    cb.set(\"{0}\".format(depDoc),storeReq)\n-    \n-    result['depDoc'] = depDoc\n-    cb.set(\"SessionDetails::{0}\".format(username),result)\n-    \n-    test = cb.get(\"DeploymentRequest::{0}::{1}\".format(username,timestamp())).value\n-    print \"<<<<\"\n-    print test\n-    print \">>>>>\"\n-    \n-    \n-    return render_to_response(\"couchbaseconfiguration.html\",{'provider':storeReq['provider'],\n-                                                             'machine':storeReq['machine'], 'cpus':storeReq['cpus'], \n-                                                             'username':username})\n-\n-@csrf_exempt\n-def mngcluster(request):\n-    \n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get (\"SessionDetails::{0}\".format (request['hiduname'])).value\n-\n-    result['deploymentname'] = request.POST.get('deplist')\n-    \n-    cb.set(\"SessionDetails::{0}\".format(request['hiduname']), result)\n-    \n-    username = result['username']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    dep = request.POST.get('deplist')\n-    \n-    print result\n-    \n-    \n-    temp ={}\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-   \n-    if result ['deploy'] != None :     \n-        for res in result['deploy'] :\n-            if res['request']['depname'] == dep:\n-                temp = res\n-                break\n-\n-    if bool(temp):\n-        return render_to_response(\"managecluster.html\", {'temp':temp, 'username': username})\n-    else:\n-        return render_to_response(\"deployments.html\", None)\n-\n-@csrf_exempt\n-def conf_couchbase(request):\n-\n-    print \"Coming Here\"\n-    return render_to_response(\"couchbaseconfiguration.html\",None)\n-    \n-@csrf_exempt\n-def install(request):\n-    \n-    cb = Couchbase.connect (bucket='default', host=\"localhost\")\n-    \n-    val = cb.get(\"SessionDetails::{0}\".format(request['hiduname'])).value\n-    \n-    store = cb.get(val['depDoc']).value\n-    \n-    store['bucketname'] = request.POST.get('bkname')\n-    store['operation'] = request.POST.get('operation')\n-    store['replica'] = request.POST.get ('numrep')\n-    store['password_sasl'] = request.POST.get('rdpasswd')\n-    store['bucket_size'] = request.POST.get('size')\n-    store['ramquota'] = request.POST.get('ramquota')\n-    \n-    \n-    store['status'] = 'RDDE'\n-    cb.set (depDoc, store)\n-    \n-    cpu = store['cpus']\n-    return render_to_response(\"progress.html\",{'cpu':cpu})\n-\n-@csrf_exempt\n-def mngviewDel(request):\n-\n-    \n-    bucket = request.POST.get(\"bucket\")\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    resultsess = cb.get(\"SessionDetails::{0}\".format(request['hiduname'])).value\n-    username = resultsess['username']\n-    dep = resultsess['deploymentname']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['request']['depname'] == dep:\n-            temp = res['request']\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    \n-\n-    machines = request.POST.getlist('ck')\n-\n-    \n-    vms = result['deploy'][deploymentIndex]['vm']    \n-     \n-    flag = 0\n-    primarydns = ''\n-    for vm in vms:\n-        for mc in machines:\n-            if vm['dns'] != mc:\n-                flag = 1\n-                primarydns = vm['dns']\n-                break\n-        if flag == 1:\n-            break\n-        \n-    machineInfo=[]\n-    for vm in vms:\n-        for mc in machines:\n-            if vm['dns'] == mc:\n-                machineInfo.append(vm)\n-                break\n-        \n-    delReq = result['deploy'][deploymentIndex]['request']\n-    delReq['deploymentIndex'] = deploymentIndex\n-    delReq['primaryDns'] = primaryDns\n-    delReq['status'] = \"RDDEL\"\n-    delReq['delmachines'] = machineInfo\n-    \n-    depReq = \"DeploymentRequest::{0}::{1}\".format(username, timestamp())\n-    cb.set(depReq, delReq)\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    ret = cb.get(depReq).value\n-    \n-    while ret['status'] != \"IHDEL\":\n-        ret = cb.get(depReq).value\n-        continue\n-    \n-    return render_to_response(\"deployments.html\", {'result':result})\n-    \n-    \n-@csrf_exempt\n-def mngviewAdd(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    resultsess = cb.get(\"SessionDetails::{0}\".format(request['hiduname'])).value\n-    username = resultsess['username']\n-    dep = resultsess['deploymentname']\n-    \n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-  \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['request']['depname'] == dep:\n-            temp = res['request']\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    \n-    \n-    temp['status'] = 'RDAD'\n-    temp['cpus'] = request.POST.get('number')\n-    temp['deploymentIndex'] = deploymentIndex\n-    cb.set(\"DeploymentRequest::{0}::{1}\".format(username, timestamp()),temp)\n-    \n-    cpu = request.POST.get('number')\n-    return render_to_response (\"progress.html\", {'cpu':cpu})\n-\n-\n-@csrf_exempt\n-def poll_state(request):\n-    \n-    pollcb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcb.get(\"DeploymentRequest\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    \n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-\n-@csrf_exempt\n-def poll_ins_state(request):\n-    \n-    pollcbconn=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcbconn.get(\"DeploymentRequest\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-"
    },
    {
      "sha": "a04ba26f1580254af69a3e2bfa4a7007090d5927",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/106cd73ab52600141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 631,
      "changes": 631,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/106cd73ab52600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/106cd73ab52600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/106cd73ab52600141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,631 +0,0 @@\n-\n-# Create your views here.\n-\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-import time\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-from pprint import pprint\n-\n-\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-\n-def _create_node_AWS(request):\n-    location = request['loc']\n-        \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-        \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}_\".format(request['depname']) + \"{0}\".format(tm)\n-        node = driver.create_node(name=nodename, image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-        \n-    return nodesup\n-        \n-def _create_node_GCE(request):\n-    \n-    Driver = get_driver(Provider.GCE)\n-    print request['email']\n-    print request['loc']\n-    print request['projid']\n-    \n-    '''\n-    gce = Driver('{0}'.format(request['email']), \"./PRIV.pem\",\n-                datacenter='{0}'.format(request['loc']),\n-             project='{0}'.format(request['projid']))\n-    '''\n-    \n-    gce = Driver('265882800008-3blh6m3ocdfhkm6kl2ihhfsls0a44nd6@developer.gserviceaccount.com', './PRIV.pem',\n-             datacenter='us-central1-a',\n-             project='poised-resource-658')\n-    sizes = gce.list_sizes()\n-\n-    for size in sizes:\n-            print size\n-            \n-    images = gce.list_images()\n-\n-    for image in images:\n-        print image\n-        \n-    location = request['loc']\n-    \n-    fp = open(\"/tmp/id_rsa.pub\", 'r')\n-    key = fp.read()\n-    fp.close()\n-    \n-    metadata = {'sshKeys': 'user:%s' %key}\n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    \n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-        node = gce.create_node(name=nodename, image='centos-6', size=request['machine'], ex_metadata= metadata)\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = gce.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-     \n-    return nodesup\n-\n-def _create_node_RackSpace(request):\n-    \n-    cls = get_driver(Provider.RACKSPACE)\n-    \n-    driver = cls(request['rkusername'],request['apikey'])\n-    \n-    pprint(driver.list_sizes())\n-    pprint(driver.list_nodes())\n-\n-    images = driver.list_images()\n-    \n-    sizes = driver.list_sizes()\n-\n-    for image in images:\n-       if image.id == \"3a6e29eb-3e17-40ed-9f1e-c6c0fb8fcb76\":\n-           os_image = image\n-           break\n-       \n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    \n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-        node = driver.create_node(name=nodename, image=os_image, size=sizes[4], ex_keyname=request['keyname'])\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-       \n-    return nodesup\n-\n-def create_instance(request):\n-    \n-    \n-    if request['provider'] == \"AWS\":\n-       nodes =  _create_node_AWS(request)\n-    elif request['provider'] == \"GCE\":\n-        nodes = _create_node_GCE(request)\n-    elif request['provider'] == \"RackSpace\":\n-        nodes = _create_node_RackSpace(request)\n-        \n-   \n-    \n-    return nodes\n-    \n-def handleNewDeployment(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    bucket =[]\n-    vms = []\n-    \n-    if (request['provider'] == \"AWS\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns': convert_node_ip_string(node.__dict__['extra']['dns_name'])})\n-    elif (request['provider'] == \"GCE\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'pip': convert_node_ip_string(node.private_ips), 'dns':convert_node_ip_string(node.public_ips)})  \n-    elif (request['provider'] == \"RackSpace\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips[0]), 'nodeid':node.id,\n-                        'pip': convert_node_ip_string(node.private_ips), 'dns':convert_node_ip_string(node.public_ips[0])}) \n-            \n-    bucket.append ({ 'bucketname' : request['bucketname'], 'bucketsize':request['bucket_size']});\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    print \"hehhr\" \n-    print result\n-    \n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    request['status'] = \"IHDE\"        \n-    \n-    if result['deploy'] == None:\n-        print \"1\"\n-        result['deploy'] = [{'request':request, \n-                             'bucket': bucket,\n-                             'vm':vms}]\n-    else :\n-        print \"2\"\n-        result['deploy'].append({'request':request, 'bucket' : bucket, 'vm':vms})\n-    \n-    \n-    print result       \n-    \n-    cb.set(\"DeploymentRequest\",request)\n-    cb.set(\"user::{0}\".format(request['username']), result)\n-    \n-    if (request['provider'] == \"AWS\"):\n-        aws_mkfile(nodesup)\n-    elif(request['provider'] == \"GCE\"):\n-        gce_mkfile(nodesup)\n-        gce_mkfile_cluster(nodesup)\n-    elif(request['provider'] == \"RackSpace\"):\n-        rackspace_mkfile(nodesup)\n-\n-def handleNewInstances(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    resultSession = cb.get(\"SessionDetails\").value\n-    \n-    depIndex = resultSession['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    \n-    vms = result['deploy'][depIndex]['vm']\n-    \n-    newVM= []\n-    mainVm = vms[0]\n-    newVM.append(mainVm)\n-    cb.set(\"VMPrimary\",mainVm)\n-    for node in nodesup :\n-        if request['provider'] == \"AWS\":\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':node.__dict__['extra']['dns_name']})\n-            newVM.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':node.__dict__['extra']['dns_name']})\n-        elif request['provider'] == \"GCE\":\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':convert_node_ip_string(node.public_ips), 'pip':convert_node_ip_string(node.private_ips)})\n-            newVM.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':convert_node_ip_string(node.public_ips), 'pip':convert_node_ip_string(node.private_ips)})\n-        elif request['provider'] == \"RackSpace\":\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips[0]), 'nodeid':node.id,\n-                        'dns':convert_node_ip_string(node.public_ips[0]), 'pip':convert_node_ip_string(node.private_ips)})\n-            newVM.append({'ip' : convert_node_ip_string(node.public_ips[0]), 'nodeid':node.id,\n-                        'dns':convert_node_ip_string(node.public_ips[0]), 'pip':convert_node_ip_string(node.private_ips)})\n-         \n-    \n-    result['deploy'][depIndex]['newvm'] = newVM   \n-    result['deploy'][depIndex]['vm'] = vms \n-    cpu = result['deploy'][depIndex]['request']['cpus'] \n-    result['deploy'][depIndex]['request']['cpus']  = int (cpu) +1 \n-    \n-    cb.set(\"user::{0}\".format(request['username']),result)\n-    \n-    print result\n-    \n-    request[\"status\"] = \"IHAD\"\n-    \n-    cb.set(\"DeploymentRequest\",request)\n-     \n-    if request['provider'] == \"AWS\":  \n-        aws_mkfile(nodesup)\n-    elif request['provider'] == \"GCE\":\n-        gce_mkfile(nodesup)\n-    else:\n-        rackspace_mkfile(nodesup)\n-    \n-\n-def del_aws_ins(request, listIns):\n-    \n-    location = request['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    for node in nodes :\n-        if (node.id in listIns):\n-            driver.destroy_node(node)\n-            \n-def del_inst(request, listIns):\n-    \n-    Driver = get_driver(Provider.GCE)\n-    print request['email']\n-    print request['loc']\n-    print request['projid']\n-    \n-    '''\n-    gce = Driver('{0}'.format(request['email']), \"./PRIV.pem\",\n-                datacenter='{0}'.format(request['loc']),\n-             project='{0}'.format(request['projid']))\n-    '''\n-    \n-    gce = Driver('265882800008-3blh6m3ocdfhkm6kl2ihhfsls0a44nd6@developer.gserviceaccount.com', './PRIV.pem',\n-             datacenter='us-central1-a',\n-             project='poised-resource-658')\n-    \n-    nodes = gce.list_nodes()\n-    \n-    for node in nodes :\n-        if (node.id in listIns):\n-            gce.destroy_node(node)\n-    \n-\n-def delInstance(request,cb):\n-      \n-    machines = request['delmachines']\n-    \n-    listIns = []\n-    for mc in machines:\n-        listIns.append(mc['nodeid'])\n-        \n-    pvm = cb.get(\"VMPrimary\").value\n-    print list\n-\n-     \n-    sessRes = cb.get(\"SessionDetails\").value\n-    username = sessRes['username']\n-    depname = sessRes['deploymentname']\n-    depIndex = sessRes['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value  \n-    \n-    a = 0;\n-    listDns = []\n-    listPip = []\n-    for mc in machines:\n-        listDns.append(mc['dns'])\n-        listPip.append(mc['pip'])\n-        \n-    \n-    \n-    print listDns\n-    newVM = []\n-    \n-    for res in result['deploy'][depIndex]['vm']:\n-        if res['dns'] not in listDns:\n-                newVM.append(res)\n-    \n-    result['deploy'][depIndex]['vm'] = newVM\n-    \n-    cb.set ('user::{0}'.format(username), result)\n-    cpu = result['deploy'][depIndex]['request']['cpus']\n-    result['deploy'][depIndex]['request']['cpus'] = int(cpu) - len(machines)\n-    \n-   \n-    \n-    if request['provider'] == \"AWS\":\n-        \n-        for res in listDns:\n-            cmd='sudo ./couchbase-cli rebalance -c {0}  --server-remove={1}  -u Administrator -p password'.format(pvm,res)\n-            p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                                  cwd = r'/root/opt/couchbase/bin', shell =True)\n-            p4.wait()\n-        \n-        del_aws_ins(request, listIns)\n-    else:\n-        \n-        for res in listPip:\n-            cmd='sudo ./couchbase-cli rebalance -c {0}  --server-remove={1}  -u Administrator -p password'.format(pvm,res)\n-            p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                                  cwd = r'/root/opt/couchbase/bin', shell =True)\n-            p4.wait()\n-            \n-        del_inst(request,listIns)\n-        \n-    request['status'] = \"IHDEL\"\n-    print result       \n-    cb.set(\"DeploymentRequest\", request)\n-    \n-    \n-    \n-def main():\n-    cb = Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-\n-    while True:\n-        try:\n-            request = cb.get(\"DeploymentRequest\").value\n-        except:\n-            continue\n-        \n-        if request['status'] == \"RDDE\":\n-            handleNewDeployment(request,cb)  \n-        elif request['status'] == \"RDAD\":    \n-            handleNewInstances(request,cb)  \n-        elif request['status'] == \"RDDEL\":\n-            delInstance(request,cb)       \n-            \n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('u\\'', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-    \n-\n-def aws_mkfile_add(vm, user, key):\n-    '''\n-    filekey = open(\"/tmp/piushs.pem\".format(user), \"w\")\n-    filekey.write(key)\n-    filekey.close()\n-    '''\n-    cfgfile = open(\"/tmp/addIns.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/{0}.pem\".format(user))\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for v in vm:\n-        \n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(v['dns']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def gce_mkfile(nodesup):\n-   \n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','user')\n-    Config.set('global','ssh_key', \"/tmp/id_rsa\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        count = count +1\n-    \n-    Config.add_section('membase')  \n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def gce_mkfile_cluster(nodesup):\n-   \n-    cfgfile = open(\"/tmp/testCluster.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','user')\n-    Config.set('global','ssh_key', \"/tmp/id_rsa\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        if count == 1:\n-            a = convert_node_ip_string(node.public_ips)\n-            Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        else:\n-            a = convert_node_ip_string(node.private_ips)\n-            Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        count = count +1\n-    \n-    Config.add_section('membase')  \n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def aws_mkfile(nodesup):\n-    \n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(node.__dict__['extra']['dns_name']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    \n-    cfgfile = open(\"/tmp/testCluster.ini\",'w')\n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-\n-def rackspace_mkfile(nodesup):\n-    \n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','root')\n-    Config.set('global','ssh_key', \"/tmp/rackspacepk\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    \n-    cfgfile = open(\"/tmp/testCluster.ini\",'w')\n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-if __name__ == \"__main__\":\n-    main()"
    },
    {
      "sha": "e6f0d280ed91dd1f22051f2e921c9c2a2ddd4c2d",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/10c709a18f2100141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 433,
      "changes": 433,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/10c709a18f2100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/10c709a18f2100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/10c709a18f2100141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,433 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = password = ''\n-    if request.POST:\n-        \n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        try :\n-            result = cb.get(\"user::{0}\".format(username)).value\n-            print result\n-            \n-            try :\n-                store = result\n-                result = json.loads(result)  \n-            except:\n-                result = store\n-                  \n-            session = {}\n-        \n-            if (result['password1'] == password) :\n-                session['username'] = username\n-                cb.set(\"SessionDetails\",session)\n-                return render_to_response(\"deployments.html\",{'result':result})\n-            else :\n-                return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})  \n-        except:\n-               return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})        \n- \n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    session = {}\n-        \n-    session['username'] = uname\n-    cb.set(\"SessionDetails\",session)\n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    return render_to_response('deployments.html', {'result' :result})\n-\n-@csrf_exempt\n-def couchdep(request) :\n-    return render_to_response('couchdbdep.html')\n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-        \n-    \n-\n-@csrf_exempt\n-def save_deployment(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get(\"SessionDetails\").value\n-    \n-    if (result != None):\n-        username = result['username']\n-    \n-    result['deploymentname'] = request.POST.get('depname')\n-    \n-    cb.set(\"SessionDetails\",result)\n-   \n-    provider = request.POST.get('provider')\n-    \n-\n-    'Use the parameters in the request for creating instances'\n-    \n-    if provider == \"AWS\":\n-        storeReq = copy.deepcopy(request.POST)\n-    \n-    storeReq['status'] = \"WA\"\n-    storeReq['username'] = username\n-    \n-    cb.set(\"DeploymentRequest\",storeReq)\n-    return render_to_response(\"couchbaseconfiguration.html\")\n-\n-@csrf_exempt\n-def mngcluster(request):\n-    \n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get (\"SessionDetails\").value\n-    \n-    try:\n-        dep = result['deploymentname']\n-    except:\n-        dep = ''\n-    \n-    username = result['username']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-    \n-    \n-    temp ={}\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-   \n-    if result ['deploy'] != None :     \n-        for res in result['deploy'] :\n-            if res['request']['depname'] == dep:\n-                temp = res\n-                break\n-    \n-    if bool(temp):\n-        return render_to_response(\"managecluster.html\", {'result':result})\n-    else:\n-        return render_to_response(\"deployments.html\", None)\n-\n-@csrf_exempt\n-def conf_couchbase(request):\n-\n-    print \"Coming Here\"\n-    return render_to_response(\"couchbaseconfiguration.html\",None)\n-    \n-@csrf_exempt\n-def install(request):\n-    \n-    cb = Couchbase.connect (bucket='default', host=\"localhost\")\n-    \n-    store = cb.get(\"DeploymentRequest\").value\n-    \n-    store['bucketname'] = request.POST.get('bkname')\n-    \n-    opr = store['operation']\n-    if (opr == 1)\n-        store['operation']\n-    \n-    return render_to_response(\"progress.html\")\n-\n-@csrf_exempt\n-def mngviewDel(request):\n-\n-    \n-    bucket = request.POST.get(\"bucket\")\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get(\"SessionDetails\").value\n-    username = result['username']\n-    dep = result['deploymentname']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['name'] == dep:\n-            temp = res\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    tempbucket= {}\n-    bucketIndex = 0\n-    for res in temp['bucket'] :\n-        if res['name'] == bucket:\n-            tempbucket = res\n-            break\n-        bucketIndex = bucketIndex + 1\n-    \n-    \n-    location = temp['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"number\")\n-    a=0\n-    \n-    n = int(y);\n-    \n-    listId = list()\n-    for res in result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'] : \n-        if (a < n):\n-            listId.append(res['nodeid'])\n-            del result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'][a]\n-        else:\n-            break\n-        a= a+1\n-    \n-    print list\n-    \n-    for node in nodes :\n-        if (node.id in listId):\n-            driver.destroy_node(node)\n-                \n-    \n-    nodes = driver.list_nodes()\n-    \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    return HttpResponse(\"Operation Successful\")\n-    \n-    \n-@csrf_exempt\n-def mngviewAdd(request):\n-    \n-\n-  \n-    bucket = request.POST.get(\"bucket\")\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    resultsess = cb.get(\"SessionDetails\").value\n-    username = resultsess['username']\n-    dep = resultsess['deploymentname']\n-    \n-    bucket = request.POST.get(\"bucket\")\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['name'] == dep:\n-            temp = res\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    tempbucket= {}\n-    bucketIndex = 0\n-    for res in temp['bucket'] :\n-        if res['name'] == bucket:\n-            tempbucket = res\n-            break\n-        bucketIndex = bucketIndex + 1\n-    \n-    \n-    location = temp['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"number\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    tempbucket = json.dumps(tempbucket)\n-    tempbucket = json.loads(tempbucket)\n-    vms = tempbucket['vm']\n-    \n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id})\n-        \n-    result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'] = vms\n-    \n-        \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    \n-    \n-    obj = {'filename':'test.ini', 'status' : 'RD'}\n-    \n-\n-    cb.set(\"requesttable\",obj)\n-\n-   \n-    return render_to_response (\"progress.html\")\n-\n-\n-\n-@csrf_exempt\n-def poll_state(request):\n-    \n-    pollcb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcb.get(\"requesttable\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    \n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-\n-@csrf_exempt\n-def poll_ins_state(request):\n-    \n-    pollcbconn=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcbconn.get(\"DeploymentRequest\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-"
    },
    {
      "sha": "26ffd858a188b284be658f50a293ffa540beb0ef",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/13680f67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 45,
      "changes": 45,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/13680f67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/13680f67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/13680f67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,45 +0,0 @@\n-# mixed suv 20M load, 3M hot reload, 3M access creates\n-# speed limit = 1k per client\n-# num clients = 30\n-# value size = 160k\n-# DGM\n-#\n-performance.eperf.EPerfClient.test_eperf_mixed\n-\n-params:\n-\n-# general\n-batch=50\n-kind=nonjson\n-mem_quota=10000\n-avg_value_size=163840\n-\n-# cbm\n-cbm=0\n-\n-# load phase\n-hot_init_items=300000\n-items=600000\n-hot_load_get=1\n-load_mcsoda_max_ops_sec=500\n-\n-# access phase\n-# 80% read, 20% write, Insert/Update/Delete = 17:80:3\n-ratio_sets=0.2\n-ratio_misses=0.05\n-ratio_creates=0.17\n-ratio_deletes=0.036\n-ratio_hot=0.35\n-ratio_hot_gets=0.6\n-ratio_hot_sets=0.6\n-ratio_expirations=0.03\n-max_creates=60000\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-mcsoda_heartbeat=3\n-mcsoda_max_ops_sec=1000\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "7e054b6a6993b62d35dcd536089116ede1215b00",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/208f0f67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 45,
      "changes": 45,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/208f0f67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/208f0f67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/208f0f67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,45 +0,0 @@\n-# write 20M load, 6M hot reload, 20M access creates, no draining\n-#\n-# speed limit - 1k per cliennt, 30 clients\n-# DGM\n-\n-performance.eperf.EPerfClient.test_eperf_write\n-\n-params:\n-\n-# general\n-batch=50\n-kind=nonjson\n-mem_quota=10000\n-avg_value_size=2048\n-threads_number=6\n-\n-#cbm\n-cbm=0\n-\n-# load phase\n-hot_init_items=8000000\n-items=20000000\n-hot_load_get=1\n-load_mcsoda_max_ops_sec=500\n-\n-# access phase\n-# 30% read, 70% write, Insert/Update/Delete = 17:80:3\n-ratio_sets=0.7\n-ratio_misses=0.05\n-ratio_creates=0.17\n-ratio_deletes=0.036\n-ratio_hot=0.4\n-ratio_hot_gets=0.6\n-ratio_hot_sets=0.6\n-ratio_expirations=0\n-max_creates=10000000\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-mcsoda_heartbeat=3\n-mcsoda_max_ops_sec=1000\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "16d93a51bf25bdbfec522b68e17044c8bece2092",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/51041067b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 45,
      "changes": 45,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/51041067b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/51041067b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/51041067b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,45 +0,0 @@\n-# write 20M load, 6M hot reload, 20M access creates, no draining\n-#\n-# speed limit - 1k per cliennt, 30 clients\n-# DGM\n-\n-performance.eperf.EPerfClient.test_eperf_write\n-\n-params:\n-\n-# general\n-batch=50\n-kind=nonjson\n-mem_quota=10000\n-avg_value_size=1024\n-threads_number=8\n-\n-#cbm\n-cbm=0\n-\n-# load phase\n-hot_init_items=8000000\n-items=35000000\n-hot_load_get=1\n-load_mcsoda_max_ops_sec=500\n-\n-# access phase\n-# 30% read, 70% write, Insert/Update/Delete = 17:80:3\n-ratio_sets=0.7\n-ratio_misses=0.05\n-ratio_creates=0.17\n-ratio_deletes=0.036\n-ratio_hot=0.4\n-ratio_hot_gets=0.3\n-ratio_hot_sets=0.3\n-ratio_expirations=0\n-max_creates=10000000\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-mcsoda_heartbeat=3\n-mcsoda_max_ops_sec=1000\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "9b25b2de473e39a2a8014e4366ad23ec958433f4",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/52400667b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 51,
      "changes": 51,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/52400667b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/52400667b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/52400667b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,51 +0,0 @@\n-# XPERF test w/o views:\n-# 16K ops/sec per cluster\n-# 50% reads, 50% write (30% updates, 10% deletes, 10% inserts)\n-# 16 clients per cluster\n-# 100M dataset, 200 avg length\n-# unidirectional\n-# without fg load\n-\n-performance.iperf.XPerfTests.test_mixed_unidir\n-\n-params:\n-\n-# general\n-batch=50\n-kind=json\n-mem_quota=20000\n-avg_value_size=200\n-\n-# xdcr\n-xdcr_num_buckets=1\n-num_replicated_buckets=1\n-\n-# load phase\n-items=400000000\n-hot_init_items=4000000\n-wait_for_xdc_replication=1\n-load_mcsoda_max_ops_sec=4000\n-\n-# access phase\n-ratio_sets=0.5\n-ratio_misses=0.025\n-ratio_creates=0.20\n-ratio_deletes=0.25\n-ratio_hot=0.2\n-ratio_hot_gets=0.975\n-ratio_hot_sets=0.975\n-ratio_expirations=0.03\n-mcsoda_max_ops_sec=1000\n-max_creates=1\n-total_clients=16\n-time=10\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-load_wait_until_drained=1\n-loop_wait_until_drained=0\n-mcsoda_heartbeat=3\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "f553c02996886e8ef875b8b25b4d85ded55e4888",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/60e2de65eb1a00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 77,
      "changes": 77,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/60e2de65eb1a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/60e2de65eb1a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/60e2de65eb1a00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,77 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n- \n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>CouchDB Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select id=\"deplist\" onchange=\"test();\">\n-                 \t\t\n-                  \t\t{% for car in obj %}\n-                     \t\t<option value=\"{{ car.tag }}\">{{car.tag}}</option>\n-                  \t\t{% endfor %} \n-\t\t\t    </select>\n-                </div>\n-            </fieldset>       \n-       \n-       \t\t<script name = \"text/javascript\">\n-          \n-      \t\t\t function getSelectedText(elementId) {\n-              \t\t\t  var elt = document.getElementById(elementId);\n-\n-               \t\t\t if (elt.selectedIndex == -1)\n-                    \t\treturn null;\n-\n-               \t\t\treturn elt.options[elt.selectedIndex].text;\n-       \t\t\t } \n-       \n-\t\t\t\t function test()\n-\t\t\t\t {\n-\t\t\t\t\t{% for car in obj %}\n-\t\t\t\t\t     var temp = getSelectedText(\"deplist\")\n-\t\t\t \t\t     \n-\t\t\t\t\t     \n-\t\t\t\t\t     {% ifequal smart_str(temp).trip() car.tag|stringformat:\"s\" %}\n-\t\t           \t\t \tdocument.getElementById('demo').innerHTML = \"{{car.tag}}\"\n-\t\t          \t\t {% endifequal %}\n-\t\t\t\t\t\n-\t\t\t\t\t{% endfor %}\n-\n-\t\t\t\t }\n-\t\t\t\t \n-\t\t    </script> \n-\n-\t\t\t<p id = \"demo\"> </p>    \n-\t\t        \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "9cdaaa7ffca4994134177b63142cd362e9e70de5",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/61601c67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 43,
      "changes": 43,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/61601c67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/61601c67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/61601c67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,43 +0,0 @@\n-# read 12M load, 1M hot reload, 2M access creates, draining\n-# 30 clients\n-# speed limit = 15k\n-#\n-# system memory: 20G per node\n-\n-performance.eperf.EPerfClient.test_eperf_read\n-\n-params:\n-\n-# general\n-batch=50\n-kind=nonjson\n-mem_quota=20000\n-\n-# load phase\n-hot_init_items=2000000\n-alog_hot_load=1\n-items=20000000\n-\n-# cbstats collector\n-cb_stats=1\n-\n-# access phase\n-# Read:Insert:Update:Delete Ratio = 90:3:6:1.\n-ratio_sets=0.1\n-ratio_misses=0.05\n-ratio_creates=0.30\n-ratio_deletes=0.1428\n-ratio_hot=0.05\n-ratio_hot_gets=0.99\n-ratio_hot_sets=0.99\n-ratio_expirations=0.005\n-max_creates=8000000\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-mcsoda_heartbeat=3\n-mcsoda_max_ops_sec=500\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "03bfac337fa84f96b75dce06e09397e2018398d4",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/70a6f594982100141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 440,
      "changes": 440,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/70a6f594982100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/70a6f594982100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/70a6f594982100141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,440 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb= Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-    dict = {\"AWS\":[{'m3.large', '3584 MB'}]}\n-    cb.set (\"Machine\", dict )\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = password = ''\n-    if request.POST:\n-        \n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        try :\n-            result = cb.get(\"user::{0}\".format(username)).value\n-            print result\n-            \n-            try :\n-                store = result\n-                result = json.loads(result)  \n-            except:\n-                result = store\n-                  \n-            session = {}\n-        \n-            if (result['password1'] == password) :\n-                session['username'] = username\n-                cb.set(\"SessionDetails\",session)\n-                return render_to_response(\"deployments.html\",{'result':result})\n-            else :\n-                return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})  \n-        except:\n-               return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})        \n- \n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    session = {}\n-        \n-    session['username'] = uname\n-    cb.set(\"SessionDetails\",session)\n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    return render_to_response('deployments.html', {'result' :result})\n-\n-@csrf_exempt\n-def couchdep(request) :\n-    return render_to_response('couchdbdep.html')\n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-        \n-    \n-\n-@csrf_exempt\n-def save_deployment(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get(\"SessionDetails\").value\n-    \n-    if (result != None):\n-        username = result['username']\n-    \n-    result['deploymentname'] = request.POST.get('depname')\n-    \n-    cb.set(\"SessionDetails\",result)\n-   \n-    provider = request.POST.get('provider')\n-    \n-\n-    'Use the parameters in the request for creating instances'\n-    \n-    if provider == \"AWS\":\n-        storeReq = copy.deepcopy(request.POST)\n-    \n-    storeReq['status'] = \"WA\"\n-    storeReq['username'] = username\n-    \n-    cb.set(\"DeploymentRequest\",storeReq)\n-    return render_to_response(\"couchbaseconfiguration.html\")\n-\n-@csrf_exempt\n-def mngcluster(request):\n-    \n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get (\"SessionDetails\").value\n-    \n-    try:\n-        dep = result['deploymentname']\n-    except:\n-        dep = ''\n-    \n-    username = result['username']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-    \n-    \n-    temp ={}\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-   \n-    if result ['deploy'] != None :     \n-        for res in result['deploy'] :\n-            if res['request']['depname'] == dep:\n-                temp = res\n-                break\n-    \n-    if bool(temp):\n-        return render_to_response(\"managecluster.html\", {'result':result})\n-    else:\n-        return render_to_response(\"deployments.html\", None)\n-\n-@csrf_exempt\n-def conf_couchbase(request):\n-\n-    print \"Coming Here\"\n-    return render_to_response(\"couchbaseconfiguration.html\",None)\n-    \n-@csrf_exempt\n-def install(request):\n-    \n-    cb = Couchbase.connect (bucket='default', host=\"localhost\")\n-    \n-    store = cb.get(\"DeploymentRequest\").value\n-    \n-    store['bucketname'] = request.POST.get('bkname')\n-    store['operation'] = request.POST.get('operation')\n-    store['replica'] = request.POST.get ('numrep')\n-    store['password_sasl'] = request.POST.get('rdpasswd')\n-    store['bucket_size'] = request.POST.get('szie')\n-    \n-    \n-    cb.set (\"DeploymentRequest\", store)\n-    \n-    return render_to_response(\"progress.html\")\n-\n-@csrf_exempt\n-def mngviewDel(request):\n-\n-    \n-    bucket = request.POST.get(\"bucket\")\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get(\"SessionDetails\").value\n-    username = result['username']\n-    dep = result['deploymentname']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['name'] == dep:\n-            temp = res\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    tempbucket= {}\n-    bucketIndex = 0\n-    for res in temp['bucket'] :\n-        if res['name'] == bucket:\n-            tempbucket = res\n-            break\n-        bucketIndex = bucketIndex + 1\n-    \n-    \n-    location = temp['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"number\")\n-    a=0\n-    \n-    n = int(y);\n-    \n-    listId = list()\n-    for res in result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'] : \n-        if (a < n):\n-            listId.append(res['nodeid'])\n-            del result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'][a]\n-        else:\n-            break\n-        a= a+1\n-    \n-    print list\n-    \n-    for node in nodes :\n-        if (node.id in listId):\n-            driver.destroy_node(node)\n-                \n-    \n-    nodes = driver.list_nodes()\n-    \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    return HttpResponse(\"Operation Successful\")\n-    \n-    \n-@csrf_exempt\n-def mngviewAdd(request):\n-    \n-\n-  \n-    bucket = request.POST.get(\"bucket\")\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    resultsess = cb.get(\"SessionDetails\").value\n-    username = resultsess['username']\n-    dep = resultsess['deploymentname']\n-    \n-    bucket = request.POST.get(\"bucket\")\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['name'] == dep:\n-            temp = res\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    tempbucket= {}\n-    bucketIndex = 0\n-    for res in temp['bucket'] :\n-        if res['name'] == bucket:\n-            tempbucket = res\n-            break\n-        bucketIndex = bucketIndex + 1\n-    \n-    \n-    location = temp['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"number\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    tempbucket = json.dumps(tempbucket)\n-    tempbucket = json.loads(tempbucket)\n-    vms = tempbucket['vm']\n-    \n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id})\n-        \n-    result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'] = vms\n-    \n-        \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    \n-    \n-    obj = {'filename':'test.ini', 'status' : 'RD'}\n-    \n-\n-    cb.set(\"requesttable\",obj)\n-\n-   \n-    return render_to_response (\"progress.html\")\n-\n-\n-\n-@csrf_exempt\n-def poll_state(request):\n-    \n-    pollcb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcb.get(\"requesttable\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    \n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-\n-@csrf_exempt\n-def poll_ins_state(request):\n-    \n-    pollcbconn=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcbconn.get(\"DeploymentRequest\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-"
    },
    {
      "sha": "2b09f419e6cee994bd41daeab65d1c256c10a8d9",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/70cd06c30a2100141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 145,
      "changes": 145,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/70cd06c30a2100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/70cd06c30a2100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/70cd06c30a2100141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,145 +0,0 @@\n-<div>\n-<table id =\"AWS\">\n-        <tbody>\t\n-               <tr>\n-                   <td>\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   </td>\n-                   <td>\n-                \t\t<h3>Enter the deployment name</h3>\n-                   </td>\n-                   <td>\n-                \t    <input name=\"depname\" type = \"text\">\n-                   </td>\n-               \t\n-                   <td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   </td>\n-                   \n-                   <td>\n-\t\t     \t\t\t<h3>AWS Access Key</h3>\n-\t\t\t\t   </td>\n-\t\t\n-\t\t\t\t   <td>\n-\t\t     \t\t\t<input type=\"text\" name = \"ackey\" id=\"ackey\"/>\n-\t\t\t\t   </td>\n-\t          </tr>\n-              \n-              <tr>  \t\n-                   <td>\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   </td> \n-                   <td>\n-                \t\t<h3>Number of servers</h3>\n-                   </td>\n-                   <td>\n-                \t\t<input name=\"cpus\" type = \"text\">\n-                   </td>\n-               \n-                   <td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   </td>\n-                   \n-                   <td>\n-                \t\t<h3>AWS Secret Key</h3>\n-                   </td>\n-                   <td>\n-                \t\t<input name=\"seckey\" type = \"seckey\">\n-                   </td>\n-              </tr>\n-              \n-              <tr>\n-                  <td>\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                  </td>\n-                  <td>\n-\t\t\t\t\t\t<h3>Select a region</h3>\n-\t\t\t\t  </td>\n-\t\t\t\t\n-\t\t\t\t\t<td> \n-\t\t\t\t\t\t<select name=\"loc\">\n-\t   \t\t\t\t\t\t<option>East</option>\n-\t   \t\t\t\t\t\t<option>West</option>\n-\t   \t\t\t\t\t\t<option>SouthEast</option>\n-\t\t\t\t\t\t</select>\n-\t\t\t\t\t</td>\n-\t\t\t\t\t\t\n-\t    \t\t  \t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                  \t</td>\n-                  \n-                  \t<td>\n-\t\t\t\t\t\t<h3>Enter the keyname</h3>\n-\t\t\t\t\t</td>\n-\t\t\t\t\n-\t\t\t\t  \t<td> \n-\t\t\t\t\t\t<input type =\"text\" name=\"keyname\" id=\"keyname\"/>\n-\t\t\t\t  \t</td>\t\n-\t\t\t   </tr>\n-\t\t\n-\t\t        <tr>\n-\t    \t\t\t<td>\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-        \t\t\t</td>\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t<h3>Select a machine</h3>  \n-\t\t\t\t\t</td>\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t<select name=\"machine\">\n-\t    \t\t\t\t\t\t<option>m1.large</option>\n-\t    \t\t\t\t\t\t<option>m3.large</option>\n-\t    \t\t\t\t\t\t<option>m1.small</option>\n-\t\t\t\t\t\t</select>       \n-\t\t\t\t\t</td>\n-\t\t\t  \n-\t\t\n-\t\t\t\t\t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    \n-                \t</td>\n-                    \n-                    <td>\n-\t\t\t\t\t\t<h3>Path of the key file</h3>  \n-\t\t\t\t\t</td>\n-\t\t\t\t\t\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t<input type=\"text\" name=\"keyfile\" id=\"key\">  \n-\t\t\t\t\t</td> \n-\t\t\t\t</tr>\n-\t\t\t\t<!-- - --\n-\t\t\t\t<tr>\n-\t\t\t\t    <td>\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-        \t\t\t</td>\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t\t<h3 >Image</h3>\n-\t\t\t\t\t</td>\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t\t<select name=\"cbserver\">\n-\t    \t\t\t\t\t  \t<option>Linux</option>\n-\t    \t\t\t\t\t\t<option>Windows</option>\n-\t    \t\t\t\t\t</select>\n-\t    \t\t\t</td>\n-        \t\t</tr>\n-        \t\t--- /!>\n-\t</tbody>\n-</table>    \n-</div>\n\\ No newline at end of file"
    },
    {
      "sha": "f0cf1ffb434fe53a952ef38c417fc10be4eaaa4a",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/b02a8085b41b00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 101,
      "changes": 101,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/b02a8085b41b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/b02a8085b41b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/b02a8085b41b00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,101 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n- \n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-            <script>\n-               var dep = []\n-               var list = []\n-            </script>\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>Couchbase Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select  id=\"deplist\" name=\"deplist\">\n-                 \t\t\n-                  \t\t{% for res in result.deploy %}\n-                     \t\t<option value=\"{{ res.name }}\">{{res.name}}</option>\n-                     \t\t\n-                     \t\t<script>\n-                     \t    \tvar map ={}\n-                     \t    \t\n-                     \t    \tmap[\"name\"] = \"{{ res.name }}\"\n-                     \t    \tmap['cpu'] = \"{{ res.cpu }}\"\n-                     \t    \tmap['cbi'] = \"{{ res.cbi }}\"\n-                     \t    \tmap['Provider'] = \"{{ res.Provider }}\"\n-                     \t    \tdep.push(map)\n-                     \t    \tlist.push(\"{{ res.name }}\")\n-                     \t    </script>\n-                     \t    \t\n-                  \t\t{% endfor %} \n-\t\t\t    </select>\n-\t\t\t    \n-\t\t\t    <br> </br>\n-\t\t\t    <div class=\"h2ActionBtns\">\n-            \t    <a type =\"input\" class=\"button icon create\" href=\"/mngcluster/\" >Check Deployment</a>\n-                </div>\n-                <input type =\"input\" value = \"Check Deployment\" >\n-                </div>\n-            </fieldset>       \n-       \n-       \t\t<script name = \"text/javascript\">\n-          \n-      \t\t\t function getSelectedText(elementId) {\n-              \t\t\t  var elt = document.getElementById(elementId);\n-\n-               \t\t\t if (elt.selectedIndex == -1)\n-                    \t\treturn null;\n-\n-               \t\t\treturn elt.options[elt.selectedIndex].text;\n-       \t\t\t } \n-       \n-\t\t\t\t function test()\n-\t\t\t\t {\n-\t\t\t\t\t     var temp = getSelectedText(\"deplist\")\n-\t\t\t\t\t     \n-\t\t\t\t\t     var str=\"\";\n-\t\t\t \t\t     \n-\t\t\t\t\t     for (var i=0; i<dep.length; i++)\n-\t\t\t\t\t     { \n-\t\t\t\t\t    \t    if (temp == dep[i]['name'])\n-\t\t\t\t\t    \t    {\n-\t\t\t\t\t    \t    \tstr = str + dep[i]['name'] + \",\" + dep[i]['Provider'] + \",\" + dep[i]['cbi'] + \",\" + dep[i]['cpu'] + \"\\n\"\n-\t\t\t\t\t    \t    \tdocument.getElementById('demo').innerHTML = str\n-\t\t\t\t\t    \t    }\n-\t\t\t\t\t     }\n-\t\t\t\t\t     \n-\t\t\t\t }\n-\t\t\t\t \n-\t\t    </script> \n-\n-\t\t\t<p id = \"demo\"> </p>    \n-\t\t        \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "d11522a07fa8ef20e924faea24699512a9f49b77",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/b04038203d1b00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 210,
      "changes": 210,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/b04038203d1b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/b04038203d1b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/b04038203d1b00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,210 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-\n-\n-\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = password = ''\n-    if request.POST:\n-        '''\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            state = \"Your username and/or password were incorrect.\"\n-            return render_to_response(\"message.html\",{'state':state, 'username': username})\n-            '''\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        result = cb.get(\"user::piushs\").value\n-        \n-        if (result['password1'] == password) :\n-                return render_to_response(\"deployments.html\",result)\n-        else :\n-                {'error':\"IU\"}\n-                print result\n-                return render_to_response(\"auth.html\",{'error':\"IU\"})            \n- \n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    \n-    \n-    \n-    result = json.loads(result)\n-    print result['username']\n-\n-    if result['deploy'] == None:\n-        result['deploy'] = [{'name':'7','Provider':'3','cpu':'3','cbi':'3'}]\n-    else :\n-        result['deploy'].append({'name':'3','Provider':'3','cpu':'3','cbi':'3'})\n-    \n-    result['deploy'].append({'name':'4','Provider':'3','cpu':'3','cbi':'3'})              \n-                        \n-    \n-    #results['deploy'].add({'name':'1','Provider':'2','cpu':'3','cbi':'4'})\n-    cb.set(\"user::{0}\".format(uname), result)\n-\n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    \n-    \n-    print result\n-\n-    obj = ([{'tag' : \"dep1\"}, {'tag':\"dep2\"}, {'tag':\"dep3\"}, {'tag' : \"dep4\"}])\n-    return render_to_response('deployments.html', {'obj' :obj})\n-\n-@csrf_exempt\n-def couchdep(request) :    \n-    return render_to_response('couchdbdep.html')\n-\n-\n-@csrf_exempt\n-def deploy(request):\n-    \n-    '''\n-    location = request.POST.get(\"loc\")\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"cpus\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node\n-    '''   \n-    \n-    \n-    path = os.getcwd() \n-    print path\n-    os.chdir(path + \"/auth/testrunner\")\n-    os.system('pwd')\n-    \n-    os.system('python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-966-rel,amazon=true')\n-    os.chdir(path)\n-    \n-    '''\n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/Users/piush/Key/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    Config.set('servers','1',\"ec2-54-211-242-217.compute-1.amazonaws.com\")\n-    Config.set('servers','2', \"ec2-54-87-163-83.compute-1.amazonaws.com\")\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    '''\n-    \n-    return HttpResponse(\"Deployment Successful\")\n\\ No newline at end of file"
    },
    {
      "sha": "ba284a928d93d34aad4864a2493ceeaf32e47dc6",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/c040905b7f2600141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 161,
      "changes": 161,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/c040905b7f2600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/c040905b7f2600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/c040905b7f2600141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,161 +0,0 @@\n-\n-\n-\n-import os\n-\n-import os.path\n-import subprocess\n-\n-from couchbase import Couchbase\n-\n-import ConfigParser\n-PATH = '/tmp/test.ini'\n-\n-cb = Couchbase.connect (bucket = \"default\", host = \"localhost\")\n-\n-def handleNewDeployment(result):            \n-        substr = \"Can't establish SSH session\"\n-        op = \"Can't establish SSH session\"\n-        print op.find(substr)\n-        \n-        while  op.find(substr) != -1 :\n-             p2 = subprocess.Popen(r'sudo -s python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-1156-rel',\n-                          cwd = r'/auth/testrunner', shell =True, stdout = subprocess.PIPE)\n-\n-             output = p2.communicate()[0]\n-             print \"Pisu\"\n-             print output\n-             op = \"{0}\".format(output)\n-             print op\n-             p2.wait()\n-           \n-        result['status'] = 'IN'\n-        cb.set(\"DeploymentRequest\",result)\n-        \n-        username = result['username']\n-        depname = result['depname']\n-        \n-        getVal = cb.get(\"user::{0}\".format(username)).value\n-        \n-        vm = []\n-        tempip=''\n-        for iter in getVal['deploy']:\n-            if iter['request']['depname'] == depname:\n-                vm = iter['vm']\n-                break\n-                \n-         \n-        tempip = vm[0]['ip']\n-        ip = \"{0}:8091\".format(tempip)       \n-                \n-        cpu = int(result['cpus']) - 1 \n-        \n-        count = 0\n-        for v in vm:\n-            if result['provider'] != \"AWS\":\n-                cmd = 'sudo ./couchbase-cli rebalance -c {0} --server-add={1}  --server-add-username=Administrator   --server-add-password=password   -u Administrator -p password'.format(ip,v['pip'])\n-            else:\n-               cmd = 'sudo ./couchbase-cli rebalance -c {0} --server-add={1}  --server-add-username=Administrator   --server-add-password=password   -u Administrator -p password'.format(ip,v['dns']) \n-            \n-            if count > 0:\n-                p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                              cwd = r'/root/opt/couchbase/bin', shell =True)\n-                p4.wait()\n-            count = count + 1\n-        \n-        print cmd\n-        cmd = \"sudo ./couchbase-cli cluster-edit -c {0} --cluster-ramsize={1} -u Administrator -p password\".format(ip,result['ramquota'])\n-        p5 = subprocess.Popen(r'{0}'.format(cmd),cwd =r'/root/opt/couchbase/bin', shell =True)\n-        p5.wait()\n-        \n-        if result['bucketname'] == \"default\":\n-            port = 11211\n-        else:\n-            port = 11224 \n-        #cmd = \"sudo python testrunner.py -i /tmp/test.ini -t clitest.couchbase_clitest.CouchbaseCliTest.testBucketCreation  -p bucket={0},bucket_type=couchbase,bucket_port=11222,bucket_replica={1},bucket_ramsize={2},skip_cleanup=True\".format(result['bucketname'], result['replica'], result['bucket_size'])\n-        cmd = \"sudo ./couchbase-cli bucket-create -c {0}  --bucket={1}  --bucket-type=couchbase --bucket-port={2} --bucket-ramsize={3} --bucket-replica={4} --bucket-priority=low --wait -u Administrator -p password \".format(ip,result['bucketname'], port,result['bucket_size'], result['replica'])        \n-        p6 = subprocess.Popen(r'{0}'.format(cmd),cwd =r'/root/opt/couchbase/bin', shell =True)\n-        p6.wait()\n-               \n-        result['status'] = 'F'\n-        cb.set(\"DeploymentRequest\",result)\n-\n-\n-def handleNewInstance(result):\n-    substr = \"Can't establish SSH session\"\n-    op = \"Can't establish SSH session\"\n-    print op.find(substr)\n-    \n-    while  op.find(substr) != -1 :\n-         p2 = subprocess.Popen(r'sudo -s python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-966-rel,amazon=true',\n-                      cwd = r'/auth/testrunner', shell =True, stdout = subprocess.PIPE)\n-\n-         output = p2.communicate()[0]\n-         print \"Pisu\"\n-         print output\n-         op = \"{0}\".format(output)\n-         print op\n-         p2.wait()\n-       \n-    result['status'] = 'IN'\n-    cb.set(\"DeploymentRequest\",result)\n-    \n-    dns = (cb.get(\"VMPrimary\").value)['dns']\n-    \n-    username = result['username']\n-    depname = result['depname']\n-    \n-    depIndex = (cb.get(\"SessionDetails\").value)['deploymentIndex']\n-    \n-    res = cb.get(\"user::{0}\".format(username)).value\n-    \n-    vms = res['deploy'][depIndex]['newvm']\n-    \n-    \n-    for vm in vms:\n-        if (vm ['dns'] != dns):\n-            \n-            if  request['provider'] == \"AWS\":\n-                cmd='sudo ./couchbase-cli rebalance -c {0}  --server-add={1}  --server-add-username=Administrator   --server-add-password=password   -u Administrator -p password'.format(dns,vm['dns'])\n-                print cmd\n-                p4 = subprocess.Popen(r'sudo ./couchbase-cli rebalance -c {0}  --server-add={1}  --server-add-username=Administrator   --server-add-password=password   -u Administrator -p password'.format(dns,vm['dns']),\n-                                  cwd = r'/root/opt/couchbase/bin', shell =True)\n-            else:\n-                cmd='sudo ./couchbase-cli rebalance -c {0}  --server-add={1}  --server-add-username=Administrator   --server-add-password=password   -u Administrator -p password'.format(dns,vm['dns'])\n-                print cmd\n-                p4 = subprocess.Popen(r'sudo ./couchbase-cli rebalance -c {0}  --server-add={1}  --server-add-username=Administrator   --server-add-password=password   -u Administrator -p password'.format(dns,vm['dns']),\n-                                  cwd = r'/root/opt/couchbase/bin', shell =True)\n-            p4.wait()\n-            \n-    result['status'] = 'F'\n-    cb.set(\"DeploymentRequest\",result)\n-            \n-#def handleRemoveNode(result):\n-    \n-    \n-      \n-#def handleBucketCreate(result):\n-    \n-    \n-def main():\n-        while True:\n-            \n-            try:\n-                result = cb.get(\"DeploymentRequest\").value\n-            except:\n-                continue\n-            \n-            if result['status'] == \"IHDE\":        \n-                handleNewDeployment(result)\n-            elif result['status'] == \"IHAD\":\n-                handleNewInstance(result)\n-            ''''    \n-            elif result['status'] == \"IHRM\":\n-                handleRemoveNode(result)\n-            else : \n-                result['status'] == \"IHBC\"\n-                handleBucketCreate(result)\n-                '''\n-                \n-if __name__ == \"__main__\":\n-    main()\n\\ No newline at end of file"
    },
    {
      "sha": "dd99d08cf2b6102b229d84d49ec952d6a1a864e2",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/c055491b2d2700141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 195,
      "changes": 195,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/c055491b2d2700141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/c055491b2d2700141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/c055491b2d2700141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,195 +0,0 @@\n-from azure import *\n-from azure.servicemanagement import *\n-import base64\n-import os\n-\n-import time\n-import datetime\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-def _wait_for_async(sms,request_id):\n-    count = 0\n-    result = sms.get_operation_status(request_id)\n-    while result.status == 'InProgress':\n-        count = count + 1\n-        time.sleep(5)\n-        result = sms.get_operation_status(request_id)\n-    self.assertEqual(result.status, 'Succeeded')\n-    \n-def _wait_for_deployment(sms,service_name, deployment_name,status='Running'):\n-    count = 0\n-    props = sms.get_deployment_by_name(service_name, deployment_name)\n-    while props.status != status:\n-        count = count + 1\n-        time.sleep(5)\n-        props = sms.get_deployment_by_name(service_name, deployment_name)\n-        \n-def _wait_for_role(sms,service_name, deployment_name, role_instance_name,status='ReadyRole'):\n-    count = 0\n-    props = sms.get_deployment_by_name(service_name, deployment_name)\n-    while self._get_role_instance_status(props, role_instance_name) != status:\n-        count = count + 1\n-        props = self.sms.get_deployment_by_name(service_name, deployment_name)\n-\n-def _get_role_instance_status(deployment, role_instance_name):\n-    for role_instance in deployment.role_instance_list:\n-        if role_instance.instance_name == role_instance_name:\n-            return role_instance.instance_status\n-    return None\n-\n-def AzureHandler(request):\n-    \n-    subscription_id = request['subid']\n-    certificate_path = '/tmp/azurekey'\n-    \n-    sms = ServiceManagementService(subscription_id, certificate_path)\n-\n-    image_name='5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-65-20140606'\n-    \n-    \n-    \n-    tm = timestamp()\n-    name = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-    label = name\n-    desc = name\n-    location = request['loc']\n-    \n-    sms.create_hosted_service(name, label, desc, location)\n-\n-    i = datetime.datetime.now()\n-    dateVar = '{0}-{1}-{2}'.format(i.year, i.month, i.day)\n-    media_link = 'https://portalvhdsmtcz83fp9vjrb.blob.core.windows.net/vhds/'+ name + '-' + name + '-' +dateVar +'.vhd'\n-    \n-    \n-    \n-    location = request['loc']\n-    linux_user_id='azureuser'\n-    linux_config = LinuxConfigurationSet(name, 'azureuser',user_password=None,disable_ssh_password_authentication=True)\n-    \n-    \n-    azure_config = \"/tmp\" + '/.azure'\n-    cert_data_path = azure_config + \"/myCert.pfx\"\n-    with open(cert_data_path, \"rb\") as bfile:\n-        cert_data = base64.b64encode(bfile.read())\n-    \n-    cert_format = 'pfx'\n-    cert_password = ''\n-    cert_res = sms.add_service_certificate(service_name=name,\n-                                data=cert_data,\n-                                certificate_format=cert_format,\n-                                password=cert_password)\n-    \n-    vars(cert_res)\n-    time.sleep(60)\n-    \n-    \n-    azure_config = \"/tmp\" + '/.azure'\n-    thumbprint_path = azure_config + '/thumbprint'\n-    authorized_keys = \"/home/\" + linux_user_id + \"/.ssh/authorized_keys\" \n-    try:\n-        thumbprint=open(thumbprint_path, 'r').readline().split('\\n')[0]\n-    except:\n-        thumbprint=None\n-    \n-    \n-    publickey = PublicKey(thumbprint, authorized_keys)\n-    linux_config.ssh.public_keys.public_keys.append(publickey)\n-    \n-    print vars(publickey)\n-    print vars(linux_config.ssh.public_keys.public_keys.list_type)\n-    \n-    \n-    \n-    print vars(linux_config.ssh.public_keys)\n-    print vars(linux_config.ssh.key_pairs)\n-    \n-    os_hd  = OSVirtualHardDisk(image_name, media_link)\n-    \n-    print vars(os_hd)\n-    \n-    network = ConfigurationSet()\n-    network.configuration_set_type = 'NetworkConfiguration'\n-    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('ssh', 'tcp', '22', '22'))\n-    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('http', 'tcp','8091','8091'))\n-    '''\n-    portIndex = 0\n-    while portIndex <= 65535:\n-        network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('http', 'tcp', \"{0}\".format(portIndex), \n-                                                                                     '{0}'.format(portIndex)))\n-        portIndex = portIndex + 1\n-    '''\n-    result = sms.create_virtual_machine_deployment(service_name=name,\n-        deployment_name=name,\n-        deployment_slot='production',\n-        label=name,\n-        role_name=name,\n-        system_config=linux_config,\n-        network_config=network,\n-        os_virtual_hard_disk=os_hd,\n-        role_size='Large')\n-    \n-    request_id = result.request_id\n-    print request_id\n-    print result\n-    \n-    _wait_for_async(sms,result.request_id)\n-    _wait_for_deployment(sms,service_name, deployment_name)\n-    _wait_for_role(service_name, deployment_name, role_name)\n-        \n-    cpus = int(request['cpus']) - 1\n-    i=0\n-    while i<cpus:\n-        tm = timestamp()\n-        rolename = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-        result = sms.add_role(service_name=name, deployment_name=name, role_name=rolename,\n-                              system_config = linux_config, os_virtual_hard_disk=os_hd, network_config= network)\n-        request_id = result.request_id\n-        print request_id\n-        print result\n-    \n-    print vars(linux_config.ssh.public_keys)\n-    print vars(linux_config.ssh.key_pairs)\n-    \n-    time.sleep (60)\n-    status = sms.get_operation_status(request_id)\n-    try:\n-        print vars(status.error)\n-    except:\n-        print vars(status)\n-    \n-    service_name = name\n-    deployment_name = name\n-    props = sms.get_deployment_by_name(service_name, deployment_name)\n-    vars(props)\n-    \n-    result = sms.list_locations()\n-    for location in result:\n-        print(location.name)\n-    \n-\n-    deployment = sms.get_deployment_by_slot(name, 'production')\n-\n-    for instance in deployment.role_instance_list:\n-        while instance.instance_status != \"ReadyRole\":\n-            continue\n-        print('Instance name: ' + instance.instance_name)\n-        print('Instance status: ' + instance.instance_status)\n-        print('Instance size: ' + instance.instance_size)\n-        print('Instance role name: ' + instance.role_name)\n-        print('Instance ip address: ' + instance.ip_address)\n-        print('')\n-    \n-        \n-    node = {\n-            'nodeid':None,\n-            'private_ip':None,\n-            'public_ip': None}\n-    \n-    return node\n-    \n-    "
    },
    {
      "sha": "3692dafdf8bb7c12175fc069269b80833ad0db67",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/d013b54e491b00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 88,
      "changes": 88,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/d013b54e491b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/d013b54e491b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/11/d013b54e491b00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,88 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n- \n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-            <script>\n-               var dep = []\n-               var list = []\n-            </script>\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>CouchDB Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select id=\"deplist\" onchange=\"test();\">\n-                 \t\t\n-                  \t\t{% for res in result.deploy %}\n-                     \t\t<option value=\"{{ res.name }}\">{{res.name}}</option>\n-                     \t\t\n-                     \t\t<script>\n-                     \t    \tvar map ={}\n-                     \t    \t\n-                     \t    \tmap[\"name\"] = \"{{ res.name }}\"\n-                     \t    \tmap['cpu'] = \"{{ res.cpu }}\"\n-                     \t    \tmap['cbi'] = \"{{ res.cbi }}\"\n-                     \t    \tmap['Provider'] = \"{{ res.Provider }}\"\n-                     \t    \tdep.push(map)\n-                     \t    \tlist.push(\"{{ res.name }}\")\n-                     \t    </script>\n-                     \t    \t\n-                  \t\t{% endfor %} \n-\t\t\t    </select>\n-                </div>\n-            </fieldset>       \n-       \n-       \t\t<script name = \"text/javascript\">\n-          \n-      \t\t\t function getSelectedText(elementId) {\n-              \t\t\t  var elt = document.getElementById(elementId);\n-\n-               \t\t\t if (elt.selectedIndex == -1)\n-                    \t\treturn null;\n-\n-               \t\t\treturn elt.options[elt.selectedIndex].text;\n-       \t\t\t } \n-       \n-\t\t\t\t function test()\n-\t\t\t\t {\n-\t\t\t\t\t     var temp = getSelectedText(\"deplist\")\n-\t\t\t\t\t     \n-\t\t\t\t\t     var str=\"def\";\n-\t\t\t \t\t     \n-\t\t\t\t\t     \n-\t\t\t\t\t     document.getElementById('demo').innerHTML = def[0]['name']\n-\t\t\t\t }\n-\t\t\t\t \n-\t\t    </script> \n-\n-\t\t\t<p id = \"demo\"> </p>    \n-\t\t        \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "69de2cfebfea40a3c0a0d02cf05ae97d59edd867",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/00467a8a451b00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 90,
      "changes": 90,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/00467a8a451b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/00467a8a451b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/00467a8a451b00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,90 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n- \n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-            <script>\n-               var dep = []\n-            </script>\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>CouchDB Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select id=\"deplist\" onchange=\"test();\">\n-                 \t\t\n-                  \t\t{% for res in result.deploy %}\n-                     \t\t<option value=\"{{ res.name }}\">{{res.name}}</option>\n-                     \t\t\n-                     \t\t<script>\n-                     \t    \tvar map ={}\n-                     \t    \t\n-                     \t    \tmap[\"{{ res.name }}\"] = \"{{ res.name }}\"\n-                     \t    \tmap[\"{{ res.cpu }}\"] = \"{{ res.cpu }}\"\n-                     \t    \tmap[\"{{ res.cbi }}\"] = \"{{ res.cbi }}\"\n-                     \t    \tmap[\"{{ res.Provider }}\"] = \"{{ res.Provider }}\"\n-                     \t    \tdep.push(map)\n-                     \t    </script>\n-                     \t    \t\n-                  \t\t{% endfor %} \n-\t\t\t    </select>\n-                </div>\n-            </fieldset>       \n-       \n-       \t\t<script name = \"text/javascript\">\n-          \n-      \t\t\t function getSelectedText(elementId) {\n-              \t\t\t  var elt = document.getElementById(elementId);\n-\n-               \t\t\t if (elt.selectedIndex == -1)\n-                    \t\treturn null;\n-\n-               \t\t\treturn elt.options[elt.selectedIndex].text;\n-       \t\t\t } \n-       \n-\t\t\t\t function test()\n-\t\t\t\t {\n-\t\t\t\t\t{% for car in obj %}\n-\t\t\t\t\t     var temp = getSelectedText(\"deplist\")\n-\t\t\t \t\t     temp = temp.trim()\n-\t\t\t\t\t     \n-\t\t\t \t\t     for (int i=0 ; i<map.length ; i++){\n-\t\t\t \t\t     \tdocument.getElementById('demo').innerHTML = \"{{car.tag}}\"\n-\t\t\t\t \t\t }\n-\t\t\t\t\t\n-\t\t\t\t\t{% endfor %}\n-\n-\t\t\t\t }\n-\t\t\t\t \n-\t\t    </script> \n-\n-\t\t\t<p id = \"demo\"> </p>    \n-\t\t        \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "b4acda2d93f696b2a85afe3a9e0188516aacba05",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/00f2778d0e2300141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 343,
      "changes": 343,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/00f2778d0e2300141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/00f2778d0e2300141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/00f2778d0e2300141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,343 +0,0 @@\n-\n-# Create your views here.\n-\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-def create_instance(request):\n-    \n-    location = request['loc']\n-        \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-        \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-    \n-    return nodesup\n-    \n-def handleNewDeployment(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    bucket =[]\n-    vms = []\n-    \n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                           'dns': convert_node_ip_string(node.__dict__['extra']['dns_name'])})\n-        \n-    bucket.append ({ 'bucketname' : request['bucketname'], 'bucketsize':request['bucket_size']});\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    print \"hehhr\" \n-    print result\n-    \n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    request['status'] = \"IHDE\"        \n-    \n-    if result['deploy'] == None:\n-        print \"1\"\n-        result['deploy'] = [{'request':request, \n-                             'bucket': bucket,\n-                             'vm':vms}]\n-    else :\n-        print \"2\"\n-        result['deploy'].append({'request':request, 'bucket' : bucket, 'vm':vms})\n-    \n-    \n-    print result       \n-    \n-    cb.set(\"DeploymentRequest\",request)\n-    cb.set(\"user::{0}\".format(request['username']), result)\n-       \n-    aws_mkfile(nodesup,request['username'], request['keyfile'] )\n-\n-\n-def handleNewInstances(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    resultSession = cb.get(\"SessionDetails\").value\n-    \n-    depIndex = resultSession['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    \n-    vms = result['deploy'][depIndex]['vm']\n-    \n-    newVM= []\n-    mainVm = vms[0]\n-    newVM.append(mainVm)\n-    cb.set(\"VMPrimary\",mainVm)\n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                    'dns':node.__dict__['extra']['dns_name']})\n-        newVM.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                    'dns':node.__dict__['extra']['dns_name']})\n-     \n-    \n-    result['deploy'][depIndex]['newvm'] = newVM   \n-    result['deploy'][depIndex]['vm'] = vms \n-    cpu = result['deploy'][depIndex]['request']['cpus'] \n-    result['deploy'][depIndex]['request']['cpus']  = int (cpu) +1 \n-    \n-    cb.set(\"user::{0}\".format(request['username']),result)\n-    \n-    print result\n-    \n-    request[\"status\"] = \"IHAD\"\n-    \n-    cb.set(\"DeploymentRequest\",request)\n-       \n-    aws_mkfile(nodesup,request['username'], request['keyfile'] )\n-    aws_mkfile_add(newVM,request['username'], request['keyfile'])\n-\n-\n-def delInstance(request,cb):\n-    \n-    location = request['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    print image\n-    print size\n-    '''\n-    y = request.POST.get(\"number\")\n-    a=0\n-    \n-    n = int(y);\n-    \n-    listId = list()\n-    for res in result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'] : \n-        if (a < n):\n-            listId.append(res['nodeid'])\n-            del result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'][a]\n-        else:\n-            break\n-        a= a+1\n-    '''\n-    \n-    machines = request['delmachines']\n-    \n-    listIns = []\n-    for mc in machines:\n-        listIns.append(mc['nodeid'])\n-        \n-    pvm = cb.get(\"VMPrimary\").value\n-    print list\n-    \n-    for node in nodes :\n-        if (node.id in listIns):\n-            driver.destroy_node(node)\n-     \n-    sessRes = cb.get(\"SessionDetails\").value\n-    username = sessRes['username']\n-    depname = sessRes['deploymentname']\n-    depIndex = sessRes['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value  \n-    \n-    a = 0;\n-    listDns = []\n-    for mc in machines:\n-        listDns.append(mc['dns'])\n-    \n-    \n-    for res in result['deploy'][depIndex]['vm']:\n-        if res['dns'] in machines['dns_name']:\n-            del result['deploy'][depIndex]['vm'][a]\n-    a = a+1\n-    \n-    nodes = driver.list_nodes()\n-    \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-    \n-def main():\n-    cb = Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-\n-    while True:\n-        try:\n-            request = cb.get(\"DeploymentRequest\").value\n-        except:\n-            continue\n-        \n-        if request['status'] == \"RDDE\":\n-            handleNewDeployment(request,cb)  \n-        elif request['status'] == \"RDAD\":    \n-            handleNewInstances(request,cb)  \n-        elif request['status'] == \"RDDEL\":\n-            delInstance(request,cb)       \n-            \n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-    \n-\n-def aws_mkfile_add(vm, user, key):\n-    '''\n-    filekey = open(\"/tmp/{0}.pem\".format(user), \"w\")\n-    filekey.write(key)\n-    filekey.close()\n-    '''\n-    cfgfile = open(\"/tmp/addIns.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/{0}.pem\".format(user))\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for v in vm:\n-        \n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(v['dns']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-\n-def aws_mkfile(nodesup, user, key):\n-    '''\n-    filekey = open(\"/tmp/{0}.pem\".format(user), \"w\")\n-    filekey.write(key)\n-    filekey.close()\n-    '''\n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/{0}.pem\".format(user))\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(node.__dict__['extra']['dns_name']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-if __name__ == \"__main__\":\n-    main()"
    },
    {
      "sha": "bd3e16555e56a489e6150bd685ee43455fbbbf15",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/301e0388e41500141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 36,
      "changes": 36,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/301e0388e41500141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/301e0388e41500141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/301e0388e41500141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,36 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-\n-@csrf_exempt\n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    username = password = ''\n-    if request.POST:\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            {\n-             state = \"Your username and/or password were incorrect.\"\n-             }\n-            \n-\n-  \n-    return render_to_response(\"auth.html\",{'state':state, 'username': username})\n\\ No newline at end of file"
    },
    {
      "sha": "fd62e83b6cf110580afdf77afa1dd69dffd76efa",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/30553467b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/30553467b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/30553467b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/30553467b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab"
    },
    {
      "sha": "93416d75466323cd3583281945053365bab5fb94",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/41a11967b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 49,
      "changes": 49,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/41a11967b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/41a11967b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/41a11967b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,49 +0,0 @@\n-# Ramp-up view performance test:\n-# 1 ddoc with 8 views\n-# 8K ops/sec (constant background load)\n-# 100 qps (per foreground worker)\n-# Stop after 2 hours\n-# 80% reads, 20% writes (12% updates/deletes, 8% inserts)\n-# 10M dataset\n-\n-performance.iperf.RampUpTests.test_view_rampup_1\n-\n-params:\n-\n-# general\n-batch=50\n-kind=json\n-mem_quota=20000\n-\n-# load phase\n-items=10000000\n-hot_init_items=2000000\n-\n-# access phase\n-ratio_sets=0.2\n-ratio_misses=0.05\n-ratio_creates=0.40\n-ratio_deletes=0.50\n-ratio_hot=0.2\n-ratio_hot_gets=0.95\n-ratio_hot_sets=0.95\n-ratio_expirations=0.0\n-bg_max_ops_per_sec=4000\n-fg_max_ops_per_sec=1000\n-fg_max_ops=80000000\n-start_delay=70\n-total_bg_clients=2\n-total_fg_clients=98\n-total_clients=100\n-time=7200\n-exit_after_creates=0\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-load_wait_until_drained=1\n-loop_wait_until_drained=0\n-mcsoda_heartbeat=3\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "d11759be6aac848407a508a0ea24641e29073acd",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/50b54fa9671300141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 12,
      "changes": 12,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/50b54fa9671300141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/50b54fa9671300141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/50b54fa9671300141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,12 +0,0 @@\n-from django.conf.urls import *\n-\n-#from django.contrib import admin\n-#admin.autodiscover()\n-\n-urlpatterns = patterns('',\n-    # Examples:\n-    # url(r'^$', 'CouchbaseCloud.views.home', name='home'),\n-    # url(r'^blog/', include('blog.urls')),\n-\n-    url(r'^login/', include(auth.views.login_user)),\n-)"
    },
    {
      "sha": "714ce14d56853974bde98c94c0aefab18760925d",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/50df2a67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 8,
      "changes": 8,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/50df2a67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/50df2a67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/50df2a67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,8 +0,0 @@\n-rebalance.rebalancein.RebalanceInTests.rebalance_in_with_ops,nodes_in=3,replicas=1,items=50000,doc_ops=create;update;delete\n-performance.eperf.EVPerfClient.test_minimal,stats=0,items=1000,hot_init_items=1000\n-memcapable.WarmUpMemcachedTest.do_warmup_100k\n-view.createdeleteview.CreateDeleteViewTests.test_view_ops,ddoc_ops=create,test_with_view=True,num_ddocs=1,num_views_per_ddoc=10,items=1000,skip_cleanup=False\n-view.viewquerytests.ViewQueryTests.test_employee_dataset_startkey_endkey_queries_rebalance_in,num_nodes_to_add=1,skip_rebalance=true,docs-per-day=1,timeout=1200\n-view.viewquerytests.ViewQueryTests.test_simple_dataset_stale_queries_data_modification,num-docs=1000,skip_rebalance=true,timeout=1200\n-xdcr.uniXDCR.unidirectional.load_with_ops,replicas=1,items=10000,value_size=128,ctopology=chain,rdirection=unidirection,doc-ops=update-delete\n-xdcr.uniXDCR.unidirectional.load_with_failover,replicas=1,items=10000,ctopology=chain,rdirection=unidirection,doc-ops=update-delete,failover=source\n\\ No newline at end of file"
    },
    {
      "sha": "2608ddd1404c4f0ec3103188f0c189b456dbab41",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/61ef1967b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 39,
      "changes": 39,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/61ef1967b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/61ef1967b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/61ef1967b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,39 +0,0 @@\n-# like read-suv-1-small, but 5M items\n-#\n-# still: 0 deletes/expirations, 50K reload, 100K creates, ratio-hot 0.05\n-\n-performance.eperf.EPerfClient.test_eperf_read\n-\n-params:\n-\n-# general\n-batch=50\n-kind=nonjson\n-mem_quota=20000\n-spec=read-suv-1-small-5\n-\n-# load phase\n-hot_init_items=50000\n-items=5000000\n-\n-# access phase\n-# Read:Insert:Update:Delete Ratio = 90:3:7:0.\n-ratio_sets=0.1\n-ratio_misses=0.05\n-ratio_creates=0.30\n-ratio_deletes=0\n-ratio_hot=0.05\n-ratio_hot_gets=0.995\n-ratio_hot_sets=0.995\n-ratio_expirations=0\n-max_creates=100000\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-load_wait_until_drained=1\n-loop_wait_until_drained=0\n-mcsoda_heartbeat=3\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "20686b9cfea7298529aa6b7f7c702aa182dfda35",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/70264167b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 124,
      "changes": 124,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/70264167b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/70264167b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/70264167b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,124 +0,0 @@\n-import time\n-from membase.api.rest_client import RestConnection, Bucket\n-from membase.helper.rebalance_helper import RebalanceHelper\n-from memcached.helper.data_helper import MemcachedClientHelper\n-from basetestcase import BaseTestCase\n-from mc_bin_client import MemcachedError\n-from couchbase.documentgenerator import BlobGenerator\n-from threading import Thread\n-\n-class StatsCrashRepro(BaseTestCase):\n-    def setUp(self):\n-        super(StatsRepro, self).setUp()\n-        self.timeout = 120\n-        self.bucket_name = self.input.param(\"bucket\", \"default\")\n-        self.bucket_size = self.input.param(\"bucket_size\", 100)\n-        self.data_size = self.input.param(\"data_size\", 2048)\n-        self.threads_to_run = self.input.param(\"threads_to_run\", 5)\n-#        self.nodes_in = int(self.input.param(\"nodes_in\", 1))\n-#        self.servs_in = [self.servers[i + 1] for i in range(self.nodes_in)]\n-#        rebalance = self.cluster.async_rebalance(self.servers[:1], self.servs_in, [])\n-#        rebalance.result()\n-        self.cluster.create_default_bucket(self.servers[0], self.bucket_size, self.num_replicas)\n-        self.buckets.append(Bucket(name=\"default\", authType=\"sasl\", saslPassword=\"\",\n-             num_replicas=self.num_replicas, bucket_size=self.bucket_size))\n-        rest = RestConnection(self.servers[0])\n-        self.nodes_server = rest.get_nodes()\n-\n-\n-    def tearDown(self):\n-        super(StatsRepro, self).tearDown()\n-\n-    def _load_doc_data_all_buckets(self, op_type='create', start=0, expiry=0):\n-        loaded = False\n-        count = 0\n-        gen_load = BlobGenerator('warmup', 'warmup-', self.data_size, start=start, end=self.num_items)\n-        while not loaded and count < 60:\n-            try :\n-                self._load_all_buckets(self.servers[0], gen_load, op_type, expiry)\n-                loaded = True\n-            except MemcachedError as error:\n-                if error.status == 134:\n-                    loaded = False\n-                    self.log.error(\"Memcached error 134, wait for 5 seconds and then try again\")\n-                    count += 1\n-                    time.sleep(5)\n-\n-    def _get_stats(self, stat_str='all'):\n-\n-#        for server in self.nodes_server:\n-            server = self.servers[0]\n-            mc_conn = MemcachedClientHelper.direct_client(server, self.bucket_name, self.timeout)\n-            stat_result = mc_conn.stats(stat_str)\n-#            self.log.info(\"Getting stats {0} : {1}\".format(stat_str, stat_result))\n-            self.log.info(\"Getting stats {0}\".format(stat_str))\n-            mc_conn.close()\n-\n-\n-    def _run_get(self):\n-        server = self.servers[0]\n-        mc_conn = MemcachedClientHelper.direct_client(server, self.bucket_name, self.timeout)\n-        for i in xrange(self.num_items):\n-            key = \"warmup{0}\".format(i)\n-            mc_conn.get(key)\n-\n-\n-    def run_test(self):\n-        ep_threshold = self.input.param(\"ep_threshold\", \"ep_mem_low_wat\")\n-        active_resident_threshold = int(self.input.param(\"active_resident_threshold\", 10))\n-\n-        mc = MemcachedClientHelper.direct_client(self.servers[0], self.bucket_name)\n-        stats = mc.stats()\n-        threshold = int(self.input.param('threshold', stats[ep_threshold]))\n-        threshold_reached = False\n-        self.num_items = self.input.param(\"items\", 10000)\n-        self._load_doc_data_all_buckets('create')\n-\n-        # load items till reached threshold or mem-ratio is less than resident ratio threshold\n-        while not threshold_reached :\n-            mem_used = int(mc.stats()[\"mem_used\"])\n-            if mem_used < threshold or int(mc.stats()[\"vb_active_perc_mem_resident\"]) >= active_resident_threshold:\n-                self.log.info(\"mem_used and vb_active_perc_mem_resident_ratio reached at %s/%s and %s \" % (mem_used, threshold, mc.stats()[\"vb_active_perc_mem_resident\"]))\n-                items = self.num_items\n-                self.num_items += self.input.param(\"items\", 10000)\n-                self._load_doc_data_all_buckets('create', items)\n-            else:\n-                threshold_reached = True\n-                self.log.info(\"DGM state achieved!!!!\")\n-\n-        # wait for draining of data before restart and warm up\n-        for bucket in self.buckets:\n-            RebalanceHelper.wait_for_persistence(self.nodes_server[0], bucket)\n-\n-\n-        while 1:\n-\n-#            read_data_task = self.cluster.async_verify_data(self.master, self.buckets[0], self.buckets[0].kvs[1])\n-\n-            read_data_task = Thread(target=self._run_get)\n-            read_data_task.start()\n-            #5 threads to run stats all and reset asynchronously\n-            start = time.time()\n-            while (time.time() - start) < 300:\n-\n-                stats_all_thread = []\n-                stats_reset_thread = []\n-\n-                for i in xrange(self.threads_to_run):\n-                    stat_str = ''\n-                    stats_all_thread.append(Thread(target=self._get_stats, args=[stat_str]))\n-                    stats_all_thread[i].start()\n-                    stat_str = 'reset'\n-                    stats_reset_thread.append(Thread(target=self._get_stats, args=[stat_str]))\n-                    stats_reset_thread[i].start()\n-\n-\n-                for i in xrange(self.threads_to_run):\n-                    stats_all_thread[i].join()\n-                    stats_reset_thread[i].join()\n-\n-                del stats_all_thread\n-                del stats_reset_thread\n-\n-#            read_data_task.result()\n-            read_data_task.join()\n\\ No newline at end of file"
    },
    {
      "sha": "35ea2a621da81ee658c466934bf19d6668f7f6e1",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/702cb245101600141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 734,
      "changes": 734,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/702cb245101600141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/702cb245101600141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/702cb245101600141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,734 +0,0 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-<html id=''>\n-<head>\n-        \n-      \n-\n-\n-\n-  \n-  \n-\n-\n-\n-\n-      <div id=\"deployments\">\n-\n-        \n-        <div id=\"deploymentsSection\" class=\"section\">\n-          <h2>MongoDB Deployments</h2>\n-          \n-            <div class=\"h2ActionBtns\">\n-            \t<a class=\"button icon create\" href=\"/create\">Create new</a>\n-            </div>\n-              <div class=\"noData\"></div>\n-       </div>\n-\n-\n-        \n-        \n-          <div id=\"remoteConnectionsSection\" class=\"section\">\n-            <h2>Remote Connections</h2>\n-            \n-            <div class=\"h2ActionBtns\">\n-              \n-                \n-                  <a class=\"button icon add\" onclick=\"openCreateConnectionDialog(event);\" target=\"_blank\">Add</a>\n-                \n-                \n-              \n-            </div>\n-            \n-              \n-                <div class=\"noData\"></div>\n-              \n-              \n-            \n-            \n-            \n-\n-<form action=\"/saveconnection\" method=\"POST\"\n-      id=\"saveConnectionDialog\" title=\"Configure a remote connection\" autocomplete=\"off\" style=\"display:none;\">\n-\n-  \n-    \n-    \n-  \n-\n-\n-\n-\n-\n-  <fieldset>\n-    <input type=\"hidden\" name=\"r\" value=\"/home\"/>\n-    <input id=\"connectionId\" type=\"hidden\" name=\"id\" value=\"\"/>\n-    <div>\n-      <p>\n-        Remote Connections allow you to visualize and manage the data and database(s) on MongoDB servers running anywhere.\n-      </p>\n-      <p>\n-        From here you can configure a connection to (1) a remote database, (2) a remote mongod server process, or (3) a remote replica set.\n-      </p>\n-    </div>\n-    <div>\n-      <label>Name for this remote connection<span class=\"required\"></span></label>\n-      <input class=\"required connectionName\" type=\"text\" name=\"connectionName\" id=\"connectionName\" value=\"\"/>\n-    </div>\n-    <div>\n-      <label>URI<span class=\"required\"></span> <span class=\"tip\"><a id=\"uriHelpLink\" href=\"javascript:showInlineHelp('uriHelp')\">explain this</a></span></label>\n-      <input class=\"required\" type=\"text\" name=\"uri\" id=\"uri\" value=\"\"/>\n-    </div>\n-    <div>\n-      <input id=\"storeCredentials\" type=\"checkbox\" name=\"storeCredentials\" />\n-      <label>Save password? <span class=\"tip\"><a id=\"isThisSecureLink\" href=\"javascript:showInlineHelp('rememberPasswordHelp')\">explain this</a></span></label>\n-    </div>\n-    <div class=\"metadataAgreement\">\n-      <input class=\"required\" type=\"checkbox\" name=\"enableMetaData\" id=\"enableMetaData\"/>\n-      <label>\n-        I allow MongoLab to save configuration data in my remote database(s).<span class=\"required\"></span>\n-        <span class=\"tip\"><a id=\"enableMetaDataHelpLink\" href=\"javascript:showInlineHelp('enableMetaDataHelp')\">explain this</a></span>\n-      </label>\n-    </div>\n-    <div class=\"inlineHelp\" id=\"enableMetaDataHelp\" style=\"display: none;\">\n-      <p>\n-        Certain MongoLab features and services will store configuration information into the database itself.\n-        For example, MongoLab allows you to save search queries for repeated use; when you create a Saved Search, the configuration for that query is stored in your database.\n-      </p>\n-      <p>\n-        This configuration data takes up a tiny amount of space and should not meaningfully affect the storage footprint of your database.  Furthermore we have isolated this data into special collections prefixed with <code>objectlabs-system</code> so there should be no impact on your data.  You can delete this information at any time by removing the <code>objectlabs-system</code> collections.\n-      </p>\n-      <p>\n-        By checking this checkbox, you acknowledge that you understand and allow us to save configuration data into your remote database(s).\n-      </p>\n-\n-    </div>\n-    <div class=\"inlineHelp\" id=\"connectionNameHelp\" style=\"display:none;\">\n-      <p>The <code>Connection name</code> uniquely identifies your remote connection in your MongoLab account.  It is used primarily for display purposes.</p>\n-    </div>\n-    <div class=\"inlineHelp\" id=\"uriHelp\" style=\"display: none;\">\n-      <p>\n-        Enter a <code>URI</code> in the standard MongoDB connection string format (<a href=\"http://www.mongodb.org/display/DOCS/Connections\">MongoDB reference</a>):\n-      <pre>  mongodb://[dbuser:dbpass@]host:port[/dbname]</pre>\n-      </p>\n-      <div class=\"tinyLineBreak\"></div>\n-      <p>\n-        The <code>username</code>, <code>password</code> are optional - if the server you are connecting to requires authentication, you will be prompted for your credentials later even if you do not provide them now.  The <code>dbname</code> must be \"admin\" if you want to authenticate to an entire <code>mongod</code> server process.\n-      </p>\n-      <div class=\"tinyLineBreak\"></div>\n-      <p>Example - connecting to a single database:\n-      <pre>  mongodb://[dbuser:dbpass@]example.com:12345[/dbname]</pre>\n-      </p>\n-      <p>Example - connecting to a server:\n-      <pre>  mongodb://[admindbuser:admindbpass@]example.com:12345[/admin]</pre>\n-      </p>\n-      <p>Example - connecting to a replica set cluster:\n-      <pre>  mongodb://[admindbuser:admindbpass@]example.com:12345,example2.com:12345[/admin]</pre>\n-      </p>\n-    </div>\n-    <div class=\"inlineHelp\" id=\"rememberPasswordHelp\" style=\"display:none;\">\n-      <p>\n-        For security reasons, we do not store your database username and password in our system unless you check the <code>Save password?</code> checkbox.\n-      </p>\n-      <p>\n-        If you choose to save your database credentials in our system, you can be assured that your password will be encrypted and stored securely.  That being said, if your database contains sensitive information, we recommend that you do not save your password in our system.\n-      </p>\n-    </div>\n-  </fieldset>\n-</form>\n-\n-<script type=\"application/javascript\">\n-  function openCreateConnectionDialog(event) {\n-    closeInlineHelp();\n-    // initialize fields\n-    $(\"#saveConnectionDialog\").validate().resetForm();\n-    $(\"#connectionId\").val(\"\");\n-    $(\"#uri\").val(\"\");\n-    $(\"#connectionName\").val(\"\");\n-    $(\".metadataAgreement\").show();\n-    $(\"#enableMetaData\").attr(\"checked\", false);\n-    $(\"#storeCredentials\").attr(\"checked\", false);\n-    openDialog('#saveConnectionDialog', event);\n-  }\n-\n-  function openEditConnectionDialog(id, name, uri, store, event) {\n-    closeInlineHelp();\n-    $(\"#saveConnectionDialog\").validate().resetForm();\n-    // set fields\n-    $(\"#connectionId\").val(id);\n-    $(\"#uri\").val(uri);\n-    $(\"#connectionName\").val(name);\n-    $(\".metadataAgreement\").hide();\n-    $(\"#enableMetaData\").attr(\"checked\", true);\n-    $(\"#storeCredentials\").attr(\"checked\", store);\n-    openDialog('#saveConnectionDialog', event);\n-  }\n-\n-  $(document).ready(function() {\n-    $(\"#uri\").focus( function() { showInlineHelp('uriHelp'); } );\n-    $(\"#uriHelpLink\").focus( function() { showInlineHelp('uriHelp'); } );\n-    $(\"#storeCredentials\").focus( function() { showInlineHelp('rememberPasswordHelp'); } );\n-    $(\"#isThisSecureLink\").focus( function() { showInlineHelp('rememberPasswordHelp'); } );\n-    $(\"#enableMetaDataHelpLink\").focus( function() { showInlineHelp('enableMetaDataHelp'); } );\n-    $(\"#enableMetaData\").focus( function() { showInlineHelp('enableMetaDataHelp'); } );\n-    $(\"#saveConnectionDialog\").validate( {\n-      errorPlacement: function(error, element) {\n-        if(element.attr(\"type\") == 'checkbox') {\n-          element.next('label').after(error);\n-        } else {\n-          element.after(error);\n-        }\n-      }\n-    } );\n-\n-    $.validator.addMethod(\"connectionName\", function (value, element) {\n-      var result = this.optional(element) || ( value.length < 64 && /^([A-Za-z0-9_-])*$/.test(value) );\n-      return result;\n-    }, \"The connection name must have fewer than 64 characters and cannot have any spaces or special characters (hyphens and underscores are OK) in it.\");\n-\n-\n-    initDialog(\"#saveConnectionDialog\", \"Save\");\n-    $(\"#saveConnectionDialog\").dialog(\"option\", \"width\", 650);\n-\n-    // open dialogs on errors\n-    if(PAGE_ERRORS['/saveconnection']) {\n-      openDialog('#saveConnectionDialog', null);\n-    }\n-  });\n-</script>\n-\n-          </div>\n-        \n-        \n-        \n-\n-      </div>\n-\n-\n-\n-      \n-\n-      \n-      \n-      <form action=\"/delete\" method=\"POST\" id=\"DbConstructionErrorDeleteForm\" title=\"Error\" style=\"display:none;\">\n-        <div><!-- message goes here --></div>\n-        <input type=\"hidden\" name=\"db\" value=\"\"/>\n-      </form>\n-      \n-      \n-      <form action=\"/deletecluster\" method=\"POST\" id=\"ClusterConstructionErrorDeleteForm\" title=\"Error\" style=\"display:none;\">\n-        <div><!-- message goes here --></div>\n-        <input type=\"hidden\" name=\"cluster\" value=\"\"/>\n-      </form>\n-      <script>\n-        $(document).ready(function() {\n-          initMsgDialog(\"#DbConstructionErrorDeleteForm\", 458);\n-          initMsgDialog(\"#ClusterConstructionErrorDeleteForm\", 458);\n-        });\n-      </script>\n-\n-    </div> <!-- END #mainCol -->\n-\n-    \n-\n-<div class=\"helpTray\">\n-  <a class=\"openHelp\" onclick=\"HelpTray.openHelpTray();\"><div class=\"openHelpButton\"></div></a>\n-  <a class=\"closeHelp\" onclick=\"HelpTray.closeHelpTray();\"><div class=\"closeHelpButton\"></div></a>\n-  <div class=\"defaultHelp\">\n-    <h1></h1>\n-    \n-  </div>\n-</div>\n-\n-<script type=\"application/javascript\">\n-  var HelpTray = {\n-\n-    getHelpDiv: function(topic) {\n-      if(topic) {\n-        var $help = $(\"div.helpTray>div[helpTopic=\"+topic+\"]\");\n-        if($help.length) {\n-          return $help;\n-        } else {\n-          return null;\n-        }\n-      } else {\n-        return $(\"div.helpTray>div.defaultHelp\");\n-      }\n-    },\n-\n-    openHelpTray: function(topic) {\n-      var $help = HelpTray.getHelpDiv(topic);\n-      if((topic && $help) || (!topic && !$(\"div.helpTray\").hasClass(\"reveal\"))) {\n-        // hide all help divs\n-        $(\"div.helpTray>div\").hide();\n-        // show the specified one\n-        $help.show();\n-        // reveal the tray\n-        $(\"div.helpTray\").addClass(\"reveal\");\n-      }\n-    },\n-\n-    closeHelpTray: function() {\n-      $(\"div.helpTray\").removeClass(\"reveal\");\n-    },\n-\n-    addHelpTopic: function(topicId, title, paragraphs) {\n-      var $helpTray = $(\"div.helpTray\");\n-      $helpTray.append('<div helpTopic=\"'+topicId+'\"/>');\n-      HelpTray.appendHelpContent(topicId, title, paragraphs);\n-    },\n-\n-    appendHelpContent: function(topicId, title, paragraphs) {\n-      var $help = HelpTray.getHelpDiv(topicId);\n-      if($help.length) {\n-        if(title) {\n-          $help.append('<h1>'+title+'</h1>');\n-        }\n-        if(paragraphs) {\n-          for(var i in paragraphs) {\n-            $help.append('<p>'+paragraphs[i]+'</p>');\n-          }\n-        }\n-      }\n-    },\n-\n-    bindHelpTopic: function(topicId, query) {\n-      var $elem = query;\n-      if(typeof $elem == \"string\") {\n-        $elem = $(query);\n-      }\n-      if($elem.length) {\n-        $elem.addClass(\"helpBound link\");\n-        $elem.click(function(event) {\n-          event.stopPropagation();\n-          HelpTray.openHelpTray(topicId);\n-        });\n-      }\n-    },\n-\n-    setDefaultHelpTitle: function(title) {\n-      HelpTray.getHelpDiv().find(\"h1\").html(title);\n-    },\n-\n-    setDefaultHelpText: function(paragraphs) {\n-      // remove existing text\n-      var $help = HelpTray.getHelpDiv();\n-      $help.find(\"p\").remove();\n-      // add new text\n-      for(var i in paragraphs) {\n-        $help.append('<p>'+paragraphs[i]+'</p>');\n-      }\n-    }\n-  };\n-\n-  $(document).ready(function() {\n-    // move help tray to the top level of the DOM\n-    $(\"div.helpTray\").appendTo($('body'));\n-\n-    // close help tray when clicking away\n-    $('html').click(function() {\n-      HelpTray.closeHelpTray();\n-    });\n-    // don't close help tray when clicking on help tray\n-    $(\"div.helpTray\").click(function(event) {\n-      event.stopPropagation();\n-    });\n-  });\n-</script>\n-\n-    <script type=\"application/javascript\">\n-      $(document).ready(function() {\n-        // populate help tray\n-        HelpTray.setDefaultHelpTitle(\"Account Home\");\n-        var helpText = [\"This is home base for your MongoLab account.  From this page, you can access each of your MongoDB deployments to view connection info, browse data, manage backups, etc.\", \"To connect to your database(s), use the connection info that is supplied on each database's home page.\",\n-        \"For additional help, please contact us at <a href='mailto:support@mongolab.com'>support@mongolab.com</a>.\"];\n-        \n-        HelpTray.setDefaultHelpText(helpText);\n-\n-        HelpTray.addHelpTopic(\"fileSize\", \"File Size\",\n-            [\n-              \"The file size is the total size of the storage files used for this deployment.  This represents the overall storage footprint for the database(s) on disk.\",\n-              \"For servers running with the <code>smallfiles</code> option (we use this option on our Shared plans), the first file allocated is 16MB, the second 32MB, the third 64MB ... until 512MB is reached at which point each subsequent file is 512MB.\",\n-              \"To see more stats for a given database, please visit the \\\"Stats\\\" tab for that database.  Values are converted using powers of 1024 (versus 1000).\"\n-            ]);\n-        HelpTray.bindHelpTopic(\"fileSize\", $(\"#deploymentsTable th.fileSizeCol\"));\n-\n-        HelpTray.addHelpTopic(\"storageSize\", \"Size (data plus indexes)\",\n-            [\n-              \"The \\\"Size\\\" column represents the total size of all documents in this deployment, including the padding factor.  It also includes the total size of all the indexes.\",\n-              \"To see more stats for a given database, please visit the \\\"Stats\\\" tab for that database.  Values are converted using powers of 1024 (versus 1000).\"\n-            ]);\n-        HelpTray.bindHelpTopic(\"storageSize\", $(\"#deploymentsTable th.sizeCol\"));\n-      });\n-    </script>\n-\n-    <div class=\"clearer\"></div>\n-  </div> <!-- END #colWrapper -->\n-\n-\n-  \n-  <!-- NOTE: the _setCustomVar for Google Analytics custom variables *must* go before the _trackPageview in the footer -->\n-  <!-- Google Analytics: Custom Variable -->\n-<!-- https://developers.google.com/analytics/devguides/collection/gajs/gaTrackingCustomVariables -->\n-<script type=\"text/javascript\">\n-\n-  var domain = window.location.hostname\n-  if (domain.indexOf(\"mongolab.com\") !== -1) {\n-\n-  if (_gaq == undefined) {\n-    var _gaq = _gaq || [];\n-    _gaq.push(['_setAccount', 'UA-307557-3']);\n-  }\n-\n-  _gaq.push(['_setCustomVar',\n-    1,                // This custom var is set to slot #1.  Required parameter.\n-    'account_status', // The name of the custom variable.  Required parameter.\n-    'HAS_ACCOUNT',    // Sets the value of the custom variable.\n-    1                 // Sets the scope to visitor-level.\n-  ]);\n-\n-  }\n-  else {\n-    console.debug(\"Did not push HAS_ACCOUNT to GA b/c domain doesn't contain mongolab.com...\")\n-  }\n-\n-</script>\n-\n-<!-- Google: \"Site Visitor\" -->\n-<!-- Place the code for #2 (User) on pages that only signed in users see.  If there is a key page that all signed in users are likely to visit, you can put the code on that page only. -->\n-<script type=\"text/javascript\">\n-  /* <![CDATA[ */\n-var google_conversion_id = 971843581;\n-var google_conversion_language = \"en\";\n-var google_conversion_format = \"3\";\n-var google_conversion_color = \"ffffff\";\n-var google_conversion_label = \"4ScRCKPijQQQ_c-0zwM\";\n-var google_conversion_value = 0;\n-/* ]]> */\n-</script>\n-<script type=\"text/javascript\" src=\"https://www.googleadservices.com/pagead/conversion.js\">\n-</script>\n-<noscript>\n-  <div style=\"display:inline;\">\n-    <img height=\"1\" width=\"1\" style=\"border-style:none;\" alt=\"\" src=\"https://www.googleadservices.com/pagead/conversion/971843581/?value=0&amp;label=4ScRCKPijQQQ_c-0zwM&amp;guid=ON&amp;script=0\"/>\n-  </div>\n-</noscript>\n-\n-  \n-  \n-\n-</div> <!-- END #body -->\n-<div id=\"footerWrapper\" style=\"display: none\">\n-  \n-\n-\n-\n-    \n-      <div id=\"preFooterBar\">\n-  <div class=\"wrap\">\n-    <div class=\"logo\">\n-      <a href=\"/\"><img src=\"/base/img/mongolab-logo-146x38.png\" height=\"38\" width=\"146\" alt=\"MongoLab\" /></a>\n-    </div>\n-    <div class=\"links marketingContent\" style=\"display:block;\">\n-      <span class=\"message\">Get 500 MB <strong>FREE</strong></span>\n-      <a onclick=\"gotoSignupWithSourceParam();\" class=\"signup\">Sign up</a>\n-    </div>\n-    <div class=\"clearer\"></div>\n-  </div>\n-</div>\n-\n-      <div id=\"footer\">\n-  <div class=\"wrap\">\n-    <div class=\"siteLinks\">\n-      <ul>\n-        <li>\n-          <strong>Company</strong>\n-          <ul>\n-            <li class=\"marketingLinks\"><a href=\"/company\">About MongoLab</a></li>\n-            <li><a href=\"http://blog.mongolab.com\" target=\"_blank\">Blog</a></li>\n-            <li><a href=\"http://mongolab.org\" target=\"_blank\">Open-source Projects</a></li>\n-          </ul>\n-        </li>\n-        <li class=\"marketingLinks\">\n-          <strong>Plans</strong>\n-          <ul>\n-            <li><a href=\"/plans\">Features</a></li>\n-            <li><a href=\"/plans/pricing\">Pricing</a></li>\n-          </ul>\n-        </li>\n-        <li style=\"margin-left:-38px;\">\n-          <strong>Support</strong>\n-          <ul>\n-            <li><a href=\"http://status.mongolab.com\">MongoLab Status</a></li>\n-            <li><a href=\"http://docs.mongolab.com\">Documentation</a></li>\n-            <li><a href=\"https://support.mongolab.com/anonymous_requests/new\">Ask a Question</a></li>\n-          </ul>\n-        </li>\n-        <li>\n-          <strong>Clouds</strong>\n-          <ul>\n-            <li><a href=\"/aws\">Amazon (AWS)</a></li>\n-            <li><a href=\"/lp/mongodb-on-azure\">Azure</a></li>\n-            <li><a href=\"/google\">Google</a></li>\n-            <li><a href=\"https://www.joyent.com/products/compute-service\">Joyent</a></li>\n-            <li><a href=\"http://www.rackspace.com/cloud/\">Rackspace</a></li>\n-          </ul>\n-        </li>\n-        <li class=\"share\">\n-          <strong>Community</strong>\n-          <ul>\n-            <li>\n-              <a style=\"margin-right:3px;\" href=\"https://twitter.com/mongolab\"><img src=\"/base/img/icon_twitter.png\" width=\"26\" height=\"26\" /></a>\n-              <a style=\"margin-right:3px;\" href=\"https://www.facebook.com/MongoLab\"><img src=\"/base/img/icon_facebook.png\" width=\"26\" height=\"26\" /></a>\n-              <a href=\"https://plus.google.com/+MongoLab\"><img src=\"/base/img/icon_googleplus.png\" width=\"24\" height=\"24\" style=\"margin-left:2px; margin-bottom:2px;\"/></a>\n-            </li>\n-          </ul>\n-        </li>\n-<li><font size=1><a href=\"https://safeharbor.export.gov/list.aspx\" target=â_blankâ>We self-certify </br>compliance with:</font></a>\n-          <a href=\"http://export.gov/safeharbor/\" target=\"_blank\"><img src=\"/base/img/safe-harbor.png\" alt=\"U.S.-EU & U.S.-Swiss Safe Harbor\" /></a>\n-        </li>\n-      </ul>\n-    </div>\n-    <div class=\"clearer\"></div>\n-    <div class=\"powered\">\n-      <a href=\"http://mongodb.org\" target=\"_blank\"><img src=\"/base/img/powered-by-mongoDB.png\" alt=\"powered by MongoDB\" /></a>\n-    </div>\n-    <div class=\"copyright\">\n-      &copy; 2014 <a style=\"margin-left:0px;\"href=\"http://objectlabs.com\">ObjectLabs Corporation</a> <a href=\"/company/legal/tos\">Terms of Service</a><a href=\"/company/legal/privacy\">Privacy Policy</a>\n-    </div>\n-    <div class=\"clearer\"></div>\n-  </div>\n-</div>\n-\n-<script type=\"text/javascript\">\n-<!-- begin SnapEngage code -->\n-  // SnapEngage widget\n-  // (please note additional changes to this widget in portal's footer.jsp file)\n-  (function() {\n-    var se = document.createElement('script'); se.type = 'text/javascript'; se.async = true;\n-    se.src = '//commondatastorage.googleapis.com/code.snapengage.com/js/43487a64-584c-49c5-a8c9-1766b6316043.js';\n-    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(se, s);\n-  })();\n-<!-- end SnapEngage code -->\n-\n-  var domain = window.location.hostname\n-  if (domain.indexOf(\"mongolab.com\") !== -1) {\n-\n-  // Google Analytics tracker for mongolab.com\n-  if (_gaq == undefined) {\n-    var _gaq = _gaq || [];\n-    _gaq.push(['_setAccount', 'UA-307557-3']);\n-    _gaq.push(['_trackPageview']);\n-  }\n-  else {\n-    _gaq.push(['_trackPageview']);\n-  }\n-  }\n-  else {\n-    console.debug(\"Did not push trackPageview to GA b/c domain doesn't contain mongolab.com...\")\n-  }\n-\n-  (function() {\n-  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;\n-  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';\n-  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);\n-  })();\n-</script>\n-\n-\n-\n-\n-      <!-- set user email in SnapEngage widget -->\n-      \n-        <script type=\"text/javascript\">\n-          // SnapEngage widget\n-          // (please this is also in footer.html)\n-          (function() {\n-            var se = document.createElement('script'); se.type = 'text/javascript'; se.async = true;\n-            se.src = '//commondatastorage.googleapis.com/code.snapengage.com/js/43487a64-584c-49c5-a8c9-1766b6316043.js';\n-            var done = false;\n-            se.onload = se.onreadystatechange = function() {\n-              if (!done&&(!this.readyState||this.readyState==='loaded'||this.readyState==='complete')) {\n-                done = true;\n-                SnapABug.setUserEmail('pasrivas@syr.edu', true);\n-              }\n-            };\n-            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(se, s);\n-          })();\n-        </script>\n-      \n-    \n-    \n-\n-\n-<!-- if logged in hide signup-related links-->\n-\n-    <script type=\"text/javascript\">hideSignupRelatedLinks();</script>\n-\n-\n-<!-- hide products/pricing pages if it's not ok to see them -->\n-\n-\n-\n-\n-\n-\n-</div>\n-</body>\n-\n-\n-\n-<script type=\"text/javascript\">\n-\n-  function getSubscriptionUrl(type, id) {\n-    var $row = getSubscriptionRow(id);\n-    if($row.hasClass(\"subscriptionStatus-error\")) {\n-      return null;\n-    }\n-    var url = \"/\"+$row.attr(\"linkId\");\n-    if(type == \"db\" || type == \"database\") {\n-      url = \"/databases\"+url;\n-    } else if(type == \"cluster\") {\n-      url = \"/clusters\"+url;\n-    } else if(type == \"server\") {\n-      url = \"/servers\"+url;\n-    } else if(type == \"remote\") {\n-      url = \"/connections\"+url;\n-    } else {\n-      return null;\n-    }\n-    return url;\n-  }\n-\n-  function linkifyCell($cell, link) {\n-    $cell.html('<a href=\"'+link+'\">'+$cell.html()+'</a>')\n-  }\n-\n-  function toggleStatusDetail(subId) {\n-    var $row = getSubscriptionRow(subId);\n-    // only operate if the expander button is visible\n-    if($row.length && $row.find(\".expanderCol .expanderIcon:visible\").length) {\n-      if($row.hasClass(\"showDetail\")) {\n-        $row.removeClass(\"showDetail\");\n-      } else {\n-        $row.addClass(\"showDetail\");\n-      }\n-      syncAllStatusToggler();\n-    }\n-  }\n-\n-  function syncAllStatusToggler() {\n-    var $toggler = $(\"tr.headers .expanderIcon\");\n-    var $table = $(\"#deploymentsTable\");\n-    var numStatus = $table.find(\"tr.subscriptionRow .expanderIcon:visible\").length;\n-    if(numStatus) {\n-      var numOpen = $table.find(\"tr.subscriptionRow.showDetail .statusDetail\").length;\n-      if(numStatus > numOpen) {\n-        $toggler.css(\"visibility\", \"visible\");\n-      } else {\n-        $toggler.css(\"visibility\", \"hidden\");\n-      }\n-    } else {\n-      $toggler.css(\"visibility\", \"hidden\");\n-    }\n-  }\n-\n-  function showAllStatus() {\n-    if($(\"#deploymentsTable .expanderIcon:visible\").length) {\n-      $(\"#deploymentsTable tr.subscriptionRow\").each(function() {\n-        showStatusDetail($(this).attr(\"subscriptionId\"));\n-      });\n-    }\n-  }\n-\n-  function hideAllStatus() {\n-    if($(\"#deploymentsTable .expanderIcon:visible\").length) {\n-      $(\"#deploymentsTable tr.subscriptionRow\").each(function () {\n-        hideStatusDetail($(this).attr(\"subscriptionId\"));\n-      });\n-    }\n-  }\n-\n-  function showStatusDetail(subId) {\n-    var $row = getSubscriptionRow(subId);\n-    // only operate if the expander button is visible\n-    if($row.length && $row.find(\".expanderCol .expanderIcon:visible\").length) {\n-      if(!$row.hasClass(\"showDetail\")) {\n-        $row.addClass(\"showDetail\");\n-        syncAllStatusToggler();\n-      }\n-    }\n-  }\n-\n-  function hideStatusDetail(subId) {\n-    var $row = getSubscriptionRow(subId);\n-    // only operate if the expander button is visible\n-    if($row.length && $row.find(\".expanderCol .expanderIcon:visible\").length) {\n-      if($row.hasClass(\"showDetail\")) {\n-        $row.removeClass(\"showDetail\");\n-        syncAllStatusToggler();\n-      }\n-    }\n-  }\n-\n-  // asynchronously fetch all statuses\n-  function loadAllSubscriptionStatuses() {\n-    $(\"#deploymentsTable tr.subscriptionStatus-loading\").each(function() {\n-      loadSubscriptionRowStatus($(this));\n-    });\n-  }\n-\n-  function loadSubscriptionRowStatus($row) {\n-    var id = $row.attr(\"subscriptionId\");\n-    var type = $row.attr(\"subscriptionType\");\n-    if(type === \"cluster\") {\n-      HomeLanding.loadCluster(id, \"HyDTfe2yMeS_dKYK8zSCc4p7qjwdXHUg\");\n-    } else if (type == \"db\") {\n-      HomeLanding.loadDatabaseSubscription(id, \"HyDTfe2yMeS_dKYK8zSCc4p7qjwdXHUg\");\n-    }\n-  }\n-\n-  function revealContent() {\n-    $(\"#colWrapper\").show();\n-    $(\"#footerWrapper\").show();\n-  }\n-\n-  $(document).ready(function() {\n-    var $table = $(\"#deploymentsTable\");\n-\n-    // linkify the clickable cells\n-    $table.find(\"tr.subscriptionRow\").each(function() {\n-      var link = getSubscriptionUrl($(this).attr(\"subscriptionType\"), $(this).attr(\"subscriptionId\"));\n-      $(this).find(\".linkCol\").each(function() {\n-        linkifyCell($(this), link);\n-      });\n-    });\n-\n-    //linkify remote connection rows\n-    $(\"#remoteConnectionsTable\").find(\"tr.subscriptionRow\").each(function() {\n-      var link = \"/connections/\"+$(this).find(\".idCol\").html();\n-      $(this).find(\".linkCol\").each(function() {\n-        linkifyCell($(this), link);\n-      });\n-    });\n-\n-    revealContent();\n-\n-    syncAllStatusToggler();\n-    loadAllSubscriptionStatuses();\n-\n-    // set up tooltips\n-    $table.find(\"td\").mousemove(function(event) {\n-      var $tooltip = $(this).find(\".tooltip\");\n-      if($tooltip.length) {\n-        $tooltip.css(\"left\", (event.clientX+20)+\"px\");\n-        $tooltip.css(\"top\", (event.clientY-10)+\"px\");\n-      }\n-    });\n-\n-    // listen for status changes\n-    $table.find(\"tr\").on(\"updateStatus\", function(event) {\n-      syncAllStatusToggler();\n-    });\n-  });\n-</script>"
    },
    {
      "sha": "b7670087b7ade8105e729f81daf40f3cb6ce5b71",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/8049f475ee1a00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 77,
      "changes": 77,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/8049f475ee1a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/8049f475ee1a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/8049f475ee1a00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,77 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n- \n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>CouchDB Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select id=\"deplist\" onchange=\"test();\">\n-                 \t\t\n-                  \t\t{% for car in obj %}\n-                     \t\t<option value=\"{{ car.tag }}\">{{car.tag}}</option>\n-                  \t\t{% endfor %} \n-\t\t\t    </select>\n-                </div>\n-            </fieldset>       \n-       \n-       \t\t<script name = \"text/javascript\">\n-          \n-      \t\t\t function getSelectedText(elementId) {\n-              \t\t\t  var elt = document.getElementById(elementId);\n-\n-               \t\t\t if (elt.selectedIndex == -1)\n-                    \t\treturn null;\n-\n-               \t\t\treturn elt.options[elt.selectedIndex].text;\n-       \t\t\t } \n-       \n-\t\t\t\t function test()\n-\t\t\t\t {\n-\t\t\t\t\t{% for car in obj %}\n-\t\t\t\t\t     var temp = getSelectedText(\"deplist\")\n-\t\t\t \t\t     temp = temp.trim()\n-\t\t\t\t\t     \n-\t\t\t\t\t     {% if  temp|stringformat:\"d\" == car.tag|stringformat:\"s\" %}\n-\t\t           \t\t \tdocument.getElementById('demo').innerHTML = \"{{car.tag}}\"\n-\t\t          \t\t {% endif %}\n-\t\t\t\t\t\n-\t\t\t\t\t{% endfor %}\n-\n-\t\t\t\t }\n-\t\t\t\t \n-\t\t    </script> \n-\n-\t\t\t<p id = \"demo\"> </p>    \n-\t\t        \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "63e071a4b649619083daac84c8a8e6e733514609",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/900931c1ea2000141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 170,
      "changes": 170,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/900931c1ea2000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/900931c1ea2000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/900931c1ea2000141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,170 +0,0 @@\n-<table id =\"AWS\">\n-        <tbody>\t\n-               <tr>\n-                   <td>\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   </td>\n-                   <td>\n-                \t\t<h3>Enter the deployment name</h3>\n-                   </td>\n-                   <td>\n-                \t    <input name=\"depname\" type = \"text\">\n-                   </td>\n-               \t\n-                   <td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   </td>\n-                   \n-                   <td>\n-\t\t     \t\t\t<h3>AWS Access Key</h3>\n-\t\t\t\t   </td>\n-\t\t\n-\t\t\t\t   <td>\n-\t\t     \t\t\t<input type=\"text id=\"ackey\"/>\n-\t\t\t\t   </td>\n-\t          </tr>\n-              \n-              <tr>  \t\n-                   <td>\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   </td> \n-                   <td>\n-                \t\t<h3>Number of servers</h3>\n-                   </td>\n-                   <td>\n-                \t\t<input name=\"cpus\" type = \"text\">\n-                   </td>\n-               \n-                   <td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   </td>\n-                   \n-                   <td>\n-                \t\t<h3>AWS Secret Key</h3>\n-                   </td>\n-                   <td>\n-                \t\t<input name=\"seckey\" type = \"seckey\">\n-                   </td>\n-              </tr>\n-              \n-              <tr>\n-                  <td>\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                   \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                  </td>\n-                  <td>\n-\t\t\t\t\t\t<h3>Select a region</h3>\n-\t\t\t\t  </td>\n-\t\t\t\t\n-\t\t\t\t\t<td> \n-\t\t\t\t\t\t<select name=\"loc\">\n-\t   \t\t\t\t\t\t<option>East</option>\n-\t   \t\t\t\t\t\t<option>West</option>\n-\t   \t\t\t\t\t\t<option>SouthEast</option>\n-\t\t\t\t\t\t</select>\n-\t\t\t\t\t</td>\n-\t\t\t\t\t\t\n-\t    \t\t  \t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                  \t</td>\n-                  \n-                  \t<td>\n-\t\t\t\t\t\t<h3>Enter the keyname</h3>\n-\t\t\t\t\t</td>\n-\t\t\t\t\n-\t\t\t\t  \t<td> \n-\t\t\t\t\t\t<input type =\"text\" name=\"keyname\" id=\"keyname\"/>\n-\t\t\t\t  \t</td>\t\n-\t\t\t   </tr>\n-\t\t\n-\t\t        <tr>\n-\t    \t\t\t<td>\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-        \t\t\t</td>\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t<h3>Select a machine</h3>  \n-\t\t\t\t\t</td>\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t<select name=\"machine\">\n-\t    \t\t\t\t\t\t<option>m1.large</option>\n-\t    \t\t\t\t\t\t<option>m3.large</option>\n-\t    \t\t\t\t\t\t<option>m1.small</option>\n-\t\t\t\t\t\t</select>       \n-\t\t\t\t\t</td>\n-\t\t\t  \n-\t\t\n-\t\t\t\t\t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    \n-                \t</td>\n-                    \n-                    <td>\n-\t\t\t\t\t\t<h3>Path of the key file</h3>  \n-\t\t\t\t\t</td>\n-\t\t\t\t</tr>\n-\t\t\t\t\n-\t\t\t\t<tr>\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t<select name=\"machine\">\n-\t    \t\t\t\t\t\t<option>m1.large</option>\n-\t    \t\t\t\t\t\t<option>m3.large</option>\n-\t    \t\t\t\t\t\t<option>m1.small</option>\n-\t\t\t\t\t\t</select>       \n-\t\t\t\t\t</td>\n-                \t\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t\t<h3>Image</h3>\n-\t\t\t\t\t</td>\n-\t\t\t\t\t<td>\n-\t\t\t\t\t\t\t<select name=\"cbserver\">\n-\t    \t\t\t\t\t  \t<option>Linux</option>\n-\t    \t\t\t\t\t\t<option>Windows</option>\n-\t    \t\t\t\t\t</select>\n-\t    \t\t\t</td>\n-\t    \t\n-\t\t\t\t\t <td>\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               \t\t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-        \t\t\t</td>\n-        \t\t</tr>\n-\t\t</tr>\n-\t\n-\t<tr>\n-\t\n-\t    <td>\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-               &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-        </td>\n-\t\t<td>\n-\t\t     <h3>AWS Secret Key</h3>\n-\t\t</td>\n-\t\t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                \t    \n-        </td>\n-\t\t<td>\n-\t\t     <input type=\"text id=\"s\"/>\n-\t\t</td>\n-\t</tr>\n-  </tbody>\n-</table>    \n-\t\t\n\\ No newline at end of file"
    },
    {
      "sha": "523b4f85fcd41dd032528fd3d83a4e4827255f68",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/90641a67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 41,
      "changes": 41,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/90641a67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/90641a67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/90641a67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,41 +0,0 @@\n-# read 10M load, 1M hot reload, 4M access creates, draining\n-# speed limit = 4k per node\n-#\n-# system memory: 20G per node\n-\n-performance.eperf.EPerfClient.test_eperf_read\n-\n-params:\n-\n-# general\n-batch=50\n-kind=nonjson\n-mem_quota=20000\n-spec=read-suv-2-7\n-\n-# load phase\n-hot_init_items=1000000\n-items=10000000\n-\n-# access phase\n-# Read:Insert:Update:Delete Ratio = 90:3:6:1.\n-ratio_sets=0.1\n-ratio_misses=0.05\n-ratio_creates=0.30\n-ratio_deletes=0.1428\n-ratio_hot=0.05\n-ratio_hot_gets=0.99\n-ratio_hot_sets=0.99\n-ratio_expirations=0.005\n-max_creates=4000000\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-load_wait_until_drained=1\n-loop_wait_until_drained=0\n-mcsoda_heartbeat=3\n-mcsoda_max_ops_sec=4000\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "f51d0ed84d55de433274b2f426ad8b1f7e6ca44c",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/a0740967b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 41,
      "changes": 41,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/a0740967b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/a0740967b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/a0740967b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,41 +0,0 @@\n-# mixed suv 100M load, 2M hot reload, 1M access creates\n-# speed limit = 1k per client\n-# num clients = 30\n-# DGM\n-#\n-performance.eperf.EPerfClient.test_eperf_mixed\n-\n-params:\n-\n-# general\n-batch=50\n-kind=nonjson\n-mem_quota=20000\n-db_compaction=50\n-\n-# load phase\n-hot_init_items=2000000\n-items=100000000\n-\n-# access phase\n-# Read:Insert:Update:Delete Ratio = 50:4:40:6.\n-ratio_sets=0.5\n-ratio_misses=0.05\n-ratio_creates=0.08\n-ratio_deletes=0.13\n-ratio_hot=0.05\n-ratio_hot_gets=0.99\n-ratio_hot_sets=0.99\n-ratio_expirations=0.03\n-max_creates=1000000\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-load_wait_until_drained=1\n-loop_wait_until_drained=0\n-mcsoda_heartbeat=3\n-mcsoda_max_ops_sec=1000\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "be4c18e3b4e3206a1cecb544017c94ce91093116",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/b068b7c0871a00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 49,
      "changes": 49,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/b068b7c0871a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/b068b7c0871a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/b068b7c0871a00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,49 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n-\n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>CouchDB Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select id=\"deplist\">\n-                 \n-                  <option> {{obj.tag[0]}} </option>\n-                  <option> {{obj[1].tag}}</option>\n-                  <option> {{obj[2].tag}}</option>\n-                  <option> {{obj[3].tag}}</option>\n-\t\t\t    </select>\n-                </div>\n-            </fieldset>   \n-            \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "898f8e2bb5112c3b0ba14199231b3e76033b7fbe",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/b0c9aec8711b00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 212,
      "changes": 212,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/b0c9aec8711b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/b0c9aec8711b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/b0c9aec8711b00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,212 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-\n-\n-\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = password = ''\n-    if request.POST:\n-        '''\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            state = \"Your username and/or password were incorrect.\"\n-            return render_to_response(\"message.html\",{'state':state, 'username': username})\n-            '''\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        result = cb.get(\"user::piushs\").value\n-        \n-        \n-        \n-        if (result['password1'] == password) :\n-                request.session['username'] = username\n-                return render_to_response(\"deployments.html\",{'result':result})\n-        else :\n-                return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})            \n- \n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                            \n-   # obj = ([{'tag' : \"dep1\"}, {'tag':\"dep2\"}, {'tag':\"dep3\"}, {'tag' : \"dep4\"}])\n-    return render_to_response('deployments.html', {'result' :result})\n-\n-@csrf_exempt\n-def couchdep(request) :\n-    return render_to_response('couchdbdep.html')\n-\n-\n-@csrf_exempt\n-def deploy(request):\n-    \n-    \n-    username = request.session['username']\n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    \n-    result = cb.get(\"user::{0}\".format(username))\n-    \n-    \n-    depname = request.POST.get('depname')\n-    cpus = request.POST.get('cpus')\n-    provider = request.POST.get('provider')\n-    loc = request.POST.get('loc')\n-    mc = request.POST.get('machine')\n-    cbs = request.POST.get('machine')    \n-    result = json.loads(result)\n-    print result['username']\n-\n-    if result['deploy'] == None:\n-        result['deploy'] = [{'name':depname,'Provider':provider,'cpu': cpus,'cbi':cbs, 'loc':loc, 'mc':mc}]\n-    else :\n-        result['deploy'].append({'name':depname,'Provider':provider,'cpu': cpus,'cbi':cbs, 'loc':loc, 'mc':mc})\n-    \n-              \n-    cb.set(\"user::{0}\".format(username), result)\n-    \n-    '''\n-    location = request.POST.get(\"loc\")\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"cpus\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node\n-    \n-    \n-    \n-    path = os.getcwd() \n-    print path\n-    os.chdir(path + \"/auth/testrunner\")\n-    os.system('pwd')\n-    \n-    os.system('python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-966-rel,amazon=true')\n-    os.chdir(path)\n-    '''\n-    '''\n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/Users/piush/Key/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    Config.set('servers','1',\"ec2-54-211-242-217.compute-1.amazonaws.com\")\n-    Config.set('servers','2', \"ec2-54-87-163-83.compute-1.amazonaws.com\")\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    '''\n-    \n-    return HttpResponse(\"Deployment Successful\")\n\\ No newline at end of file"
    },
    {
      "sha": "00faca584b1c4baa5f37d11106d114d657d5a531",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/c08ecc25031c00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 454,
      "changes": 454,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/c08ecc25031c00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/c08ecc25031c00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/12/c08ecc25031c00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,454 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-from time import sleep\n-\n-\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = password = ''\n-    if request.POST:\n-        '''\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            state = \"Your username and/or password were incorrect.\"\n-            return render_to_response(\"message.html\",{'state':state, 'username': username})\n-            '''\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        result = cb.get(\"user::piushs\").value\n-        \n-        \n-        \n-        if (result['password1'] == password) :\n-                request.session['username'] = username\n-                return render_to_response(\"deployments.html\",{'result':result})\n-        else :\n-                return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})            \n- \n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    return render_to_response('deployments.html', {'result' :result})\n-\n-@csrf_exempt\n-def couchdep(request) :\n-    return render_to_response('couchdbdep.html')\n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-        \n-def aws_mkfile(nodesup):\n-\n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/Users/piush/Key/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),a)\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    \n-\n-@csrf_exempt\n-def deploy(request):\n-    \n-    \n-    username = request.session['username']\n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    result = json.loads(result)\n-\n-    depname = request.POST.get('depname')\n-    cpus = request.POST.get('cpus')\n-    provider = request.POST.get('provider')\n-    loc = request.POST.get('loc')\n-    mc = request.POST.get('machine')\n-    cbs = request.POST.get('machine')    \n-    \n-    \n-    \n-    \n-    location = request.POST.get(\"loc\")\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"cpus\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    \n-    bucket =[]\n-    vms = []\n-    \n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id})\n-        \n-    bucket.append ({ 'name' : \"default\", 'vm':vms });\n-    \n-    print \"hehhr\" \n-    print result\n-\n-    if result['deploy'] == None:\n-        print \"1\"\n-        result['deploy'] = [{'name':depname,'Provider':provider,'cpu': cpus,'cbi':cbs, 'loc':loc, 'mc':mc, 'bucket': bucket}]\n-    else :\n-        print \"2\"\n-        result['deploy'].append({'name':depname,'Provider':provider,'cpu': cpus,'cbi':cbs, 'loc':loc, 'mc':mc, 'bucket' : bucket})\n-    \n-    \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    aws_mkfile(nodesup)\n-   \n-    sleep (120) \n-    path = os.getcwd() \n-    print path\n-    os.chdir(path + \"/auth/testrunner\")\n-    os.system('pwd')\n-    \n-    os.system('python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-966-rel,amazon=true')\n-    os.chdir(path)\n-    \n-    \n-    return render_to_response(\"managecluster.html\", {'bucket' : bucket})\n-\n-@csrf_exempt\n-def mngcluster(request):\n-    \n-    request.session['deploymentname'] = request.POST.get('deplist')\n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = request.session['username']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-    dep = request.POST.get('deplist')\n-    print dep\n-   # result = json.loads(result)\n-    \n-    print result['deploy'][0]\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['name'] == dep:\n-            temp = res\n-            break\n-    \n-    return render_to_response(\"managecluster.html\", {'bucket':temp['bucket']})\n-\n-\n-@csrf_exempt\n-def mngviewDel(request):\n-\n-    username = request.session['username']\n-    dep = request.session ['deploymentname']\n-    bucket = request.POST.get(\"bucket\")\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['name'] == dep:\n-            temp = res\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    tempbucket= {}\n-    bucketIndex = 0\n-    for res in temp['bucket'] :\n-        if res['name'] == bucket:\n-            tempbucket = res\n-            break\n-        bucketIndex = bucketIndex + 1\n-    \n-    \n-    location = temp['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    nodes = driver.list_node()\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"number\")\n-    a=0\n-    \n-    n = int(y)\n-    while a < n :\n-        \n-        for node in nodes :\n-                if node.id == 0 :\n-                    \n-        driver.destroy_node(delnode)\n-        del result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'] [a]\n-        a = a+1;\n-    \n-         \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    return HttpResponse(\"Operation Successful\")\n-    \n-    \n-@csrf_exempt\n-def mngviewAdd(request):\n-    \n-\n-    username = request.session['username']\n-    dep = request.session ['deploymentname']\n-    bucket = request.POST.get(\"bucket\")\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['name'] == dep:\n-            temp = res\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    tempbucket= {}\n-    bucketIndex = 0\n-    for res in temp['bucket'] :\n-        if res['name'] == bucket:\n-            tempbucket = res\n-            break\n-        bucketIndex = bucketIndex + 1\n-    \n-    \n-    location = temp['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"number\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    vms = tempbucket['vm']\n-    \n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id})\n-        \n-    result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'] = vms\n-    \n-        \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    aws_mkfile(nodesup)\n-   \n-    sleep (600) \n-    path = os.getcwd() \n-    print path\n-    os.chdir(path + \"/auth/testrunner\")\n-    os.system('pwd')\n-    \n-    os.system('python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-966-rel,amazon=true')\n-    os.chdir(path)\n-    \n-    \n-    return HttpResponse (\"Action Successful\")\n\\ No newline at end of file"
    },
    {
      "sha": "6d546fa6e3c8f19e8809a420d38b7daf658a3dfe",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/00495140b11a00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 193,
      "changes": 193,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/00495140b11a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/00495140b11a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/00495140b11a00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,193 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    username = password = ''\n-    if request.POST:\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            state = \"Your username and/or password were incorrect.\"\n-            return render_to_response(\"message.html\",{'state':state, 'username': username})\n-\n-    return render_to_response(\"auth.html\",{'state':state, 'username': username})\n-\n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    \n-    \n-    \n-    result = json.loads(result)\n-    print result['username']\n-\n-    if result['deploy'] == None:\n-        result['deploy'] = [{'name':'7','Provider':'3','cpu':'3','cbi':'3'}]\n-    else :\n-        result['deploy'].append({'name':'3','Provider':'3','cpu':'3','cbi':'3'})\n-    \n-    result['deploy'].append({'name':'4','Provider':'3','cpu':'3','cbi':'3'})              \n-                        \n-    \n-    #results['deploy'].add({'name':'1','Provider':'2','cpu':'3','cbi':'4'})\n-    cb.set(\"user::{0}\".format(uname), result)\n-\n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    \n-    print result\n-\n-    obj = [{'tag' : \"dep1\"}, {'tag':\"dep2\"}, {'tag':\"dep3\"}, {'tag' : \"dep4\"}]\n-    return render_to_response('deployments.html', {'obj' :obj})\n-\n-@csrf_exempt\n-def couchdep(request) :    \n-    return render_to_response('couchdbdep.html')\n-\n-\n-@csrf_exempt\n-def deploy(request):\n-    \n-    '''\n-    location = request.POST.get(\"loc\")\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"cpus\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node\n-    '''   \n-    \n-    \n-    path = os.getcwd() \n-    print path\n-    os.chdir(path + \"/auth/testrunner\")\n-    os.system('pwd')\n-    \n-    os.system('python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-966-rel,amazon=true')\n-    os.chdir(path)\n-    \n-    '''\n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/Users/piush/Key/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    Config.set('servers','1',\"ec2-54-211-242-217.compute-1.amazonaws.com\")\n-    Config.set('servers','2', \"ec2-54-87-163-83.compute-1.amazonaws.com\")\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    '''\n-    \n-    return HttpResponse(\"Deployment Successful\")\n\\ No newline at end of file"
    },
    {
      "sha": "10508de101ed6157fc2cc8b48619030f23a55ed7",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/20c40447272700141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 154,
      "changes": 154,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/20c40447272700141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/20c40447272700141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/20c40447272700141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,154 +0,0 @@\n-from azure import *\n-from azure.servicemanagement import *\n-import base64\n-import os\n-\n-import time\n-import datetime\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-def AzureHandler(request):\n-    \n-    subscription_id = request['subid']\n-    certificate_path = '/tmp/azurekey'\n-    \n-    sms = ServiceManagementService(subscription_id, certificate_path)\n-\n-    image_name='5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-65-20140606'\n-    \n-    \n-    \n-    tm = timestamp()\n-    name = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-    label = name\n-    desc = name\n-    location = request['loc']\n-    \n-    sms.create_hosted_service(name, label, desc, location)\n-\n-    i = datetime.datetime.now()\n-    dateVar = '{0}-{1}-{2}'.format(i.year, i.month, i.day)\n-    media_link = 'https://portalvhdsmtcz83fp9vjrb.blob.core.windows.net/vhds/'+ name + '-' + name + '-' +dateVar +'.vhd'\n-    \n-    \n-    \n-    location = request['loc']\n-    linux_user_id='azureuser'\n-    linux_config = LinuxConfigurationSet(name, 'azureuser',user_password=None,disable_ssh_password_authentication=True)\n-    \n-    \n-    azure_config = \"/tmp\" + '/.azure'\n-    cert_data_path = azure_config + \"/myCert.pfx\"\n-    with open(cert_data_path, \"rb\") as bfile:\n-        cert_data = base64.b64encode(bfile.read())\n-    \n-    cert_format = 'pfx'\n-    cert_password = ''\n-    cert_res = sms.add_service_certificate(service_name=name,\n-                                data=cert_data,\n-                                certificate_format=cert_format,\n-                                password=cert_password)\n-    \n-    vars(cert_res)\n-    time.sleep(60)\n-    \n-    \n-    azure_config = \"/tmp\" + '/.azure'\n-    thumbprint_path = azure_config + '/thumbprint'\n-    authorized_keys = \"/home/\" + linux_user_id + \"/.ssh/authorized_keys\" \n-    try:\n-        thumbprint=open(thumbprint_path, 'r').readline().split('\\n')[0]\n-    except:\n-        thumbprint=None\n-    \n-    \n-    publickey = PublicKey(thumbprint, authorized_keys)\n-    linux_config.ssh.public_keys.public_keys.append(publickey)\n-    \n-    print vars(publickey)\n-    print vars(linux_config.ssh.public_keys.public_keys.list_type)\n-    \n-    \n-    \n-    print vars(linux_config.ssh.public_keys)\n-    print vars(linux_config.ssh.key_pairs)\n-    \n-    os_hd  = OSVirtualHardDisk(image_name, media_link)\n-    \n-    print vars(os_hd)\n-    \n-    network = ConfigurationSet()\n-    network.configuration_set_type = 'NetworkConfiguration'\n-    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('ssh', 'tcp', '22', '22'))\n-    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('http', 'tcp','8091','8091'))\n-    '''\n-    portIndex = 0\n-    while portIndex <= 65535:\n-        network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('http', 'tcp', \"{0}\".format(portIndex), \n-                                                                                     '{0}'.format(portIndex)))\n-        portIndex = portIndex + 1\n-    '''\n-    result = sms.create_virtual_machine_deployment(service_name=name,\n-        deployment_name=name,\n-        deployment_slot='production',\n-        label=name,\n-        role_name=name,\n-        system_config=linux_config,\n-        network_config=network,\n-        os_virtual_hard_disk=os_hd,\n-        role_size='Large')\n-    \n-    \n-    cpus = int(request['cpus']) - 1\n-    i=0\n-    while i<cpus:\n-        result = sms.add_role(service_name, deployment_name, role_name2,\n-                              system, os_hd, network)\n-    request_id = result.request_id\n-    print request_id\n-    print result\n-    \n-    print vars(linux_config.ssh.public_keys)\n-    print vars(linux_config.ssh.key_pairs)\n-    \n-    time.sleep (60)\n-    status = sms.get_operation_status(request_id)\n-    try:\n-        print vars(status.error)\n-    except:\n-        print vars(status)\n-    \n-    service_name = name\n-    deployment_name = name\n-    props = sms.get_deployment_by_name(service_name, deployment_name)\n-    vars(props)\n-    \n-    result = sms.list_locations()\n-    for location in result:\n-        print(location.name)\n-    \n-    while True:\n-        deployment = sms.get_deployment_by_slot(name, 'production')\n-    \n-        for instance in deployment.role_instance_list:\n-            print('Instance name: ' + instance.instance_name)\n-            print('Instance status: ' + instance.instance_status)\n-            print('Instance size: ' + instance.instance_size)\n-            print('Instance role name: ' + instance.role_name)\n-            print('Instance ip address: ' + instance.ip_address)\n-            print('')\n-    \n-        time.sleep(20)\n-    node = {\n-            'nodeid':None,\n-            'private_ip':None,\n-            'public_ip': None}\n-    \n-    return node\n-    \n-    "
    },
    {
      "sha": "bb02e51d761c7deb39207fa8251d3e335e048712",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/40d71abeb81b00141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 19,
      "changes": 19,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/40d71abeb81b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/40d71abeb81b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/40d71abeb81b00141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,19 +0,0 @@\n-from django.conf.urls import *\n-\n-#from django.contrib import admin\n-#admin.autodiscover()\n-\n-urlpatterns = patterns('',\n-    # Examples:\n-    # url(r'^$', 'CouchbaseCloud.views.home', name='home'),\n-    # url(r'^blog/', include('blog.urls')),\n-\n-    url(r'^auth/$', 'auth.views.auth_user'),\n-    url(r'^login/$','auth.views.login_user'),\n-    url(r'^signup/$','auth.views.register_user'),\n-    url(r'^create_account/$','auth.views.create_account'),\n-    url(r'^couchdep/$','auth.views.couchdep'),\n-    url(r'^deploy/$','auth.views.deploy'),\n-    url(r'^mngcluster/$','auth.views.mngcluster'),\n-    url(r'^mngview/$','auth.views.mngcluster')\n-)"
    },
    {
      "sha": "6fcf16f1d4a6d6bd75392ad1afb71e4ed513ad73",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/70de0248da1900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 192,
      "changes": 192,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/70de0248da1900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/70de0248da1900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/70de0248da1900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,192 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    username = password = ''\n-    if request.POST:\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            state = \"Your username and/or password were incorrect.\"\n-            return render_to_response(\"message.html\",{'state':state, 'username': username})\n-\n-    return render_to_response(\"auth.html\",{'state':state, 'username': username})\n-\n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    \n-    \n-    \n-    result = json.loads(result)\n-    print result['username']\n-\n-    if result['deploy'] == None:\n-        result['deploy'] = [{'name':'7','Provider':'3','cpu':'3','cbi':'3'}]\n-    else :\n-        result['deploy'].append({'name':'3','Provider':'3','cpu':'3','cbi':'3'})\n-    \n-    result['deploy'].append({'name':'4','Provider':'3','cpu':'3','cbi':'3'})              \n-                        \n-    \n-    #results['deploy'].add({'name':'1','Provider':'2','cpu':'3','cbi':'4'})\n-    cb.set(\"user::{0}\".format(uname), result)\n-\n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    \n-    print result\n-\n-    return render_to_response('deployments.html')\n-\n-@csrf_exempt\n-def couchdep(request) :    \n-    return render_to_response('couchdbdep.html')\n-\n-\n-@csrf_exempt\n-def deploy(request):\n-    \n-    '''\n-    location = request.POST.get(\"loc\")\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"cpus\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node\n-    '''   \n-    \n-    \n-    path = os.getcwd() \n-    print path\n-    os.chdir(path + \"/auth/testrunner\")\n-    os.system('pwd')\n-    \n-    os.system('python scripts/install.py -i /tmp/test.ini -p product=cb,version=3.0.0-966-rel,amazon=true')\n-    os.chdir(path)\n-    \n-    \n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/Users/piush/Key/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    Config.set('servers','1',\"ec2-54-211-242-217.compute-1.amazonaws.com\")\n-    Config.set('servers','2', \"ec2-54-87-163-83.compute-1.amazonaws.com\")\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    '''\n-    \n-    return HttpResponse(\"Deployment Successful\")\n\\ No newline at end of file"
    },
    {
      "sha": "39c10b1731740b9578b7837149164a6931b64f84",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/80dd2a98fe2700141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 416,
      "changes": 416,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/80dd2a98fe2700141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/80dd2a98fe2700141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/80dd2a98fe2700141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,416 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-from pprint import pprint\n-\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-@csrf_exempt  \n-def getRamSize(request):\n-    \n-    cb = Couchbase.connect(bucket=\"default\", host = \"localhost\")\n-    \n-    result = cb.get(\"Machine\").value\n-    try:\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-\n-    c = result[request.POST.get('provider')][request.POST.get('machine')]\n-    return HttpResponse(c)\n-    \n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb= Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-    diction = {\"AWS\":{'m3.large': '3584'}, \"GCE\":{\"n1-highmem-4\":'3584', \"n1-highmem-8\":'3584'},\n-               \"RackSpace\":{\"8GB Standard Instance\":'3584'}, \"Azure\" :{\"Large\" : '3584'}}\n-    cb.set (\"Machine\", diction )\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = password = ''\n-    if request.POST:\n-        \n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        try :\n-            result = cb.get(\"user::{0}\".format(username)).value\n-            print result\n-            \n-            try :\n-                store = result\n-                result = json.loads(result)  \n-            except:\n-                result = store\n-                  \n-            session = {}\n-        \n-            if (result['password1'] == password) :\n-                session['username'] = username\n-                cb.set(\"SessionDetails::{0}::{1}\".format(username, timestamp()),session)\n-                return render_to_response(\"deployments.html\",{'result':result})\n-            else :\n-                return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})  \n-        except:\n-               return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})        \n- \n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    session = {}\n-        \n-    session['username'] = uname\n-    cb.set(\"SessionDetails\",session)\n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    return render_to_response('deployments.html', {'result' :result})\n-\n-@csrf_exempt\n-def handleProgress(request):\n-    \n-    cb = Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-    res = cb.get(\"SessionDetails\").value\n-    username = res['username']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    return render_to_response('deployments.html',{'result':result})\n-\n-@csrf_exempt\n-def couchdep(request) :\n-    return render_to_response('couchdbdep.html')\n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-        \n-        \n-def save_dep_GCE(storeReq,request):\n-    \n-    testFile = request.FILES['permission']\n-    textf = testFile.read()\n-    \n-    fp = open('/tmp/PRIV.pem','w')    \n-    fp.write(textf)\n-    fp.close()\n-        \n-\n-@csrf_exempt\n-def save_deployment(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get(\"SessionDetails\").value\n-    \n-    if (result != None):\n-        username = result['username']\n-    \n-    result['deploymentname'] = request.POST.get('depname')\n-    \n-    cb.set(\"SessionDetails\",result)\n-   \n-    provider = request.POST.get('provider')\n-    \n-    'Use the parameters in the request for creating instances'\n-    \n-    if provider == \"AWS\":\n-        storeReq = copy.deepcopy(request.POST)\n-        key = request.FILES['keyfile'] \n-        fp = open(\"/tmp/piushs.pem\", 'w')\n-        fp.write(key.read())\n-        fp.close()\n-        \n-    if provider == \"GCE\":\n-        storeReq = copy.deepcopy(request.POST)\n-        save_dep_GCE(storeReq, request)\n-        \n-    if provider == \"RackSpace\":\n-        storeReq = copy.deepcopy(request.POST)\n-        key = request.FILES['prkeyfile'] \n-        fp = open(\"/tmp/rackspacepk\", 'w')\n-        fp.write(key.read())\n-        fp.close()\n-        \n-    if provider == \"Azure\":\n-        storeReq = copy.deepcopy(request.POST)\n-        key = request.FILES['certificate'] \n-        fp = open(\"/tmp/azurekey\", 'w')\n-        fp.write(key.read())\n-        fp.close()\n-    \n-    storeReq['status'] = \"WA\"\n-    storeReq['username'] = username\n-    \n-    cb.set(\"DeploymentRequest\",storeReq)\n-    \n-    test = cb.get(\"DeploymentRequest\").value\n-    print \"<<<<\"\n-    print test\n-    print \">>>>>\"\n-    \n-    \n-    return render_to_response(\"couchbaseconfiguration.html\",{'provider':storeReq['provider'],\n-                                                             'machine':storeReq['machine'], 'cpus':storeReq['cpus']})\n-\n-@csrf_exempt\n-def mngcluster(request):\n-    \n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get (\"SessionDetails\").value\n-\n-    result['deploymentname'] = request.POST.get('deplist')\n-    \n-    cb.set(\"SessionDetails\", result)\n-    \n-    username = result['username']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    dep = request.POST.get('deplist')\n-    \n-    print result\n-    \n-    \n-    temp ={}\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-   \n-    if result ['deploy'] != None :     \n-        for res in result['deploy'] :\n-            if res['request']['depname'] == dep:\n-                temp = res\n-                break\n-\n-    if bool(temp):\n-        return render_to_response(\"managecluster.html\", {'temp':temp})\n-    else:\n-        return render_to_response(\"deployments.html\", None)\n-\n-@csrf_exempt\n-def conf_couchbase(request):\n-\n-    print \"Coming Here\"\n-    return render_to_response(\"couchbaseconfiguration.html\",None)\n-    \n-@csrf_exempt\n-def install(request):\n-    \n-    cb = Couchbase.connect (bucket='default', host=\"localhost\")\n-    \n-    store = cb.get(\"DeploymentRequest\").value\n-    \n-    store['bucketname'] = request.POST.get('bkname')\n-    store['operation'] = request.POST.get('operation')\n-    store['replica'] = request.POST.get ('numrep')\n-    store['password_sasl'] = request.POST.get('rdpasswd')\n-    store['bucket_size'] = request.POST.get('size')\n-    store['ramquota'] = request.POST.get('ramquota')\n-    \n-    \n-    store['status'] = 'RDDE'\n-    cb.set (\"DeploymentRequest\", store)\n-    \n-    cpu = store['cpus']\n-    return render_to_response(\"progress.html\",{'cpu':cpu})\n-\n-@csrf_exempt\n-def mngviewDel(request):\n-\n-    \n-    bucket = request.POST.get(\"bucket\")\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    resultsess = cb.get(\"SessionDetails\").value\n-    username = resultsess['username']\n-    dep = resultsess['deploymentname']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['request']['depname'] == dep:\n-            temp = res['request']\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    resultsess['deploymentIndex'] = deploymentIndex\n-    \n-    cb.set(\"SessionDetails\", resultsess)\n-\n-    machines = request.POST.getlist('ck')\n-\n-    \n-    vms = result['deploy'][deploymentIndex]['vm']    \n-     \n-    flag = 0\n-    for vm in vms:\n-        for mc in machines:\n-            if vm['dns'] != mc:\n-                flag = 1\n-                cb.set(\"VMPrimary\",vm['dns'])\n-                break\n-        if flag == 1:\n-            break\n-        \n-    machineInfo=[]\n-    for vm in vms:\n-        for mc in machines:\n-            if vm['dns'] == mc:\n-                machineInfo.append(vm)\n-                break\n-        \n-    delReq = result['deploy'][deploymentIndex]['request']\n-    delReq['status'] = \"RDDEL\"\n-    delReq['delmachines'] = machineInfo\n-    cb.set(\"DeploymentRequest\", delReq)\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    ret = cb.get(\"DeploymentRequest\").value\n-    \n-    while ret['status'] != \"IHDEL\":\n-        ret = cb.get(\"DeploymentRequest\").value\n-        continue\n-    \n-    return render_to_response(\"deployments.html\", {'result':result})\n-    \n-    \n-@csrf_exempt\n-def mngviewAdd(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    resultsess = cb.get(\"SessionDetails\").value\n-    username = resultsess['username']\n-    dep = resultsess['deploymentname']\n-    \n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-  \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['request']['depname'] == dep:\n-            temp = res['request']\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    resultsess['deploymentIndex'] = deploymentIndex\n-    \n-    cb.set(\"SessionDetails\",resultsess)\n-    \n-    temp['status'] = 'RDAD'\n-    temp['cpus'] = request.POST.get('number')\n-    \n-    cb.set(\"DeploymentRequest\",temp)\n-    \n-    cpu = request.POST.get('number')\n-    return render_to_response (\"progress.html\", {'cpu':cpu})\n-\n-\n-@csrf_exempt\n-def poll_state(request):\n-    \n-    pollcb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcb.get(\"DeploymentRequest\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    \n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-\n-@csrf_exempt\n-def poll_ins_state(request):\n-    \n-    pollcbconn=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcbconn.get(\"DeploymentRequest\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-"
    },
    {
      "sha": "b2ba25424291cd208f74857e2138e119d6f0173e",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/90870f5f671300141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 12,
      "changes": 12,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/90870f5f671300141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/90870f5f671300141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/90870f5f671300141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,12 +0,0 @@\n-from django.conf.urls import patterns, include, url\n-\n-from django.contrib import admin\n-admin.autodiscover()\n-\n-urlpatterns = patterns('',\n-    # Examples:\n-    # url(r'^$', 'CouchbaseCloud.views.home', name='home'),\n-    # url(r'^blog/', include('blog.urls')),\n-\n-    url(r'^admin/', include(admin.site.urls)),\n-)"
    },
    {
      "sha": "7a768959188cafeb253d00acacc796546d294973",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/a0f89e99731600141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 57,
      "changes": 57,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/a0f89e99731600141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/a0f89e99731600141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/a0f89e99731600141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,57 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n-\n-        <form id=\"loginform\" class=\"content\" action=\"/login/\" method=\"POST\"> \n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div align = \"center\">\n-                    To manage your CouchDB databases, log in.<p></p>\n-                    If you don't have an account, you can\n-                    <a id=\"signuplink\" href=\"/create/\">sign up</a> for free!\n-                </div>\n-                \n-                </br>\n-                <div class=\"tinyLineBreak\"></div>\n-                <div>\n-                    <label>Username</label>\n-\t\t        </div>\n-\n-                <div>\n-                    <input class=\"required\" type=\"text\" id=\"login-username\" name=\"username\" value=\"\">\n-                </div>\n-                </br>\n-                <div>\n-                    <label>Password</label>\n-                </div>\n-                <div>\n-                    <input class=\"required\" type=\"password\" id=\"login-password\" name=\"password\">\n-                </div>\n-                </br>\n-\n-                <button type=“button” onclick=\"submitlogin();\">Log in</button>\n-            </fieldset>           \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "8770f5da6027213c5434e187a58c26e0d22d968c",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/c14a1d67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 50,
      "changes": 50,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/c14a1d67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/c14a1d67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/c14a1d67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,50 +0,0 @@\n-# rebalance mixed 7M load, 1M hot reload, 7M access creates\n-# rebalance from 2 - 4 nodes\n-# 30 clients\n-# speed limit = 9k cluster-wide\n-#\n-performance.eperf.EPerfClient.test_eperf_rebalance\n-\n-params:\n-\n-# general\n-batch=50\n-kind=nonjson\n-mem_quota=20000\n-db_compaction=100\n-\n-# load phase\n-hot_init_items=1000000\n-items=7000000\n-\n-# cbmonitor\n-cbm=1\n-\n-# access phase\n-# Read:Insert:Update:Delete Ratio = 50:4:40:6.\n-ratio_sets=0.5\n-ratio_misses=0.05\n-ratio_creates=0.08\n-ratio_deletes=0.13\n-ratio_hot=0.05\n-ratio_hot_gets=0.99\n-ratio_hot_sets=0.99\n-ratio_expirations=0.03\n-max_creates=7000000\n-\n-# rebalance\n-rebalance_after=1500000\n-num_nodes_after=3\n-reb_max_retries=5\n-master_events=1\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-load_wait_until_drained=1\n-loop_wait_until_drained=0\n-mcsoda_heartbeat=3\n-mcsoda_max_ops_sec=300\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "9646622c300c0304ec4df80db85222aa498df130",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/e058a3e4782100141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 168,
      "changes": 168,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/e058a3e4782100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/e058a3e4782100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/e058a3e4782100141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,168 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-def main():\n-    cb = Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-\n-    while True:\n-        try:\n-            request = cb.get(\"DeploymentRequest\").value\n-            if request['status'] == \"RD\":\n-                location = request['loc']\n-                \n-                if  location == 'East':\n-                    cls = get_driver(Provider.EC2_US_EAST)\n-                    \n-                AWS_EC2_ACCESS_ID = request['ackey']\n-                AWS_EC2_SECRET_KEY = request['seckey']\n-                \n-                driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-                \n-                ACCESS_KEY_NAME = request['keyname']\n-                \n-                \n-                sizes = driver.list_sizes()\n-                \n-                for size in sizes:\n-                    print size\n-                \n-                MY_SIZE = request['machine']\n-                MY_IMAGE = 'ami-76817c1e'\n-                \n-                \n-                size = [s for s in sizes if s.id == MY_SIZE][0]\n-                \n-                image = driver.get_image(MY_IMAGE)\n-                \n-                print image\n-                print size\n-                \n-                y = request['cpus']\n-                a=0\n-                \n-                n = int(y)\n-                nodes = list()\n-                while a < n :\n-                    node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-                    nodes.append(node)\n-                    a = a+1;  \n-                \n-                nodesup = list()    \n-                for node in nodes :\n-                    while node.state != 0 :\n-                        regionNodes = driver.list_nodes() \n-                        node = [val for val in regionNodes if val.id == node.id][0]\n-                        continue\n-                    nodesup.append(node)\n-                \n-                for node in nodesup:\n-                    print node.__dict__\n-                \n-                \n-                bucket =[]\n-                vms = []\n-                \n-                for node in nodesup :\n-                    vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id})\n-                    \n-                bucket.append ({ 'name' : \"default\", 'vm':vms });\n-                \n-                result = cb.get(\"user::{0}\".format(request['username']))\n-                \n-                print \"hehhr\" \n-                print result\n-                \n-                \n-                try :\n-                    store = result\n-                    result = json.loads(result)\n-                except:\n-                    result = store\n-                \n-                request['status'] = \"CO\"        \n-                \n-                if result['deploy'] == None:\n-                    print \"1\"\n-                    result['deploy'] = [{'request':request, \n-                                         'bucket': bucket}]\n-                else :\n-                    print \"2\"\n-                    result['deploy'].append({'request':request, 'bucket' : bucket})\n-                \n-                \n-                print result       \n-                cb.set(\"user::{0}\".format(request['username']), result)\n-                   \n-                aws_mkfile(nodesup, request['keyfile'])\n-                    \n-                obj = {'filename':'test.ini', 'status' : 'RD'}\n-                \n-                \n-                cb.set(\"requesttable\",obj)\n-        except:\n-            continue    \n-\n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-    \n-\n-def aws_mkfile(nodesup,filein):\n-\n-    cfgfile = open(filein,'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(node.__dict__['extra']['dns_name']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-\n-if __name__ == \"__main__\":\n-    main()\n\\ No newline at end of file"
    },
    {
      "sha": "b70ac44ab74a0957eb6727c5346976dbadef066a",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/e099df4c652700141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 204,
      "changes": 204,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/e099df4c652700141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/e099df4c652700141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/e099df4c652700141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,204 +0,0 @@\n-from azure import *\n-from azure.servicemanagement import *\n-import base64\n-import os\n-\n-import time\n-import datetime\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-def _wait_for_async(sms,request_id):\n-    count = 0\n-    result = sms.get_operation_status(request_id)\n-    while result.status == 'InProgress':\n-        count = count + 1\n-        time.sleep(5)\n-        result = sms.get_operation_status(request_id)\n-    \n-    \n-def _wait_for_deployment(sms,service_name, deployment_name,status='Running'):\n-    count = 0\n-    props = sms.get_deployment_by_name(service_name, deployment_name)\n-    while props.status != status:\n-        count = count + 1\n-        time.sleep(5)\n-        props = sms.get_deployment_by_name(service_name, deployment_name)\n-        \n-def _wait_for_role(sms,service_name, deployment_name, role_instance_name,status='ReadyRole'):\n-    count = 0\n-    props = sms.get_deployment_by_name(service_name, deployment_name)\n-    while _get_role_instance_status(props, role_instance_name) != status:\n-        count = count + 1\n-        props = sms.get_deployment_by_name(service_name, deployment_name)\n-\n-def _get_role_instance_status(deployment, role_instance_name):\n-    for role_instance in deployment.role_instance_list:\n-        if role_instance.instance_name == role_instance_name:\n-            return role_instance.instance_status\n-    return None\n-\n-def AzureHandler(request):\n-    \n-    subscription_id = request['subid']\n-    certificate_path = '/tmp/azurekey'\n-    \n-    sms = ServiceManagementService(subscription_id, certificate_path)\n-\n-    image_name='5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-65-20140606'\n-    \n-    \n-    \n-    tm = timestamp()\n-    name = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-    label = name\n-    desc = name\n-    location = request['loc']\n-    \n-    sms.create_hosted_service(name, label, desc, location)\n-\n-    i = datetime.datetime.now()\n-    dateVar = '{0}-{1}-{2}'.format(i.year, i.month, i.day)\n-    media_link = 'https://portalvhdsmtcz83fp9vjrb.blob.core.windows.net/vhds/'+ name + '-' + name + '-' +dateVar +'.vhd'\n-    \n-    \n-    \n-    location = request['loc']\n-    linux_user_id='azureuser'\n-    linux_config = LinuxConfigurationSet(name, 'azureuser',user_password=None,disable_ssh_password_authentication=True)\n-    \n-    \n-    azure_config = \"/tmp\" + '/.azure'\n-    cert_data_path = azure_config + \"/myCert.pfx\"\n-    with open(cert_data_path, \"rb\") as bfile:\n-        cert_data = base64.b64encode(bfile.read())\n-    \n-    cert_format = 'pfx'\n-    cert_password = ''\n-    cert_res = sms.add_service_certificate(service_name=name,\n-                                data=cert_data,\n-                                certificate_format=cert_format,\n-                                password=cert_password)\n-    \n-    vars(cert_res)\n-    time.sleep(60)\n-    \n-    \n-    azure_config = \"/tmp\" + '/.azure'\n-    thumbprint_path = azure_config + '/thumbprint'\n-    authorized_keys = \"/home/\" + linux_user_id + \"/.ssh/authorized_keys\" \n-    try:\n-        thumbprint=open(thumbprint_path, 'r').readline().split('\\n')[0]\n-    except:\n-        thumbprint=None\n-    \n-    \n-    publickey = PublicKey(thumbprint, authorized_keys)\n-    linux_config.ssh.public_keys.public_keys.append(publickey)\n-    \n-    print vars(publickey)\n-    print vars(linux_config.ssh.public_keys.public_keys.list_type)\n-    \n-    \n-    \n-    print vars(linux_config.ssh.public_keys)\n-    print vars(linux_config.ssh.key_pairs)\n-    \n-    os_hd  = OSVirtualHardDisk(image_name, media_link)\n-    \n-    print vars(os_hd)\n-    \n-    network = ConfigurationSet()\n-    network.configuration_set_type = 'NetworkConfiguration'\n-    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('ssh', 'tcp', '22', '22'))\n-    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('http', 'tcp','8091','8091'))\n-    '''\n-    portIndex = 0\n-    while portIndex <= 65535:\n-        network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('http', 'tcp', \"{0}\".format(portIndex), \n-                                                                                     '{0}'.format(portIndex)))\n-        portIndex = portIndex + 1\n-    '''\n-    result = sms.create_virtual_machine_deployment(service_name=name,\n-        deployment_name=name,\n-        deployment_slot='production',\n-        label=name,\n-        role_name=name,\n-        system_config=linux_config,\n-        network_config=network,\n-        os_virtual_hard_disk=os_hd,\n-        role_size='Large')\n-    \n-    request_id = result.request_id\n-    print request_id\n-    print result\n-    \n-    _wait_for_async(sms,result.request_id)\n-    _wait_for_deployment(sms,service_name=name, deployment_name=name)\n-    _wait_for_role(sms,service_name=name, deployment_name=name, role_instance_name=name)\n-        \n-    cpus = int(request['cpus']) - 1\n-    i=0 \n-    while i<cpus:\n-        print \"Piush\"\n-        tm = timestamp()\n-        rolename = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-        linux_config = LinuxConfigurationSet(rolename, 'azureuser',user_password=None,disable_ssh_password_authentication=True)\n-        linux_config.ssh.public_keys.public_keys.append(publickey)\n-        \n-        media_link = 'https://portalvhdsmtcz83fp9vjrb.blob.core.windows.net/vhds/'+ name + '-' + rolename + '-' +dateVar +'.vhd'\n-        os_hd  = OSVirtualHardDisk(image_name, media_link)\n-        \n-        network=None\n-        result = sms.add_role(service_name=name, deployment_name=name, role_name=rolename,\n-                              system_config = linux_config, os_virtual_hard_disk=os_hd, network_config= network)\n-        request_id = result.request_id\n-        print request_id\n-        print result\n-        i = i+ 1\n-    \n-    print vars(linux_config.ssh.public_keys)\n-    print vars(linux_config.ssh.key_pairs)\n-    \n-    time.sleep (60)\n-    status = sms.get_operation_status(request_id)\n-    try:\n-        print vars(status.error)\n-    except:\n-        print vars(status)\n-    \n-    service_name = name\n-    deployment_name = name\n-    props = sms.get_deployment_by_name(service_name, deployment_name)\n-    vars(props)\n-    \n-    result = sms.list_locations()\n-    for location in result:\n-        print(location.name)\n-    \n-\n-    deployment = sms.get_deployment_by_slot(name, 'production')\n-\n-    for instance in deployment.role_instance_list:\n-        while instance.instance_status != \"ReadyRole\":\n-            continue\n-        print('Instance name: ' + instance.instance_name)\n-        print('Instance status: ' + instance.instance_status)\n-        print('Instance size: ' + instance.instance_size)\n-        print('Instance role name: ' + instance.role_name)\n-        print('Instance ip address: ' + instance.ip_address)\n-        print('')\n-    \n-        \n-    node = {\n-            'nodeid':None,\n-            'private_ip':None,\n-            'public_ip': None}\n-    \n-    return node\n-    \n-    "
    },
    {
      "sha": "83eede4f6ed0bf23f4a8ac0bf9efe8663ce356a9",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/f05bb590af2800141066bfd86697bc67",
      "status": "removed",
      "additions": 0,
      "deletions": 107,
      "changes": 107,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/f05bb590af2800141066bfd86697bc67",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/f05bb590af2800141066bfd86697bc67",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/f05bb590af2800141066bfd86697bc67?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,107 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-<header>\n-\n-<table>\n-\t<tbody>\n-\t\t<tr>\n-\t\t   <td>\n-\t\t    {% load staticfiles %}\n-            <img id = \"dep1\" src=\"{% static \"couchbase_small_gradient.png\" %}\" >\t</img>\n-           </td>\n-           <td>\n-           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n-           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n-           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n-           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n-           </td>\n-           <td>\n-           \t\t<div align = \"center\" class=\"container\" >\n-\t        <h1   color = \"#FC322B\">\n-\t\n-\t            Couchbase Cloud Hosting\n-\t  \n-\t        </h1>\n-\t        \n-\t        <h2>\n-\t\n-\t            Couchbase Labs\n-\t\n-\t        </h2>\n-\t        \n-\t    </div>\n-           \t\t\n-          \n-           </td>\n-\t\t</tr>\n-\t</tbody>\n-\n-</table>\n-<hr/>\n-\t        <hr/>\n-    \n-\t\n-\t    \t\n-\t</header>\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-\t    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h3>Login</h3></span>\n-        </div>\n-\n-        <form id=\"loginform\" class=\"content\" action=\"/login/\" method=\"POST\"> \n-\n-            \n-         \n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            \n-                <div>\n-                    To manage your Couchbase databases, log in.<p></p>\n-                    If you don't have an account, you can\n-                    <a id=\"signuplink\" href=\"/signup/\">sign up</a> for free!\n-                </div>\n-                \n-                </br>\n-                <div class=\"tinyLineBreak\"></div>\n-                <div>\n-                    <label>Username</label>\n-\t\t        </div>\n-\n-                <div>\n-                    <input class=\"required\" type=\"text\" id=\"login-username\" name=\"username\" value=\"\">\n-                </div>\n-                </br>\n-                <div>\n-                    <label>Password</label>\n-                </div>\n-                <div>\n-                    <input class=\"required\" type=\"password\" id=\"login-password\" name=\"password\">\n-                </div>\n-                </br>\n-\n-                <button type=“button” onclick=\"submitlogin();\">Log in</button>\n-                \n-                {% ifequal error|stringformat:\"s\" \"IU\" %}\n-            \t\t\t<p>{{message}}</p>\n-            \t{% endifequal %}\n-            \t\n-                 \n-            \n-            \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "0bd9b58f8977b7087dabf79889e7422722b8842d",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/f3ed3f67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 117,
      "changes": 117,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/f3ed3f67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/f3ed3f67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/13/f3ed3f67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,117 +0,0 @@\n-import json\n-import time\n-from basetestcase import BaseTestCase\n-from couchbase.documentgenerator import BlobGenerator\n-from mc_bin_client import MemcachedError\n-from threading import Thread\n-from memcached.helper.data_helper import MemcachedClientHelper\n-\n-class BucketFlushTests(BaseTestCase):\n-\n-    def setUp(self):\n-        super(BucketFlushTests, self).setUp()\n-        self.nodes_in = self.input.param(\"nodes_in\", 0)\n-        self.value_size = self.input.param(\"value_size\", 256)\n-        self.data_op = self.input.param(\"data_op\", \"create\")\n-        self.use_ascii = self.input.param(\"use_ascii\", \"False\")\n-        self.gen_create = BlobGenerator('bucketflush', 'bucketflush-', self.value_size, end=self.num_items)\n-        try:\n-            self.default_test_setup()\n-        except Exception, e:\n-            self.tearDown()\n-            self.fail(e)\n-\n-    def tearDown(self):\n-        super(BucketFlushTests, self).tearDown()\n-\n-    \"\"\"Helper function to perform initial default setup for the tests\"\"\"\n-    def default_test_setup(self, load_data=True):\n-\n-        if self.nodes_in:\n-            servs_in = self.servers[1:self.nodes_in + 1]\n-            self.cluster.rebalance([self.master], servs_in, [])\n-\n-        if load_data:\n-            self._load_all_buckets(self.master, self.gen_create, \"create\", 0)\n-            self.persist_and_verify()\n-\n-    \"\"\"Helper function to wait for persistence and then verify data/stats on all buckets\"\"\"\n-    def persist_and_verify(self):\n-\n-        self._wait_for_stats_all_buckets(self.servers[:self.nodes_in + 1])\n-        self._verify_all_buckets(self.master, max_verify=self.max_verify)\n-        self._verify_stats_all_buckets(self.servers[:self.nodes_in + 1])\n-\n-    \"\"\"Basic test for bucket flush functionality. Test loads data in bucket and then calls Flush. Verify curr_items=0 after flush.\n-        Works with multiple nodes/buckets.\"\"\"\n-    def bucketflush(self):\n-\n-        for bucket in self.buckets:\n-            self.cluster.bucket_flush(self.master, bucket)\n-\n-        for bucket in self.buckets:\n-            self.cluster.wait_for_stats(self.servers[:self.nodes_in + 1], bucket, '', 'curr_items', '==', 0)\n-\n-    \"\"\"Test case for empty bucket. Work with multiple nodes/buckets.\"\"\"\n-    def bucketflush_empty(self):\n-\n-        self._load_all_buckets(self.master, self.gen_create, \"delete\", 0)\n-        self.persist_and_verify()\n-\n-        for bucket in self.buckets:\n-            self.cluster.bucket_flush(self.master, bucket)\n-\n-        self._load_all_buckets(self.master, self.gen_create, \"create\", 0)\n-        self.persist_and_verify()\n-\n-    \"\"\"Test case to check client behavior with bucket flush while loading/updating/deleting data\"\"\"\n-    def bucketflush_with_data_ops(self):\n-        try:\n-            tasks = self._async_load_all_buckets(self.master, self.gen_create, self.data_op, 0)\n-            for bucket in self.buckets:\n-                self.cluster.bucket_flush(self.master, bucket)\n-            for task in tasks:\n-                task.result()\n-        except MemcachedError as exp:\n-            self.assertEqual(exp.status, 134, msg=\"Unexpected Exception - {0}\".format(exp))\n-            self.log.info(\"Expected Exception Caught - {0}\".format(exp))\n-        except Exception as exp:\n-            self.log.info(\"Unxpected Exception Caught - {0}\".format(exp))\n-            self.fail(\"Unexpected exception caught- {0}\".format(exp))\n-        else:\n-            self.fail(\"All buckets may not have been flushed\")\n-\n-    \"\"\"Test case to check client behavior with bucket flush while loading/updating/deleting data via Moxi client(ascii,non-ascii)\"\"\"\n-    def bucketflush_with_data_ops_moxi(self):\n-\n-        thread = Thread(target=self.data_ops_with_moxi, args=(self.master, self.data_op, self.buckets, self.num_items, self.use_ascii))\n-        thread.start()\n-\n-        for bucket in self.buckets:\n-            self.cluster.bucket_flush(self.master, bucket)\n-\n-        thread.join()\n-\n-    def data_ops_with_moxi(self, server, data_op, buckets, items, use_ascii):\n-\n-        for bucket in buckets:\n-            try:\n-                client = MemcachedClientHelper.proxy_client(server, bucket.name, force_ascii=use_ascii)\n-            except Exception as ex:\n-                self.log.error(\"unable to create memcached client due to {0}..\".format(ex))\n-        try:\n-            for itr in xrange(items):\n-                key = 'bucketflush' + str(itr)\n-                value = 'bucketflush-' + str(itr)\n-                if data_op in [\"create\", \"update\"]:\n-                    client.set(key, 0, 0, value)\n-                elif data_op == \"delete\":\n-                    client.delete(key)\n-        except MemcachedError as exp:\n-               self.assertEqual(exp.status, 134, msg=\"Unexpected Exception - {0}\".format(exp))\n-               self.log.info(\"Expected Exception Caught - {0}\".format(exp))\n-        except Exception as exp:\n-               self.log.info(\"Unxpected Exception Caught - {0}\".format(exp))\n-               self.fail(\"Unexpected exception caught- {0}\".format(exp))\n-        else:\n-               self.fail(\"All buckets may not have been flushed\")\n\\ No newline at end of file"
    },
    {
      "sha": "a01d46832d53bcc769ead83ec796600f646850f9",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/00f4086aee1900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 48,
      "changes": 48,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/00f4086aee1900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/00f4086aee1900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/00f4086aee1900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,48 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n-\n-        <form id=\"depform\" class=\"content\" action=\"/couchdep/\" method=\"POST\"> \n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>CouchDB Deployments</h2>\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select id=\"deplist\">\n-                 \n-                  <option> {{obj}} </option>\n-                  <option> {{tag2}} </option>\n-                  <option> {{tag3}} </option>\n-                  <option> {{tag4}}</option>\n-\t\t\t    </select>\n-                </div>\n-            </fieldset>           \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "2a1fc1a5579435badc836fcbb20e84f88cece1df",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/10de4db8082700141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 124,
      "changes": 124,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/10de4db8082700141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/10de4db8082700141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/10de4db8082700141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,124 +0,0 @@\n-from azure import *\n-from azure.servicemanagement import *\n-import base64\n-import os\n-\n-import time\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-def AzureHandler(request):\n-    \n-    subscription_id = request['subid']\n-    certificate_path = '/tmp/azurekey'\n-    \n-    sms = ServiceManagementService(subscription_id, certificate_path)\n-\n-    image_name='5112500ae3b842c8b9c604889f8753c3__OpenLogic-CentOS-65-20140606'\n-    \n-    \n-    tm = timestamp()\n-    name = \"{0}_\".format(request['depname']) + \"{0}\".format(tm)\n-\n-    media_link = 'https://portalvhdsmtcz83fp9vjrb.blob.core.windows.net/vhds/piush9-piush9-2014-08-16.vhd'\n-    \n-    \n-    location = request['loc']\n-    linux_user_id='azureuser'\n-    linux_config = LinuxConfigurationSet(name, 'azureuser',user_password=None,disable_ssh_password_authentication=True)\n-    \n-    \n-    azure_config = \"/tmp\" + '/.azure'\n-    cert_data_path = azure_config + \"/myCert.pfx\"\n-    with open(cert_data_path, \"rb\") as bfile:\n-        cert_data = base64.b64encode(bfile.read())\n-    \n-    cert_format = 'pfx'\n-    cert_password = ''\n-    cert_res = sms.add_service_certificate(service_name=name,\n-                                data=cert_data,\n-                                certificate_format=cert_format,\n-                                password=cert_password)\n-    \n-    vars(cert_res)\n-    time.sleep(60)\n-    \n-    \n-    azure_config = \"/tmp\" + '/.azure'\n-    thumbprint_path = azure_config + '/thumbprint'\n-    authorized_keys = \"/home/\" + linux_user_id + \"/.ssh/authorized_keys\" \n-    try:\n-        thumbprint=open(thumbprint_path, 'r').readline().split('\\n')[0]\n-    except:\n-        thumbprint=None\n-    \n-    thumbprint\n-    \n-    publickey = PublicKey(thumbprint, authorized_keys)\n-    linux_config.ssh.public_keys.public_keys.append(publickey)\n-    \n-    print vars(publickey)\n-    print vars(linux_config.ssh.public_keys.public_keys.list_type)\n-    \n-    \n-    \n-    print vars(linux_config.ssh.public_keys)\n-    print vars(linux_config.ssh.key_pairs)\n-    \n-    os_hd  = OSVirtualHardDisk(image_name, media_link)\n-    \n-    print vars(os_hd)\n-    \n-    network = ConfigurationSet()\n-    network.configuration_set_type = 'NetworkConfiguration'\n-    network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('ssh', 'tcp', '22', '22'))\n-    \n-    portIndex = 0\n-    while portIndex <= 65535:\n-        network.input_endpoints.input_endpoints.append(ConfigurationSetInputEndpoint('http', 'tcp', \"{0}\".format(portIndex), \n-                                                                                     '{0}'.format(portIndex)))\n-        portIndex = portIndex + 1\n-    \n-    result = sms.create_virtual_machine_deployment(service_name=name,\n-        deployment_name=name,\n-        deployment_slot='production',\n-        label=name,\n-        role_name=name,\n-        system_config=linux_config,\n-        network_config=network,\n-        os_virtual_hard_disk=os_hd,\n-        role_size='Large')\n-    \n-    request_id = result.request_id\n-    print request_id\n-    print result\n-    \n-    print vars(linux_config.ssh.public_keys)\n-    print vars(linux_config.ssh.key_pairs)\n-    \n-    time.sleep (60)\n-    status = sms.get_operation_status(request_id)\n-    try:\n-        print vars(status.error)\n-    except:\n-        print vars(status)\n-    \n-    service_name = name\n-    deployment_name = name\n-    props = sms.get_deployment_by_name(service_name, deployment_name)\n-    vars(props)\n-    \n-    result = sms.list_locations()\n-    for location in result:\n-        print(location.name)\n-    \n-    role = sms.get_role(service_name=name, deployment_name=name, role_name=name)\n-    print role\n-    \n-    node = {}\n-    \n-    "
    },
    {
      "sha": "7e054b6a6993b62d35dcd536089116ede1215b00",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/218f0f67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 45,
      "changes": 45,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/218f0f67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/218f0f67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/218f0f67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,45 +0,0 @@\n-# write 20M load, 6M hot reload, 20M access creates, no draining\n-#\n-# speed limit - 1k per cliennt, 30 clients\n-# DGM\n-\n-performance.eperf.EPerfClient.test_eperf_write\n-\n-params:\n-\n-# general\n-batch=50\n-kind=nonjson\n-mem_quota=10000\n-avg_value_size=2048\n-threads_number=6\n-\n-#cbm\n-cbm=0\n-\n-# load phase\n-hot_init_items=8000000\n-items=20000000\n-hot_load_get=1\n-load_mcsoda_max_ops_sec=500\n-\n-# access phase\n-# 30% read, 70% write, Insert/Update/Delete = 17:80:3\n-ratio_sets=0.7\n-ratio_misses=0.05\n-ratio_creates=0.17\n-ratio_deletes=0.036\n-ratio_hot=0.4\n-ratio_hot_gets=0.6\n-ratio_hot_sets=0.6\n-ratio_expirations=0\n-max_creates=10000000\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-mcsoda_heartbeat=3\n-mcsoda_max_ops_sec=1000\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0"
    },
    {
      "sha": "31ff7ef7aa08ac8b97c7448fb61a6136b5ee49c2",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/40b191bd3d1400141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 93,
      "changes": 93,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/40b191bd3d1400141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/40b191bd3d1400141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/40b191bd3d1400141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,93 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n-\n-        <form id=\"loginform\" class=\"content\" > \n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div>\n-                    To manage your CouchDB databases, log in.<p></p>\n-                    If you don't have an account, you can\n-                    <a id=\"signuplink\" href=\"/signup/?r=\">sign up</a> for free!\n-                </div>\n-                \n-                </br>\n-                <div class=\"tinyLineBreak\"></div>\n-                <div>\n-                    <label>Username</label>\n-\t\t        </div>\n-\n-                <div>\n-                    <input class=\"required\" type=\"text\" id=\"login-username\" name=\"username\" value=\"\">\n-                </div>\n-                </br>\n-                <div>\n-                    <label>Password</label>\n-                </div>\n-                <div>\n-                    <input class=\"required\" type=\"password\" id=\"login-password\" name=\"password\">\n-                </div>\n-                </br>\n-\n-                <button type=“button” onclick=\"submitlogin();\">Log in</button>\n-            </fieldset>\n-           \n-           \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-\n-<script>\n-function getCookie(name) {\n-    var cookieValue = null;\n-    if (document.cookie && document.cookie != '') {\n-        var cookies = document.cookie.split(';');\n-        for (var i = 0; i < cookies.length; i++) {\n-            var cookie = jQuery.trim(cookies[i]);\n-            // Does this cookie string begin with the name we want?\n-            if (cookie.substring(0, name.length + 1) == (name + '=')) {\n-                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n-                break;\n-            }\n-        }\n-    }\n-    return cookieValue;\n-}\n-var csrftoken = getCookie('csrftoken');\n-</script>\n-\n-\n-<script>\n-var submitlogin = function() {\n-    var username = document.getElementById(\"login-username\");\n-    var password = document.getElementById(\"login-password\");\n-    \n-   \tvar data = { username:username, password:password };\n-   \tvar args = { type:\"POST\", url:\"http://127.0.0.1:8080/login/\", data:data };\n-   \t$.ajax(args);\n-    \t\n-    return false;\n-}\n-</script>\n-\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "7343f13bcd62caa04ced0ea67f244803aa5eae2a",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/41a80367b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 29,
      "changes": 29,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/41a80367b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/41a80367b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/41a80367b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,29 +0,0 @@\n-[global]\n-username:Administrator\n-password:asdasd\n-\n-[membase]\n-rest_username:Administrator\n-rest_password:asdasd\n-\n-[servers]\n-1:127.0.0.1_1\n-2:127.0.0.1_2\n-3:127.0.0.1_3\n-4:127.0.0.1_4\n-\n-[127.0.0.1_1]\n-ip:127.0.0.1\n-port:9000\n-\n-[127.0.0.1_2]\n-ip:127.0.0.1\n-port:9001\n-\n-[127.0.0.1_3]\n-ip:127.0.0.1\n-port:9002\n-\n-[127.0.0.1_4]\n-ip:127.0.0.1\n-port:9003"
    },
    {
      "sha": "91ad20e2caccf5378261118194c80b578b9e965e",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/606d9ff5f52000141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 81,
      "changes": 81,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/606d9ff5f52000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/606d9ff5f52000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/606d9ff5f52000141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,81 +0,0 @@\n-<!DOCTYPE html>\n-<html>\n-<head>\n-<link href=\"http://getbootstrap.com/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n-<script src=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/js/bootstrap.min.js\"></script>\n-\n-<script>\n-var xmlhttp;\n-function loadXMLDoc(url,cfunc)\n-{\n-if (window.XMLHttpRequest)\n-  {// code for IE7+, Firefox, Chrome, Opera, Safari\n-  xmlhttp=new XMLHttpRequest();\n-  }\n-else\n-  {// code for IE6, IE5\n-  xmlhttp=new ActiveXObject(\"Microsoft.XMLHTTP\");\n-  }\n-xmlhttp.onreadystatechange=cfunc;\n-xmlhttp.open(\"POST\",url,true);\n-xmlhttp.send();\n-}\n-function myFunction()\n-{\n-loadXMLDoc(\"/poll_state/\",function()\n-  {\n-  if (xmlhttp.readyState==4 && xmlhttp.status==200)\n-    {\n-       stre = xmlhttp.responseText;\n-    \n-       stre = JSON.parse(stre)\n-       \n-     //  document.getElementById(\"demo\").innerHTML = stre\n-       if (stre == \"RD\")\n-       {\n-    \t   {% load staticfiles %}\n-           document.getElementById(\"dep\").src=\"{% static \"ajax-loader.gif\" %}\" \n-           \n-           document.getElementById(\"Done\").style.visibility=\"hidden\";\n-           \n-           for (var i=0; i<1000; i++);\n-           \n-           myFunction();\n-       }\n-       else if (stre == \"PU\")\n-       {\n-    \t   {% load staticfiles %}\n-           document.getElementById(\"dep\").src=\"{% static \"checkmark.ico\" %}\" \n-           \n-           document.getElementById(\"Done\").style.visibility=\"visible\";\n-           \n-       }\n-    }\n-  });\n-}\n-\n-\n-</script>\n-</head>\n-<body onload = \"myFunction()\" >\n-\n-\n-  <br/>\n-  \n-  {% load staticfiles %}\n-  <div align=\"center\" visibility:hidden>\n-        <br/>\n-  \t\tCreating Instances <img id = \"ins\" src = \"{% static \"checkmark.ico\" %}\"  >\t</img>\n-  </div>\n-  \n-  \n-  <div align=\"center\">\n-  \t\t<form id=\"viewform\" method=\"POST\" action = \"/mngcluster/\" >\n-         \t<input id = \"Done\" type = \"submit\" value = \"Submit\">\n-  \t\t</form>\n-  </div>\n-  <p id = \"demo\"> </p>\n-</body>\n-\n-\n-</html>\n\\ No newline at end of file"
    },
    {
      "sha": "326c4ee1908a0a6930b0ce22b7cc266919787d47",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/60c34a67b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 20,
      "changes": 20,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/60c34a67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/60c34a67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/60c34a67b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,20 +0,0 @@\n-[global]\n-username:root\n-password:password\n-\n-[membase]\n-rest_username:Administrator\n-rest_password:password\n-\n-[servers]\n-1:127.0.0.1_9000\n-2:127.0.0.1_9001\n-\n-[127.0.0.1_9000]\n-ip:127.0.0.1\n-port:9000\n-\n-[127.0.0.1_9001]\n-ip:127.0.0.1\n-port:9001\n-"
    },
    {
      "sha": "6a5e6b4d0fc8f5ab531d2c3b15975826cd51a844",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/80d4b63f062300141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 388,
      "changes": 388,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/80d4b63f062300141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/80d4b63f062300141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/80d4b63f062300141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,388 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-\n-@csrf_exempt  \n-def getRamSize(request):\n-    \n-    cb = Couchbase.connect(bucket=\"default\", host = \"localhost\")\n-    \n-    result = cb.get(\"Machine\").value\n-    \n-    c = result['AWS'][request.POST.get('machine')]\n-    return HttpResponse(c)\n-    \n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb= Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-    diction = {\"AWS\":{'m3.large': '3584'}}\n-    cb.set (\"Machine\", diction )\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = password = ''\n-    if request.POST:\n-        \n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        try :\n-            result = cb.get(\"user::{0}\".format(username)).value\n-            print result\n-            \n-            try :\n-                store = result\n-                result = json.loads(result)  \n-            except:\n-                result = store\n-                  \n-            session = {}\n-        \n-            if (result['password1'] == password) :\n-                session['username'] = username\n-                cb.set(\"SessionDetails\",session)\n-                return render_to_response(\"deployments.html\",{'result':result})\n-            else :\n-                return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})  \n-        except:\n-               return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})        \n- \n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    session = {}\n-        \n-    session['username'] = uname\n-    cb.set(\"SessionDetails\",session)\n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    return render_to_response('deployments.html', {'result' :result})\n-\n-@csrf_exempt\n-def couchdep(request) :\n-    return render_to_response('couchdbdep.html')\n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-        \n-    \n-\n-@csrf_exempt\n-def save_deployment(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get(\"SessionDetails\").value\n-    \n-    if (result != None):\n-        username = result['username']\n-    \n-    result['deploymentname'] = request.POST.get('depname')\n-    \n-    cb.set(\"SessionDetails\",result)\n-   \n-    provider = request.POST.get('provider')\n-    \n-    'Use the parameters in the request for creating instances'\n-    \n-    if provider == \"AWS\":\n-        storeReq = copy.deepcopy(request.POST)\n-    \n-    storeReq['status'] = \"WA\"\n-    storeReq['username'] = username\n-    \n-    cb.set(\"DeploymentRequest\",storeReq)\n-    return render_to_response(\"couchbaseconfiguration.html\",{'machine':storeReq['machine'], 'cpus':storeReq['cpus']})\n-\n-@csrf_exempt\n-def mngcluster(request):\n-    \n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get (\"SessionDetails\").value\n-\n-    result['deploymentname'] = request.POST.get('deplist')\n-    \n-    cb.set(\"SessionDetails\", result)\n-    \n-    username = result['username']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    dep = request.POST.get('deplist')\n-    \n-    print result\n-    \n-    \n-    temp ={}\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-   \n-    if result ['deploy'] != None :     \n-        for res in result['deploy'] :\n-            if res['request']['depname'] == dep:\n-                temp = res\n-                break\n-\n-    if bool(temp):\n-        return render_to_response(\"managecluster.html\", {'temp':temp})\n-    else:\n-        return render_to_response(\"deployments.html\", None)\n-\n-@csrf_exempt\n-def conf_couchbase(request):\n-\n-    print \"Coming Here\"\n-    return render_to_response(\"couchbaseconfiguration.html\",None)\n-    \n-@csrf_exempt\n-def install(request):\n-    \n-    cb = Couchbase.connect (bucket='default', host=\"localhost\")\n-    \n-    store = cb.get(\"DeploymentRequest\").value\n-    \n-    store['bucketname'] = request.POST.get('bkname')\n-    store['operation'] = request.POST.get('operation')\n-    store['replica'] = request.POST.get ('numrep')\n-    store['password_sasl'] = request.POST.get('rdpasswd')\n-    store['bucket_size'] = request.POST.get('size')\n-    store['ramquota'] = request.POST.get('ramquota')\n-    \n-    \n-    store['status'] = 'RDDE'\n-    cb.set (\"DeploymentRequest\", store)\n-    \n-    return render_to_response(\"progress.html\")\n-\n-@csrf_exempt\n-def mngviewDel(request):\n-\n-    \n-    bucket = request.POST.get(\"bucket\")\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    resultsess = cb.get(\"SessionDetails\").value\n-    username = resultsess['username']\n-    dep = resultsess['deploymentname']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['request']['depname'] == dep:\n-            temp = res['request']\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    resultsess['deploymentIndex'] = deploymentIndex\n-\n-    machines = request.POST.get('ck')\n-    \n-    vms = result['deploy'][deploymentIndex] =     \n-     \n-       \n-    cb.set(\"SessionDetails\",resultsess)\n-\n-    \n-    tempbucket= {}\n-    bucketIndex = 0\n-    for res in temp['bucket'] :\n-        if res['name'] == bucket:\n-            tempbucket = res\n-            break\n-        bucketIndex = bucketIndex + 1\n-    \n-    \n-    location = temp['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"number\")\n-    a=0\n-    \n-    n = int(y);\n-    \n-    listId = list()\n-    for res in result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'] : \n-        if (a < n):\n-            listId.append(res['nodeid'])\n-            del result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'][a]\n-        else:\n-            break\n-        a= a+1\n-    \n-    print list\n-    \n-    for node in nodes :\n-        if (node.id in listId):\n-            driver.destroy_node(node)\n-                \n-    \n-    nodes = driver.list_nodes()\n-    \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    return HttpResponse(\"Operation Successful\")\n-    \n-    \n-@csrf_exempt\n-def mngviewAdd(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    resultsess = cb.get(\"SessionDetails\").value\n-    username = resultsess['username']\n-    dep = resultsess['deploymentname']\n-    \n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-  \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['request']['depname'] == dep:\n-            temp = res['request']\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    resultsess['deploymentIndex'] = deploymentIndex\n-    \n-    cb.set(\"SessionDetails\",resultsess)\n-    \n-    temp['status'] = 'RDAD'\n-    temp['cpus'] = request.POST.get('number')\n-    \n-    cb.set(\"DeploymentRequest\",temp)\n-    \n-    return render_to_response (\"progress.html\")\n-\n-\n-@csrf_exempt\n-def poll_state(request):\n-    \n-    pollcb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcb.get(\"requesttable\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    \n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-\n-@csrf_exempt\n-def poll_ins_state(request):\n-    \n-    pollcbconn=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcbconn.get(\"DeploymentRequest\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-"
    },
    {
      "sha": "61cc60dc9d231b4342cbec856723d46671f23f0c",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/9094b1139b2100141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 159,
      "changes": 159,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/9094b1139b2100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/9094b1139b2100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/9094b1139b2100141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,159 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Manage Couchbase Deployment</h1></span>\n-        </div>\n-\n-\n-        \n-        <form id=\"couchbaseconfig\" class=\"content\"   action = \"/installation/\" method=\"POST\">\n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <table>\n-                    <tbody>\n-                        <tr>\n-                            \n-                            <td>\n-                        \t\t<h3> Couchbase Configuration </h3>\n-                        \t</td>\n-                        \t\n-                        \t<td>\n-                        \t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                        \t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                        \t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                        \t</td>\n-                        \t<td>\n-                        \t    <h3> Replicas</h3>\n-                        \t</td>\n-                        \t<td>\n-                        \t    <select id=\"numrep\" name =\"numrep\">\n-                        \t    \t<option>1</option>\n-                        \t    \t<option>2</option>\n-                        \t    \t<option>3</option>\n-                        \t    </select>\n-                        \t</td>\n-                        </tr>\n-                        \n-                        <tr>\n-                            <td>\n-                                <input type=\"radio\" name=\"operation\" id = \"1\" value=\"1\" checked>Couchbase Server 3.0\n-                            </td>\n-                        </tr>\n-                        \n-                        <tr>\n-                            <td>\n-   \t\t\t\t\t\t\t\t<input type=\"radio\" name=\"operation\" id = \"2\" value=\"2\">Couchbase Server 3.0 + DR XDCR\n-   \t\t\t\t\t\t\t</td>\n-                        </tr>\n-                        <tr>\n-                            <td>\n-                            \t<input type=\"radio\" name= \"operation\" id=\"3\" value =\"3\">Couchbase Server 3.0 + Full text search\n-                            </td>\n-                        </tr>\n-                        <tr>\n-                        \t<td>\n-                            \t<input type=\"radio\" name= \"operation\" id=\"4\" value =\"3\">Couchbase Server 3.0 + Sync Gateway 1.0\n-                            </td>\n-                        </tr>\n-                    </tbody>\n-                \n-                </table>\n-             </fieldset>\n-             \n-             <fieldset>\n-                 <table>\n-                 \t<tbody>\n-                 \t\t<tr>\n-                 \t\t\t<td>\n-                 \t\t\t   <h3>System Configuration</h3>\n-                 \t\t\t</td>\n-                 \t\t</tr>\n-                 \t\t\n-                 \t\t<tr>\n-                 \t\t   <td>\n-                 \t\t       <h5>Cluster RAM Quota</h5>\n-                 \t\t   </td>\n-                 \t\t   <td>\n-                 \t\t       <input type=\"text\" name = \"ramquota\" id=\"ramquota\"/>\n-                 \t\t   </td>\n-                 \t\t   <td>\n-                 \t\t   \t<input  id= \"availableRam\" name=\"availableRAM\"></p>\n-                 \t\t   </td>\n-                 \t\t   <td>\n-\t\t                 \t\t   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n-\t\t                 \t\t   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n-\t\t                 \t\t   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n-\t\t                 \t\t   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n-\t\t                 \t\t   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n-                 \t\t   </td>\n-                 \t\t   \n-                 \t\t   <td>\n-                 \t\t           <h5>Read-only user password</h5>\n-                 \t\t   </td>\n-                 \t\t   <td>\n-                 \t\t   \t\t<input type=\"password\" name=\"rdpasswd\">\n-                 \t\t   </td>\n-                 \t\t</tr>\n-                 \t</tbody>\n-                 </table>\n-             </fieldset>\n-             \n-             <fieldset>\n-             \n-             <table>\n-             \t<tbody>\n-             \n-                   <tr>\n-                       <td>\n-                       \t\t<h3>Bucket Name</h3>\n-                       </td>\n-                       <td>\n-                            <input type =\"text\" name= \"bkname\" value=\"default\"/>\n-                       </td>\n-                       <td>\n-                       &nbsp;&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                       &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                       &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                       &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                       &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                       &nbsp\n-                       </td>\n-                       <td>\n-                            <h3>Bucket Size</h3>\n-                       </td>\n-                       <td>\n-                            <input type=\"text\" name=\"size\">\n-                       </td>\n-                       \n-                   </tr>\n-                   \n-                 </tbody>\n-             </table>\n-             </fieldset>\n-             \n-             <br/><br/><br/><br/>\n-             <div align=\"center\">\n-                    <input type=\"submit\" value=\"Deploy\">\n-             </div>\n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "5804f4902daeb39ec13733fb93e7bffbaf3579ad",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/90a4694d8a2100141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 433,
      "changes": 433,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/90a4694d8a2100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/90a4694d8a2100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/90a4694d8a2100141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,433 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = password = ''\n-    if request.POST:\n-        \n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        try :\n-            result = cb.get(\"user::{0}\".format(username)).value\n-            print result\n-            \n-            try :\n-                store = result\n-                result = json.loads(result)  \n-            except:\n-                result = store\n-                  \n-            session = {}\n-        \n-            if (result['password1'] == password) :\n-                session['username'] = username\n-                cb.set(\"SessionDetails\",session)\n-                return render_to_response(\"deployments.html\",{'result':result})\n-            else :\n-                return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})  \n-        except:\n-               return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})        \n- \n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    session = {}\n-        \n-    session['username'] = uname\n-    cb.set(\"SessionDetails\",session)\n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    return render_to_response('deployments.html', {'result' :result})\n-\n-@csrf_exempt\n-def couchdep(request) :\n-    return render_to_response('couchdbdep.html')\n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-        \n-    \n-\n-@csrf_exempt\n-def save_deployment(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get(\"SessionDetails\").value\n-    \n-    if (result != None):\n-        username = result['username']\n-    \n-    result['deploymentname'] = request.POST.get('depname')\n-    \n-    cb.set(\"SessionDetails\",result)\n-   \n-    provider = request.POST.get('provider')\n-    \n-\n-    'Use the parameters in the request for creating instances'\n-    \n-    if provider == \"AWS\":\n-        storeReq = copy.deepcopy(request.POST)\n-    \n-    storeReq['status'] = \"WA\"\n-    storeReq['username'] = username\n-    \n-    cb.set(\"DeploymentRequest\",storeReq)\n-    return render_to_response(\"couchbaseconfiguration.html\")\n-\n-@csrf_exempt\n-def mngcluster(request):\n-    \n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get (\"SessionDetails\").value\n-    \n-    try:\n-        dep = result['deploymentname']\n-    except:\n-        dep = ''\n-    \n-    username = result['username']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-    \n-    \n-    temp ={}\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-   \n-    if result ['deploy'] != None :     \n-        for res in result['deploy'] :\n-            if res['request']['depname'] == dep:\n-                temp = res\n-                break\n-    \n-    if bool(temp):\n-        return render_to_response(\"managecluster.html\", {'result':result})\n-    else:\n-        return render_to_response(\"deployments.html\", None)\n-\n-@csrf_exempt\n-def conf_couchbase(request):\n-\n-    print \"Coming Here\"\n-    return render_to_response(\"couchbaseconfiguration.html\",None)\n-    \n-@csrf_exempt\n-def install(request):\n-    \n-    cb = Couchbase.connect (default=\"bucket\", host=\"localhost\")\n-    \n-    store = cb.get(\"DeploymentRequest\").value\n-    \n-    store ['cbconf'] = request.conf\n-    store['cluster_ram_quota'] = request.ram_quota\n-    \n-    \n-    cb.set(\"requesttable\",push)\n-    \n-    \n-    return render_to_response(\"progress.html\")\n-\n-@csrf_exempt\n-def mngviewDel(request):\n-\n-    \n-    bucket = request.POST.get(\"bucket\")\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get(\"SessionDetails\").value\n-    username = result['username']\n-    dep = result['deploymentname']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['name'] == dep:\n-            temp = res\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    tempbucket= {}\n-    bucketIndex = 0\n-    for res in temp['bucket'] :\n-        if res['name'] == bucket:\n-            tempbucket = res\n-            break\n-        bucketIndex = bucketIndex + 1\n-    \n-    \n-    location = temp['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"number\")\n-    a=0\n-    \n-    n = int(y);\n-    \n-    listId = list()\n-    for res in result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'] : \n-        if (a < n):\n-            listId.append(res['nodeid'])\n-            del result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'][a]\n-        else:\n-            break\n-        a= a+1\n-    \n-    print list\n-    \n-    for node in nodes :\n-        if (node.id in listId):\n-            driver.destroy_node(node)\n-                \n-    \n-    nodes = driver.list_nodes()\n-    \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    return HttpResponse(\"Operation Successful\")\n-    \n-    \n-@csrf_exempt\n-def mngviewAdd(request):\n-    \n-\n-  \n-    bucket = request.POST.get(\"bucket\")\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    resultsess = cb.get(\"SessionDetails\").value\n-    username = resultsess['username']\n-    dep = resultsess['deploymentname']\n-    \n-    bucket = request.POST.get(\"bucket\")\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['name'] == dep:\n-            temp = res\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    tempbucket= {}\n-    bucketIndex = 0\n-    for res in temp['bucket'] :\n-        if res['name'] == bucket:\n-            tempbucket = res\n-            break\n-        bucketIndex = bucketIndex + 1\n-    \n-    \n-    location = temp['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"number\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    tempbucket = json.dumps(tempbucket)\n-    tempbucket = json.loads(tempbucket)\n-    vms = tempbucket['vm']\n-    \n-    for node in nodesup :\n-        vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id})\n-        \n-    result['deploy'][deploymentIndex]['bucket'][bucketIndex]['vm'] = vms\n-    \n-        \n-    print result       \n-    cb.set(\"user::{0}\".format(username), result)\n-       \n-    \n-    \n-    obj = {'filename':'test.ini', 'status' : 'RD'}\n-    \n-\n-    cb.set(\"requesttable\",obj)\n-\n-   \n-    return render_to_response (\"progress.html\")\n-\n-\n-pollcb=Couchbase.connect(bucket='default', host='localhost')\n-@csrf_exempt\n-def poll_state(request):\n-    \n-    \n-    result = pollcb.get(\"requesttable\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    \n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-\n-@csrf_exempt\n-def poll_ins_state(request):\n-    \n-    pollcbconn=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcbconn.get(\"DeploymentRequest\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-"
    },
    {
      "sha": "a2f78cb66a0a9dccf140523bc8f1542af49542cb",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/90fb8e519b2100141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 170,
      "changes": 170,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/90fb8e519b2100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/90fb8e519b2100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/90fb8e519b2100141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,170 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-<head>\n-\n-   <script>\n-   \n-   \t\tfunction getRam()\n-   \t\t{\n-\t   \t\t\n-   \t\t}\n-   </script>\n-   \n-</head>\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Manage Couchbase Deployment</h1></span>\n-        </div>\n-\n-\n-        \n-        <form onload = \"getRam()\" id=\"couchbaseconfig\" class=\"content\"   action = \"/installation/\" method=\"POST\">\n-\n-\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <table>\n-                    <tbody>\n-                        <tr>\n-                            \n-                            <td>\n-                        \t\t<h3> Couchbase Configuration </h3>\n-                        \t</td>\n-                        \t\n-                        \t<td>\n-                        \t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                        \t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                        \t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                        \t</td>\n-                        \t<td>\n-                        \t    <h3> Replicas</h3>\n-                        \t</td>\n-                        \t<td>\n-                        \t    <select id=\"numrep\" name =\"numrep\">\n-                        \t    \t<option>1</option>\n-                        \t    \t<option>2</option>\n-                        \t    \t<option>3</option>\n-                        \t    </select>\n-                        \t</td>\n-                        </tr>\n-                        \n-                        <tr>\n-                            <td>\n-                                <input type=\"radio\" name=\"operation\" id = \"1\" value=\"1\" checked>Couchbase Server 3.0\n-                            </td>\n-                        </tr>\n-                        \n-                        <tr>\n-                            <td>\n-   \t\t\t\t\t\t\t\t<input type=\"radio\" name=\"operation\" id = \"2\" value=\"2\">Couchbase Server 3.0 + DR XDCR\n-   \t\t\t\t\t\t\t</td>\n-                        </tr>\n-                        <tr>\n-                            <td>\n-                            \t<input type=\"radio\" name= \"operation\" id=\"3\" value =\"3\">Couchbase Server 3.0 + Full text search\n-                            </td>\n-                        </tr>\n-                        <tr>\n-                        \t<td>\n-                            \t<input type=\"radio\" name= \"operation\" id=\"4\" value =\"3\">Couchbase Server 3.0 + Sync Gateway 1.0\n-                            </td>\n-                        </tr>\n-                    </tbody>\n-                \n-                </table>\n-             </fieldset>\n-             \n-             <fieldset>\n-                 <table>\n-                 \t<tbody>\n-                 \t\t<tr>\n-                 \t\t\t<td>\n-                 \t\t\t   <h3>System Configuration</h3>\n-                 \t\t\t</td>\n-                 \t\t</tr>\n-                 \t\t\n-                 \t\t<tr>\n-                 \t\t   <td>\n-                 \t\t       <h5>Cluster RAM Quota</h5>\n-                 \t\t   </td>\n-                 \t\t   <td>\n-                 \t\t       <input type=\"text\" name = \"ramquota\" id=\"ramquota\"/>\n-                 \t\t   </td>\n-                 \t\t   <td>\n-                 \t\t   \t<input  id= \"availableRam\" name=\"availableRAM\"></p>\n-                 \t\t   </td>\n-                 \t\t   <td>\n-\t\t                 \t\t   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n-\t\t                 \t\t   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n-\t\t                 \t\t   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n-\t\t                 \t\t   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n-\t\t                 \t\t   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n-                 \t\t   </td>\n-                 \t\t   \n-                 \t\t   <td>\n-                 \t\t           <h5>Read-only user password</h5>\n-                 \t\t   </td>\n-                 \t\t   <td>\n-                 \t\t   \t\t<input type=\"password\" name=\"rdpasswd\">\n-                 \t\t   </td>\n-                 \t\t</tr>\n-                 \t</tbody>\n-                 </table>\n-             </fieldset>\n-             \n-             <fieldset>\n-             \n-             <table>\n-             \t<tbody>\n-             \n-                   <tr>\n-                       <td>\n-                       \t\t<h3>Bucket Name</h3>\n-                       </td>\n-                       <td>\n-                            <input type =\"text\" name= \"bkname\" value=\"default\"/>\n-                       </td>\n-                       <td>\n-                       &nbsp;&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                       &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                       &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                       &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                       &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                       &nbsp\n-                       </td>\n-                       <td>\n-                            <h3>Bucket Size</h3>\n-                       </td>\n-                       <td>\n-                            <input type=\"text\" name=\"size\">\n-                       </td>\n-                       \n-                   </tr>\n-                   \n-                 </tbody>\n-             </table>\n-             </fieldset>\n-             \n-             <br/><br/><br/><br/>\n-             <div align=\"center\">\n-                    <input type=\"submit\" value=\"Deploy\">\n-             </div>\n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "928ac9e24b230c44a04787b9e507ce1c3ecf958b",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/b04fb4cdde1800141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 114,
      "changes": 114,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/b04fb4cdde1800141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/b04fb4cdde1800141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/b04fb4cdde1800141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,114 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-\n-from couchbase import Couchbase\n-\n-\n-@csrf_exempt\n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    username = password = ''\n-    if request.POST:\n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-\n-        user = authenticate(username=username, password=password)\n-        if user is not None:\n-            if user.is_active:\n-                login(request, user)\n-                state = \"You're successfully logged in!\"\n-            else:\n-                state = \"Your account is not active, please contact the site admin.\"\n-        else:\n-            state = \"Your username and/or password were incorrect.\"\n-            return render_to_response(\"message.html\",{'state':state, 'username': username})\n-\n-    return render_to_response(\"auth.html\",{'state':state, 'username': username})\n-\n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password2')\n-    \n-    #cb.set(\"UserName\",\"uname\")\n-    \n-    #cb.set(\"Password\",\"password\")\n-    \n-    #result = cb.get(\"UserName\")\n-\n-    return render_to_response('deployments.html')\n-\n-@csrf_exempt\n-def couchdep(request) :    \n-    return render_to_response('couchdbdep.html')\n-\n-\n-@csrf_exempt\n-def deploy(request):\n-    \n-    location = request.POST.get(\"loc\")\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = \"AKIAIM32BEWJ4F2K2VGQ\"\n-    AWS_EC2_SECRET_KEY = \"********************\"\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = 'piushs'\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = 'm3.large'\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request.POST.get(\"cpus\")\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        node = driver.create_node(name=\"Test{0}\".format(a), image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;\n-    \n-    for nodes in node :\n-        print nodes\n-                \n-    return HttpResponse(\"Deployment Successful\")\n\\ No newline at end of file"
    },
    {
      "sha": "7fcb4ac75d85d2827dac247236bc927ec3d217c4",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/b0e72667b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 55,
      "changes": 55,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/b0e72667b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/b0e72667b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/b0e72667b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,55 +0,0 @@\n-# XPERF test with views:\n-# 8K ops/sec per cluster\n-# 50% reads, 50% write (30% updates, 10% deletes, 10% inserts)\n-# 16 clients per cluster\n-# 10M dataset\n-# 3 ddocs with 3 views per ddoc\n-# unidirectional\n-# 1 bucket\n-# stop after 6 hours\n-\n-performance.iperf.XVPerfTests.test_vperf_unidir\n-\n-params:\n-\n-# general\n-batch=50\n-kind=json\n-mem_quota=16000\n-\n-# xdcr\n-xdcr_num_buckets=1\n-\n-# load phase\n-items=10000000\n-hot_init_items=2000000\n-wait_for_xdc_replication=1\n-\n-# index phase\n-views=[3, 3, 3]\n-\n-# access phase\n-ratio_sets=0.5\n-ratio_misses=0.025\n-ratio_creates=0.20\n-ratio_deletes=0.25\n-ratio_hot=0.2\n-ratio_hot_gets=0.975\n-ratio_hot_sets=0.975\n-ratio_expirations=0.03\n-bg_max_ops_per_sec=500\n-max_creates=1000000000\n-fg_max_ops=8000000000\n-total_clients=16\n-time=21600\n-\n-# control (defaults: pytests/performance/perf_defaults.py)\n-load_wait_until_drained=1\n-loop_wait_until_drained=0\n-mcsoda_heartbeat=3\n-tear_down=1\n-tear_down_proxy=1\n-tear_down_bucket=0\n-tear_down_cluster=1\n-tear_down_on_setup=0\n-cbm=1"
    },
    {
      "sha": "eaf3ede258a61f9ab89841a44c133bbc2847795b",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/b0f94ca2c42000141b1bbe975bb62daf",
      "status": "removed",
      "additions": 0,
      "deletions": 94,
      "changes": 94,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/b0f94ca2c42000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/b0f94ca2c42000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/b0f94ca2c42000141b1bbe975bb62daf?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,94 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Deployment Form</h1></span>\n-        </div>\n-\n-        <form id=\"couchdbform\" class=\"content\" action=\"/deploy/\" method=\"POST\"> \n-\n-        <table>\n-            <tbody>\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-            <fieldset >\n-                   <tr>\n-                       <td>\n-                       \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                       \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                       \t\t&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                       </td>\n-                       <td>\n-                    \t\t<h3>Enter the deployment name</h3>\n-                    \t</td>\n-                    \t<td>\n-                    \t\t<input name=\"depname\" type = \"text\">\n-                    \t</td>\n-                    \t\t\n-                    \t<td>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                    \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                    \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp\n-                    \t    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp</td> \n-                    \t<td>\n-                    \t\t<h3>Number of servers</h3>\n-                    \t</td>\n-                    \t<td>\n-                    \t\t<input name=\"cpus\" type = \"text\">\n-                    \t</td>\n-                    </tr>\n-             \n-                   <tr>\n-\t\t\t\t\t<h3>Select a Cloud Provider</h3>\n-\t\t\t\t\t<select name=\"provider\">\n-\t\t\t\t\t   <option>AWS </option>\n-\t\t\t\t\t</select>     \n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t\t<h3>Select a region</h3> \n-\t\t\t\t\t<select name=\"loc\">\n-\t\t\t\t\t   <option>East</option>\n-\t\t\t\t\t   <option>West</option>\n-\t\t\t\t\t   <option>SouthEast</option>\n-\t\t\t\t\t</select>\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t\t<h3>Select a machine</h3>  \n-\t\t\t\t\t<select name=\"machine\">\n-\t\t\t\t\t    <option>m1.large</option>\n-\t\t\t\t\t    <option>m3.large</option>\n-\t\t\t\t\t    <option>m1.small</option>\n-\t\t\t\t\t</select>       \n-\t\t\t\t\t\n-\t\t\t\t\t<h3>Couchbase Configuration</h3>\n-\t\t\t\t\t<select name=\"cbserver\">\n-\t\t\t\t\t    <option>Couchbase Server 3.0</option>\n-\t\t\t\t\t    <option>Couchbase Server 3.0 + DR XDCR</option>\n-\t\t\t\t\t    <option>Couchbase server 3.0 + Full text search</option>\n-\t\t\t\t\t    <option>Couchbase Server 3.0 + Sync Gateway</option>\n-\t\t\t\t\t</select>\n-\t\t\t\t\t\n-\t\t\t\t\t<div align= \"center\">\n-\t\t\t\t\t      <input type=\"submit\" value =\"Deploy\">\n-\t\t\t\t\t</div>\n-                </tr>\n-            </fieldset>\n-            </tbody>\n-          </table>           \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "cb15b6447a4efdd0f6208828c1567e5a3c335729",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/c013d392aa2600141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 590,
      "changes": 590,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/c013d392aa2600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/c013d392aa2600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/c013d392aa2600141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,590 +0,0 @@\n-\n-# Create your views here.\n-\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-import time\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-\n-\n-def timestamp():\n-   now = time.time()\n-   localtime = time.localtime(now)\n-   milliseconds = '%03d' % int((now - int(now)) * 1000)\n-   return time.strftime('%Y%m%d%H%M%S', localtime) + milliseconds\n-\n-\n-def _create_node_AWS(request):\n-    location = request['loc']\n-        \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-        \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    for size in sizes:\n-        print size\n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    print image\n-    print size\n-    \n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}_\".format(request['depname']) + \"{0}\".format(tm)\n-        node = driver.create_node(name=nodename, image=image, size=size, ex_keyname=ACCESS_KEY_NAME)\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = driver.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-        \n-    return nodesup\n-        \n-def _create_node_GCE(request):\n-    \n-    Driver = get_driver(Provider.GCE)\n-    print request['email']\n-    print request['loc']\n-    print request['projid']\n-    \n-    '''\n-    gce = Driver('{0}'.format(request['email']), \"./PRIV.pem\",\n-                datacenter='{0}'.format(request['loc']),\n-             project='{0}'.format(request['projid']))\n-    '''\n-    \n-    gce = Driver('265882800008-3blh6m3ocdfhkm6kl2ihhfsls0a44nd6@developer.gserviceaccount.com', './PRIV.pem',\n-             datacenter='us-central1-a',\n-             project='poised-resource-658')\n-    sizes = gce.list_sizes()\n-\n-    for size in sizes:\n-            print size\n-            \n-    images = gce.list_images()\n-\n-    for image in images:\n-        print image\n-        \n-    location = request['loc']\n-    \n-    fp = open(\"/tmp/id_rsa.pub\", 'r')\n-    key = fp.read()\n-    fp.close()\n-    \n-    metadata = {'sshKeys': 'user:%s' %key}\n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    \n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-        node = gce.create_node(name=nodename, image='centos-6', size=request['machine'], ex_metadata= metadata)\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = gce.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-     \n-    return nodesup\n-\n-def _create_node_RackSpace(request):\n-    \n-    cls = get_driver(Provider.RACKSPACE)\n-    \n-    driver = cls(request['username'],request['apikey'])\n-    \n-    pprint(driver.list_sizes())\n-    pprint(driver.list_nodes())\n-\n-    images = driver.list_images()\n-    \n-    images = driver.list_images()\n-\n-    for image in images:\n-       if image.id == \"3a6e29eb-3e17-40ed-9f1e-c6c0fb8fcb76\":\n-           os_image = image\n-           break\n-       \n-    y = request['cpus']\n-    a=0\n-    \n-    n = int(y)\n-    nodes = list()\n-    \n-    while a < n :\n-        tm = timestamp()\n-        nodename = \"{0}\".format(request['depname']) + \"{0}\".format(tm)\n-        node = gce.create_node(name=nodename, image=os_image, size=sizes[4], ex_keyname=key.name)\n-        nodes.append(node)\n-        a = a+1;  \n-    \n-    nodesup = list()    \n-    for node in nodes :\n-        while node.state != 0 :\n-            regionNodes = gce.list_nodes() \n-            node = [val for val in regionNodes if val.id == node.id][0]\n-            continue\n-        nodesup.append(node)\n-    \n-    for node in nodesup:\n-        print node.__dict__\n-       \n-    return nodesup\n-\n-def create_instance(request):\n-    \n-    \n-    if request['provider'] == \"AWS\":\n-       nodes =  _create_node_AWS(request)\n-    elif request['provider'] == \"GCE\":\n-        nodes = _create_node_GCE(request)\n-    elif request['provider'] == \"RackSpace\":\n-        nodes = _create_node_RackSpace(request)\n-        \n-   \n-    \n-    return nodes\n-    \n-def handleNewDeployment(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    bucket =[]\n-    vms = []\n-    \n-    if (request['provider'] == \"AWS\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns': convert_node_ip_string(node.__dict__['extra']['dns_name'])})\n-    elif (request['provider'] == \"GCE\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'pip': convert_node_ip_string(node.private_ips), 'dns':convert_node_ip_string(node.public_ips)})  \n-    elif (request['provider'] == \"RackSpace\"):\n-        for node in nodesup :\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'pip': convert_node_ip_string(node.private_ips), 'dns':convert_node_ip_string(node.public_ips)}) \n-            \n-    bucket.append ({ 'bucketname' : request['bucketname'], 'bucketsize':request['bucket_size']});\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    print \"hehhr\" \n-    print result\n-    \n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    request['status'] = \"IHDE\"        \n-    \n-    if result['deploy'] == None:\n-        print \"1\"\n-        result['deploy'] = [{'request':request, \n-                             'bucket': bucket,\n-                             'vm':vms}]\n-    else :\n-        print \"2\"\n-        result['deploy'].append({'request':request, 'bucket' : bucket, 'vm':vms})\n-    \n-    \n-    print result       \n-    \n-    cb.set(\"DeploymentRequest\",request)\n-    cb.set(\"user::{0}\".format(request['username']), result)\n-    \n-    if (request['provider'] == \"AWS\"):\n-        aws_mkfile(nodesup)\n-    elif(request['provider'] == \"GCE\"):\n-        gce_mkfile(nodesup)\n-        gce_mkfile_cluster(nodesup)\n-    elif(request['provider'] == \"RackSpace\"):\n-        gce_mkfile(nodesup)\n-\n-def handleNewInstances(request,cb):\n-    \n-    nodesup = create_instance(request)\n-    \n-    resultSession = cb.get(\"SessionDetails\").value\n-    \n-    depIndex = resultSession['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(request['username'])).value\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-    \n-    \n-    vms = result['deploy'][depIndex]['vm']\n-    \n-    newVM= []\n-    mainVm = vms[0]\n-    newVM.append(mainVm)\n-    cb.set(\"VMPrimary\",mainVm)\n-    for node in nodesup :\n-        if request['provider'] == \"AWS\":\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':node.__dict__['extra']['dns_name']})\n-            newVM.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':node.__dict__['extra']['dns_name']})\n-        else:\n-            vms.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':convert_node_ip_string(node.public_ips), 'pip':convert_node_ip_string(node.private_ips)})\n-            newVM.append({'ip' : convert_node_ip_string(node.public_ips), 'nodeid':node.id,\n-                        'dns':convert_node_ip_string(node.public_ips), 'pip':convert_node_ip_string(node.private_ips)})\n-         \n-    \n-    result['deploy'][depIndex]['newvm'] = newVM   \n-    result['deploy'][depIndex]['vm'] = vms \n-    cpu = result['deploy'][depIndex]['request']['cpus'] \n-    result['deploy'][depIndex]['request']['cpus']  = int (cpu) +1 \n-    \n-    cb.set(\"user::{0}\".format(request['username']),result)\n-    \n-    print result\n-    \n-    request[\"status\"] = \"IHAD\"\n-    \n-    cb.set(\"DeploymentRequest\",request)\n-     \n-    if request['provider'] == \"AWS\":  \n-        aws_mkfile(nodesup)\n-    else:\n-        gce_mkfile(nodesup)\n-    \n-\n-def del_aws_ins(request, listIns):\n-    \n-    location = request['loc']\n-    \n-    if  location == 'East':\n-        cls = get_driver(Provider.EC2_US_EAST)\n-    \n-    AWS_EC2_ACCESS_ID = request['ackey']\n-    AWS_EC2_SECRET_KEY = request['seckey']\n-    \n-    driver = cls(AWS_EC2_ACCESS_ID, AWS_EC2_SECRET_KEY)\n-    \n-    ACCESS_KEY_NAME = request['keyname']\n-    \n-    \n-    sizes = driver.list_sizes()\n-    \n-    \n-    MY_SIZE = request['machine']\n-    MY_IMAGE = 'ami-76817c1e'\n-    \n-    \n-    size = [s for s in sizes if s.id == MY_SIZE][0]\n-    \n-    image = driver.get_image(MY_IMAGE)\n-    \n-    nodes = driver.list_nodes()\n-    \n-    for node in nodes :\n-        if (node.id in listIns):\n-            driver.destroy_node(node)\n-            \n-def del_inst(request, listIns):\n-    \n-    Driver = get_driver(Provider.GCE)\n-    print request['email']\n-    print request['loc']\n-    print request['projid']\n-    \n-    '''\n-    gce = Driver('{0}'.format(request['email']), \"./PRIV.pem\",\n-                datacenter='{0}'.format(request['loc']),\n-             project='{0}'.format(request['projid']))\n-    '''\n-    \n-    gce = Driver('265882800008-3blh6m3ocdfhkm6kl2ihhfsls0a44nd6@developer.gserviceaccount.com', './PRIV.pem',\n-             datacenter='us-central1-a',\n-             project='poised-resource-658')\n-    \n-    nodes = gce.list_nodes()\n-    \n-    for node in nodes :\n-        if (node.id in listIns):\n-            gce.destroy_node(node)\n-    \n-\n-def delInstance(request,cb):\n-      \n-    machines = request['delmachines']\n-    \n-    listIns = []\n-    for mc in machines:\n-        listIns.append(mc['nodeid'])\n-        \n-    pvm = cb.get(\"VMPrimary\").value\n-    print list\n-\n-     \n-    sessRes = cb.get(\"SessionDetails\").value\n-    username = sessRes['username']\n-    depname = sessRes['deploymentname']\n-    depIndex = sessRes['deploymentIndex']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value  \n-    \n-    a = 0;\n-    listDns = []\n-    listPip = []\n-    for mc in machines:\n-        listDns.append(mc['dns'])\n-        listPip.append(mc['pip'])\n-        \n-    \n-    \n-    print listDns\n-    newVM = []\n-    \n-    for res in result['deploy'][depIndex]['vm']:\n-        if res['dns'] not in listDns:\n-                newVM.append(res)\n-    \n-    result['deploy'][depIndex]['vm'] = newVM\n-    \n-    cb.set ('user::{0}'.format(username), result)\n-    cpu = result['deploy'][depIndex]['request']['cpus']\n-    result['deploy'][depIndex]['request']['cpus'] = int(cpu) - len(machines)\n-    \n-   \n-    \n-    if request['provider'] == \"AWS\":\n-        \n-        for res in listDns:\n-            cmd='sudo ./couchbase-cli rebalance -c {0}  --server-remove={1}  -u Administrator -p password'.format(pvm,res)\n-            p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                                  cwd = r'/root/opt/couchbase/bin', shell =True)\n-            p4.wait()\n-        \n-        del_aws_ins(request, listIns)\n-    else:\n-        \n-        for res in listPip:\n-            cmd='sudo ./couchbase-cli rebalance -c {0}  --server-remove={1}  -u Administrator -p password'.format(pvm,res)\n-            p4 = subprocess.Popen(r'{0}'.format(cmd),\n-                                  cwd = r'/root/opt/couchbase/bin', shell =True)\n-            p4.wait()\n-            \n-        del_inst(request,listIns)\n-        \n-    request['status'] = \"IHDEL\"\n-    print result       \n-    cb.set(\"DeploymentRequest\", request)\n-    \n-    \n-    \n-def main():\n-    cb = Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-\n-    while True:\n-        try:\n-            request = cb.get(\"DeploymentRequest\").value\n-        except:\n-            continue\n-        \n-        if request['status'] == \"RDDE\":\n-            handleNewDeployment(request,cb)  \n-        elif request['status'] == \"RDAD\":    \n-            handleNewInstances(request,cb)  \n-        elif request['status'] == \"RDDEL\":\n-            delInstance(request,cb)       \n-            \n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('u\\'', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-    \n-\n-def aws_mkfile_add(vm, user, key):\n-    '''\n-    filekey = open(\"/tmp/piushs.pem\".format(user), \"w\")\n-    filekey.write(key)\n-    filekey.close()\n-    '''\n-    cfgfile = open(\"/tmp/addIns.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/{0}.pem\".format(user))\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for v in vm:\n-        \n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(v['dns']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def gce_mkfile(nodesup):\n-   \n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','user')\n-    Config.set('global','ssh_key', \"/tmp/id_rsa\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        count = count +1\n-    \n-    Config.add_section('membase')  \n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def gce_mkfile_cluster(nodesup):\n-   \n-    cfgfile = open(\"/tmp/testCluster.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','user')\n-    Config.set('global','ssh_key', \"/tmp/id_rsa\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        if count == 1:\n-            a = convert_node_ip_string(node.public_ips)\n-            Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        else:\n-            a = convert_node_ip_string(node.private_ips)\n-            Config.set('servers', \"{0}\".format(count),\"{0}\".format(a))\n-        count = count +1\n-    \n-    Config.add_section('membase')  \n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-def aws_mkfile(nodesup):\n-    \n-    cfgfile = open(\"/tmp/test.ini\",'w')\n-    \n-    Config = ConfigParser.ConfigParser()\n-    \n-    Config.add_section('global')\n-    Config.set('global','username','ec2-user')\n-    Config.set('global','ssh_key', \"/tmp/piushs.pem\")\n-    Config.set('global','port', \"8091\")\n-    \n-    Config.add_section('servers')\n-    \n-    count = 1\n-    for node in nodesup:\n-        a = convert_node_ip_string(node.public_ips)\n-        Config.set('servers', \"{0}\".format(count),\"{0}\".format(node.__dict__['extra']['dns_name']))\n-        count = count +1\n-    \n-    Config.add_section('membase')\n-    Config.set('membase','rest_username',\"Administrator\")\n-    Config.set('membase','rest_password', \"password\")\n-    \n-    \n-    Config.write(cfgfile)\n-    cfgfile.close()\n-    \n-    cfgfile = open(\"/tmp/testCluster.ini\",'w')\n-    Config.write(cfgfile)\n-    cfgfile.close()\n-\n-if __name__ == \"__main__\":\n-    main()"
    },
    {
      "sha": "18fff3d99f7419238209717ececcdfbafd8b4c99",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/c05c50dc542600141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 387,
      "changes": 387,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/c05c50dc542600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/c05c50dc542600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/c05c50dc542600141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,387 +0,0 @@\n-\n-# Create your views here.\n-\n-from django.shortcuts import render_to_response\n-from django.contrib.auth import authenticate, login\n-\n-from django.views.decorators.csrf import csrf_exempt\n-from django.http import HttpResponse\n-\n-from libcloud.compute.types import Provider\n-from libcloud.compute.providers import get_driver\n-\n-import json\n-\n-from couchbase import Couchbase\n-from couchbase import *\n-\n-import subprocess\n-import os\n-from django.conf import settings\n-\n-import ConfigParser\n-from time import sleep\n-\n-import sys\n-\n-import copy\n-\n-\n-@csrf_exempt  \n-def getRamSize(request):\n-    \n-    cb = Couchbase.connect(bucket=\"default\", host = \"localhost\")\n-    \n-    result = cb.get(\"Machine\").value\n-    try:\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-\n-    c = result[request.POST.get('provider')][request.POST.get('machine')]\n-    return HttpResponse(c)\n-    \n-@csrf_exempt  \n-def auth_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb= Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-    diction = {\"AWS\":{'m3.large': '3584'}, \"GCE\":{\"n1-highmem-4\":'3584', \"n1-highmem-8\":'3584'}}\n-    cb.set (\"Machine\", diction )\n-    return render_to_response('auth.html',{'state':state})\n-\n-@csrf_exempt\n-def login_user(request):\n-    state = \"Please log in below...\"\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    username = password = ''\n-    if request.POST:\n-        \n-        username = request.POST.get('username')\n-        password = request.POST.get('password')\n-        \n-        try :\n-            result = cb.get(\"user::{0}\".format(username)).value\n-            print result\n-            \n-            try :\n-                store = result\n-                result = json.loads(result)  \n-            except:\n-                result = store\n-                  \n-            session = {}\n-        \n-            if (result['password1'] == password) :\n-                session['username'] = username\n-                cb.set(\"SessionDetails\",session)\n-                return render_to_response(\"deployments.html\",{'result':result})\n-            else :\n-                return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})  \n-        except:\n-               return render_to_response(\"auth.html\",{'error':\"IU\", 'message':\"Your username or password is invalid\"})        \n- \n-@csrf_exempt\n-def register_user(request):\n-    return render_to_response('registration.html')\n-\n-@csrf_exempt\n-def create_account(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    uname = request.POST.get('username')\n-    password = request.POST.get('password')\n-    accountname = request.POST.get('accountName')\n-    email = request.POST.get('email')\n-    \n-    session = {}\n-        \n-    session['username'] = uname\n-    cb.set(\"SessionDetails\",session)\n-    \n-    value = {'username' : uname, \n-             'password1':password,  \n-             'accountName':accountname,\n-             'email' :email,\n-             'deploy':None}\n-    \n-    print value['username']\n-    \n-    cb.set(\"user::{0}\".format(uname),json.dumps(value))\n-                                              \n-    \n-    result = cb.get(\"user::{0}\".format(uname)).value\n-    return render_to_response('deployments.html', {'result' :result})\n-\n-@csrf_exempt\n-def handleProgress(request):\n-    \n-    cb = Couchbase.connect(bucket=\"default\", host=\"localhost\")\n-    res = cb.get(\"SessionDetails\").value\n-    username = res['username']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    return render_to_response('deployments.html',{'result':result})\n-\n-@csrf_exempt\n-def couchdep(request) :\n-    return render_to_response('couchdbdep.html')\n-\n-def convert_node_ip_string(st):\n-        a = \"{0}\".format(st)\n-        a = a.replace('[', '')\n-        a = a.replace('\\'','')\n-        a = a.replace(']','')\n-        return a\n-        \n-        \n-def save_dep_GCE(storeReq,request):\n-    \n-    testFile = request.FILES['permission']\n-    textf = testFile.read()\n-    \n-    fp = open('/tmp/PRIV.pem','w')    \n-    fp.write(textf)\n-    fp.close()\n-        \n-\n-@csrf_exempt\n-def save_deployment(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get(\"SessionDetails\").value\n-    \n-    if (result != None):\n-        username = result['username']\n-    \n-    result['deploymentname'] = request.POST.get('depname')\n-    \n-    cb.set(\"SessionDetails\",result)\n-   \n-    provider = request.POST.get('provider')\n-    \n-    'Use the parameters in the request for creating instances'\n-    \n-    if provider == \"AWS\":\n-        storeReq = copy.deepcopy(request.POST)\n-    if provider == \"GCE\":\n-        storeReq = copy.deepcopy(request.POST)\n-        save_dep_GCE(storeReq, request)\n-    \n-    storeReq['status'] = \"WA\"\n-    storeReq['username'] = username\n-    \n-    cb.set(\"DeploymentRequest\",storeReq)\n-    \n-    test = cb.get(\"DeploymentRequest\").value\n-    print \"<<<<\"\n-    print test\n-    print \">>>>>\"\n-    \n-    \n-    return render_to_response(\"couchbaseconfiguration.html\",{'provider':storeReq['provider'],\n-                                                             'machine':storeReq['machine'], 'cpus':storeReq['cpus']})\n-\n-@csrf_exempt\n-def mngcluster(request):\n-    \n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = cb.get (\"SessionDetails\").value\n-\n-    result['deploymentname'] = request.POST.get('deplist')\n-    \n-    cb.set(\"SessionDetails\", result)\n-    \n-    username = result['username']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    dep = request.POST.get('deplist')\n-    \n-    print result\n-    \n-    \n-    temp ={}\n-    \n-    try :\n-        store = result\n-        result = json.loads(result)\n-    except:\n-        result = store\n-   \n-    if result ['deploy'] != None :     \n-        for res in result['deploy'] :\n-            if res['request']['depname'] == dep:\n-                temp = res\n-                break\n-\n-    if bool(temp):\n-        return render_to_response(\"managecluster.html\", {'temp':temp})\n-    else:\n-        return render_to_response(\"deployments.html\", None)\n-\n-@csrf_exempt\n-def conf_couchbase(request):\n-\n-    print \"Coming Here\"\n-    return render_to_response(\"couchbaseconfiguration.html\",None)\n-    \n-@csrf_exempt\n-def install(request):\n-    \n-    cb = Couchbase.connect (bucket='default', host=\"localhost\")\n-    \n-    store = cb.get(\"DeploymentRequest\").value\n-    \n-    store['bucketname'] = request.POST.get('bkname')\n-    store['operation'] = request.POST.get('operation')\n-    store['replica'] = request.POST.get ('numrep')\n-    store['password_sasl'] = request.POST.get('rdpasswd')\n-    store['bucket_size'] = request.POST.get('size')\n-    store['ramquota'] = request.POST.get('ramquota')\n-    \n-    \n-    store['status'] = 'RDDE'\n-    cb.set (\"DeploymentRequest\", store)\n-    \n-    cpu = store['cpus']\n-    return render_to_response(\"progress.html\",{'cpu':cpu})\n-\n-@csrf_exempt\n-def mngviewDel(request):\n-\n-    \n-    bucket = request.POST.get(\"bucket\")\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    resultsess = cb.get(\"SessionDetails\").value\n-    username = resultsess['username']\n-    dep = resultsess['deploymentname']\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-\n-    \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['request']['depname'] == dep:\n-            temp = res['request']\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    resultsess['deploymentIndex'] = deploymentIndex\n-    \n-    cb.set(\"SessionDetails\", resultsess)\n-\n-    machines = request.POST.getlist('ck')\n-\n-    \n-    vms = result['deploy'][deploymentIndex]['vm']    \n-     \n-    flag = 0\n-    for vm in vms:\n-        for mc in machines:\n-            if vm['dns'] != mc:\n-                flag = 1\n-                cb.set(\"VMPrimary\",vm['dns'])\n-                break\n-        if flag == 1:\n-            break\n-        \n-    machineInfo=[]\n-    for vm in vms:\n-        for mc in machines:\n-            if vm['dns'] == mc:\n-                machineInfo.append(vm)\n-                break\n-        \n-    delReq = result['deploy'][deploymentIndex]['request']\n-    delReq['status'] = \"RDDEL\"\n-    delReq['delmachines'] = machineInfo\n-    cb.set(\"DeploymentRequest\", delReq)\n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    ret = cb.get(\"DeploymentRequest\").value\n-    \n-    while ret['status'] != \"IHDEL\":\n-        continue\n-    \n-    return render_to_response(\"deployments.html\", {'result':result})\n-    \n-    \n-@csrf_exempt\n-def mngviewAdd(request):\n-    \n-    cb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    resultsess = cb.get(\"SessionDetails\").value\n-    username = resultsess['username']\n-    dep = resultsess['deploymentname']\n-    \n-    \n-    result = cb.get(\"user::{0}\".format(username)).value\n-    \n-    print result\n-  \n-    deploymentIndex = 0;\n-\n-    temp ={}\n-    for res in result['deploy'] :\n-        if res['request']['depname'] == dep:\n-            temp = res['request']\n-            break\n-        deploymentIndex = deploymentIndex + 1\n-    \n-    resultsess['deploymentIndex'] = deploymentIndex\n-    \n-    cb.set(\"SessionDetails\",resultsess)\n-    \n-    temp['status'] = 'RDAD'\n-    temp['cpus'] = request.POST.get('number')\n-    \n-    cb.set(\"DeploymentRequest\",temp)\n-    \n-    cpu = request.POST.get('number')\n-    return render_to_response (\"progress.html\", {'cpu':cpu})\n-\n-\n-@csrf_exempt\n-def poll_state(request):\n-    \n-    pollcb=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcb.get(\"DeploymentRequest\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    \n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-\n-@csrf_exempt\n-def poll_ins_state(request):\n-    \n-    pollcbconn=Couchbase.connect(bucket='default', host='localhost')\n-    \n-    result = pollcbconn.get(\"DeploymentRequest\").value\n-    \n-    c = result['status']\n-    \n-    c= json.dumps(c)\n-    return HttpResponse(c,mimetype='application/json')\n-\n-\n-"
    },
    {
      "sha": "304d5f0ac00fc844ef888dfbcf1a292e21e57587",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/c0709be4f62600141606e89edaa2b7ea",
      "status": "removed",
      "additions": 0,
      "deletions": 122,
      "changes": 122,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/c0709be4f62600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/c0709be4f62600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/c0709be4f62600141606e89edaa2b7ea?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab",
      "patch": "@@ -1,122 +0,0 @@\n-\n-\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n-\n-\n-\n-\n-<html>\n-\n-\n-<div id=\"body\" class=\"backgroundImage\">\n-\n-    <div class=\"account ui-corner-all\">\n-\n-        <div class=\"title ui-corner-all\">\n-            <span><h1 align=\"center\"; style=\"font-size: 100%; margin-bottom: 0;\">Log in</h1></span>\n-        </div>\n- \n-        <form id=\"depform\" class=\"content\" action=\"/mngcluster/\" method=\"POST\"> \n-\n-            <script>\n-               var dep = []\n-               var list = []\n-            </script>\n-            <input type=\"hidden\" name=\"r\" value=\"\"/>\n-\n-            <fieldset >\n-                <div id=\"deploymentsSection\" class=\"section\">\n-                <h2>Couchbase Deployments</h2>\n-                \n-                <p id = \"depstatus\" />\n-          \n-                <div class=\"h2ActionBtns\" align = \"center\">\n-            \t    <a class=\"button icon create\" href=\"/couchdep/\">Create new</a>\n-                </div>\n-                <div class=\"noData\"></div>\n-              \n-                <select  id=\"deplist\" name=\"deplist\">\n-                 \t\t\n-                 \t\t<script>\n-                 \t\t\tvar count =0\n-                 \t\t\tconsole.log(count)\n-                 \t\t</script>\n-                  \t\t{% for res in result.deploy %}\n-                     \t\t<option value=\"{{ res.request.depname }}\">{{res.request.depname}}</option>\n-                     \t\t\n-                     \t\t<script>\n-                     \t    \tvar map ={}\n-                     \t    \t\n-                     \t    \tmap[\"name\"] = \"{{ res.name }}\"\n-                     \t    \tmap['cpu'] = \"{{ res.cpu }}\"\n-                     \t    \tmap['cbi'] = \"{{ res.cbi }}\"\n-                     \t    \tmap['Provider'] = \"{{ res.Provider }}\"\n-                     \t    \tdep.push(map)\n-                     \t    \tlist.push(\"{{ res.name }}\")\n-                     \t    \t\n-                     \t    \tcount = count + 1\n-                     \t    \tdocument.getElementById(\"deplist\").style.visibility = \"visible\"\n-                     \t    </script>\n-                     \t    \t\n-                  \t\t{% endfor %} \n-                  \t\n-\t\t\t    </select>\n-\t\t\t    \n-\t\t\t    \n-\t\t\t    \t<script>\n-                  \t\tif (count == 0)\n-                  \t\t{\n-                  \t\t\tconsole.log(count)\n-                  \t\t\tdocument.getElementById(\"deplist\").style.visibility = \"hidden\"\t\n-                  \t\t\tdocument.getElementById (\"depstatus\").value = \"No deployments yet\"\n-                  \t\t}\n-                  \t\telse\n-                  \t\t{\n-                  \t\t\tconsole.log(count)\n-                  \t\t}\n-                \t</script>\n-\t\t\t    <br> </br>\n-\t\t\t    \n-                <input type = \"submit\" value = \"Check Deployment\" >\n-                </div>\n-            </fieldset>       \n-       \n-       \t\t<script name = \"text/javascript\">\n-          \n-      \t\t\t function getSelectedText(elementId) {\n-              \t\t\t  var elt = document.getElementById(elementId);\n-\n-               \t\t\t if (elt.selectedIndex == -1)\n-                    \t\treturn null;\n-\n-               \t\t\treturn elt.options[elt.selectedIndex].text;\n-       \t\t\t } \n-       \n-\t\t\t\t function test()\n-\t\t\t\t {\n-\t\t\t\t\t     var temp = getSelectedText(\"deplist\")\n-\t\t\t\t\t     \n-\t\t\t\t\t     var str=\"\";\n-\t\t\t \t\t     \n-\t\t\t\t\t     for (var i=0; i<dep.length; i++)\n-\t\t\t\t\t     { \n-\t\t\t\t\t    \t    if (temp == dep[i]['name'])\n-\t\t\t\t\t    \t    {\n-\t\t\t\t\t    \t    \tstr = str + dep[i]['name'] + \",\" + dep[i]['Provider'] + \",\" + dep[i]['cbi'] + \",\" + dep[i]['cpu'] + \"\\n\"\n-\t\t\t\t\t    \t    \tdocument.getElementById('demo').innerHTML = str\n-\t\t\t\t\t    \t    }\n-\t\t\t\t\t     }\n-\t\t\t\t\t     \n-\t\t\t\t }\n-\t\t\t\t \n-\t\t    </script> \n-\n-\t\t\t<p id = \"demo\"> </p>    \n-\t\t        \n-        </form>\n-    </div>\n-</div> <!-- END #body -->\n-</body>\n-</html>\n-\n-"
    },
    {
      "sha": "a0c69435c8c4f83f593254b48ad649eb547063d6",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/f0b83367b71900141177f3adeef604ca",
      "status": "removed",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/f0b83367b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/09da2942f50f8a56b2af05165b41e1520a6b8bab/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/f0b83367b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/f0b83367b71900141177f3adeef604ca?ref=09da2942f50f8a56b2af05165b41e1520a6b8bab"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/f0d72b5cb22100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/f0d72b5cb22100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/f0d72b5cb22100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/14/f0d72b5cb22100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/12680f67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/12680f67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/12680f67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/12680f67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/304332d9ca2000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/304332d9ca2000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/304332d9ca2000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/304332d9ca2000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/30ea3cf0fc1b00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/30ea3cf0fc1b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/30ea3cf0fc1b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/30ea3cf0fc1b00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/40d86022d81900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/40d86022d81900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/40d86022d81900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/40d86022d81900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/50a2ecd34f2600141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/50a2ecd34f2600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/50a2ecd34f2600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/50a2ecd34f2600141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/50b2eb34462400141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/50b2eb34462400141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/50b2eb34462400141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/50b2eb34462400141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/50d0780abc2800141066bfd86697bc67",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/50d0780abc2800141066bfd86697bc67",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/50d0780abc2800141066bfd86697bc67",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/50d0780abc2800141066bfd86697bc67?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/609786fcf42700141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/609786fcf42700141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/609786fcf42700141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/609786fcf42700141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/70614c5d831b00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/70614c5d831b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/70614c5d831b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/70614c5d831b00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/709cadc63b2600141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/709cadc63b2600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/709cadc63b2600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/709cadc63b2600141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/803b0009e42000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/803b0009e42000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/803b0009e42000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/803b0009e42000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/83363067b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/83363067b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/83363067b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/83363067b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/a0fb0430ec2500141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/a0fb0430ec2500141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/a0fb0430ec2500141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/a0fb0430ec2500141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/a48b1a67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/a48b1a67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/a48b1a67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/a48b1a67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/b0090306731600141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/b0090306731600141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/b0090306731600141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/b0090306731600141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/b0125441f62000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/b0125441f62000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/b0125441f62000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/b0125441f62000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/b02fd495d12100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/b02fd495d12100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/b02fd495d12100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/b02fd495d12100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/c0073d67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/c0073d67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/c0073d67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/c0073d67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/c0f6521e102300141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/c0f6521e102300141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/c0f6521e102300141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/c0f6521e102300141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/d0fd9a63362100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/d0fd9a63362100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/d0fd9a63362100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/d0fd9a63362100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/d2814467b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/d2814467b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/d2814467b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/d2814467b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/e01840aa821800141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/e01840aa821800141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/e01840aa821800141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/15/e01840aa821800141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/0000e7d0621300141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/0000e7d0621300141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/0000e7d0621300141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/0000e7d0621300141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/50b01ef43d1400141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/50b01ef43d1400141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/50b01ef43d1400141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/50b01ef43d1400141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/603e663bae2100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/603e663bae2100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/603e663bae2100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/603e663bae2100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/6092eaf4102300141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/6092eaf4102300141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/6092eaf4102300141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/6092eaf4102300141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/60fab78deb1500141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/60fab78deb1500141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/60fab78deb1500141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/60fab78deb1500141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/907ec1a4e11800141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/907ec1a4e11800141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/907ec1a4e11800141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/907ec1a4e11800141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/90b03767b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/90b03767b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/90b03767b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/90b03767b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/a09b8ed5a01a00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/a09b8ed5a01a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/a09b8ed5a01a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/a09b8ed5a01a00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/a2fc1c67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/a2fc1c67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/a2fc1c67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/a2fc1c67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/b050f851172100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/b050f851172100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/b050f851172100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/b050f851172100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/c0510767b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/c0510767b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/c0510767b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/c0510767b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/c0df9ea84b2800141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/c0df9ea84b2800141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/c0df9ea84b2800141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/c0df9ea84b2800141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d02d9895312100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d02d9895312100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d02d9895312100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d02d9895312100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d047cfded52300141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d047cfded52300141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d047cfded52300141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d047cfded52300141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d06a3367b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d06a3367b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d06a3367b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d06a3367b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d0e39ea2802100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d0e39ea2802100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d0e39ea2802100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d0e39ea2802100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d0f8bbcce82000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d0f8bbcce82000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d0f8bbcce82000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/d0f8bbcce82000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/e1203167b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/e1203167b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/e1203167b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/e1203167b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/f0401cd08f2100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/f0401cd08f2100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/f0401cd08f2100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/16/f0401cd08f2100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/00240b3b351b00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/00240b3b351b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/00240b3b351b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/00240b3b351b00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/0035c807a82600141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/0035c807a82600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/0035c807a82600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/0035c807a82600141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/00e4e6fe0b1c00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/00e4e6fe0b1c00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/00e4e6fe0b1c00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/00e4e6fe0b1c00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/00e9b7e0d41800141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/00e9b7e0d41800141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/00e9b7e0d41800141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/00e9b7e0d41800141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/30e661f5ab2800141066bfd86697bc67",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/30e661f5ab2800141066bfd86697bc67",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/30e661f5ab2800141066bfd86697bc67",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/30e661f5ab2800141066bfd86697bc67?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/50f4de1ffa2700141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/50f4de1ffa2700141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/50f4de1ffa2700141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/50f4de1ffa2700141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/519c4a67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/519c4a67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/519c4a67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/519c4a67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/60344d67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/60344d67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/60344d67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/60344d67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/607894ace42500141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/607894ace42500141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/607894ace42500141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/607894ace42500141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/6097d33f002800141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/6097d33f002800141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/6097d33f002800141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/6097d33f002800141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/60b41b21a41a00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/60b41b21a41a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/60b41b21a41a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/60b41b21a41a00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/60c0b3323b2800141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/60c0b3323b2800141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/60c0b3323b2800141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/60c0b3323b2800141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/70f2db2fbd1b00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/70f2db2fbd1b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/70f2db2fbd1b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/70f2db2fbd1b00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/80d2d8d2f51b00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/80d2d8d2f51b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/80d2d8d2f51b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/80d2d8d2f51b00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/a06cf8fe102300141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/a06cf8fe102300141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/a06cf8fe102300141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/a06cf8fe102300141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/a06f8d46701600141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/a06f8d46701600141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/a06f8d46701600141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/a06f8d46701600141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d01a4059cf2000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d01a4059cf2000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d01a4059cf2000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d01a4059cf2000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d024e2b3aa1b00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d024e2b3aa1b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d024e2b3aa1b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d024e2b3aa1b00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d0458877a21600141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d0458877a21600141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d0458877a21600141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d0458877a21600141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d3711d67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d3711d67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d3711d67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d3711d67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d3a62967b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d3a62967b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d3a62967b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/d3a62967b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/e07ce1840b2300141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/e07ce1840b2300141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/e07ce1840b2300141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/17/e07ce1840b2300141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/04f74467b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/04f74467b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/04f74467b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/04f74467b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/10061f99ee2000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/10061f99ee2000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/10061f99ee2000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/10061f99ee2000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/10612567b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/10612567b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/10612567b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/10612567b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/10f604ddca2000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/10f604ddca2000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/10f604ddca2000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/10f604ddca2000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/31732f67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/31732f67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/31732f67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/31732f67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/4024ad55782100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/4024ad55782100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/4024ad55782100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/4024ad55782100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/4046a91cb12600141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/4046a91cb12600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/4046a91cb12600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/4046a91cb12600141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/607e1767b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/607e1767b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/607e1767b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/607e1767b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/70e2dcbcdb1a00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/70e2dcbcdb1a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/70e2dcbcdb1a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/70e2dcbcdb1a00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/90850276292100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/90850276292100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/90850276292100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/90850276292100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/a078a0ecd52000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/a078a0ecd52000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/a078a0ecd52000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/a078a0ecd52000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/a0ad2ebce41500141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/a0ad2ebce41500141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/a0ad2ebce41500141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/a0ad2ebce41500141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/b036e769761600141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/b036e769761600141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/b036e769761600141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/b036e769761600141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/b0f3681c021c00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/b0f3681c021c00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/b0f3681c021c00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/b0f3681c021c00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/d07538c49a1900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/d07538c49a1900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/d07538c49a1900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/d07538c49a1900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/e3092067b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/e3092067b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/e3092067b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/e3092067b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/f0e7a28f1e1400141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/f0e7a28f1e1400141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/f0e7a28f1e1400141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/18/f0e7a28f1e1400141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/009b0067b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/009b0067b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/009b0067b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/009b0067b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/00ef171bfd2700141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/00ef171bfd2700141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/00ef171bfd2700141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/00ef171bfd2700141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/10461f66041c00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/10461f66041c00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/10461f66041c00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/10461f66041c00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/205d628bab2600141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/205d628bab2600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/205d628bab2600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/205d628bab2600141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/3066c493082300141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/3066c493082300141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/3066c493082300141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/3066c493082300141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/30f6db8e0b2300141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/30f6db8e0b2300141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/30f6db8e0b2300141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/30f6db8e0b2300141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/503dbd6a982100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/503dbd6a982100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/503dbd6a982100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/503dbd6a982100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/6010a1597e2600141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/6010a1597e2600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/6010a1597e2600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/6010a1597e2600141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/701e9f74fc2000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/701e9f74fc2000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/701e9f74fc2000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/701e9f74fc2000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/80867f2daa1b00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/80867f2daa1b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/80867f2daa1b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/80867f2daa1b00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/80c4890cf12000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/80c4890cf12000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/80c4890cf12000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/80c4890cf12000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/90c3dc81f62000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/90c3dc81f62000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/90c3dc81f62000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/90c3dc81f62000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/a07077643c1400141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/a07077643c1400141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/a07077643c1400141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/a07077643c1400141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/b0668839e71800141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/b0668839e71800141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/b0668839e71800141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/b0668839e71800141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/b06d4792451900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/b06d4792451900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/b06d4792451900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/b06d4792451900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/b0ab3aa1fb2200141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/b0ab3aa1fb2200141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/b0ab3aa1fb2200141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/b0ab3aa1fb2200141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/c031fd8cd42300141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/c031fd8cd42300141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/c031fd8cd42300141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/c031fd8cd42300141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/c05776871d2800141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/c05776871d2800141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/c05776871d2800141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/c05776871d2800141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/e029c60a4e1900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/e029c60a4e1900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/e029c60a4e1900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/e029c60a4e1900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/e05c2767b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/e05c2767b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/e05c2767b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/e05c2767b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/f0c339679a1b00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/f0c339679a1b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/f0c339679a1b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/f0c339679a1b00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/f1832767b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/f1832767b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/f1832767b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/19/f1832767b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/02410f67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/02410f67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/02410f67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/02410f67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/02bb4e67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/02bb4e67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/02bb4e67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/02bb4e67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/10345eb8002800141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/10345eb8002800141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/10345eb8002800141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/10345eb8002800141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/2002cea3c92000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/2002cea3c92000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/2002cea3c92000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/2002cea3c92000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/30cb4024d02000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/30cb4024d02000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/30cb4024d02000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/30cb4024d02000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/504edf75f62000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/504edf75f62000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/504edf75f62000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/504edf75f62000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/50ad160cee1500141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/50ad160cee1500141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/50ad160cee1500141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/50ad160cee1500141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/607e2437a02100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/607e2437a02100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/607e2437a02100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/607e2437a02100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/6081152a631300141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/6081152a631300141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/6081152a631300141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/6081152a631300141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/60da37b4431900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/60da37b4431900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/60da37b4431900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/60da37b4431900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/701c5ce4462400141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/701c5ce4462400141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/701c5ce4462400141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/701c5ce4462400141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/808a7fcd931a00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/808a7fcd931a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/808a7fcd931a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/808a7fcd931a00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/90e51943fc2700141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/90e51943fc2700141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/90e51943fc2700141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/90e51943fc2700141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/91d51c67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/91d51c67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/91d51c67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/91d51c67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/92b03767b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/92b03767b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/92b03767b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/92b03767b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/a07c530ccd2000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/a07c530ccd2000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/a07c530ccd2000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/a07c530ccd2000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/b04175d8e12500141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/b04175d8e12500141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/b04175d8e12500141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/b04175d8e12500141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/c0a4eeb7812800141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/c0a4eeb7812800141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/c0a4eeb7812800141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/c0a4eeb7812800141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/d017de13f62600141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/d017de13f62600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/d017de13f62600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/d017de13f62600141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/d02d5b5b2b2100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/d02d5b5b2b2100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/d02d5b5b2b2100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/d02d5b5b2b2100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/d1cb0e67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/d1cb0e67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/d1cb0e67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/d1cb0e67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/e072c389b51900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/e072c389b51900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/e072c389b51900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/e072c389b51900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/f0087797ce2000141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/f0087797ce2000141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/f0087797ce2000141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/f0087797ce2000141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/f07a0643f01500141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/f07a0643f01500141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/f07a0643f01500141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/f07a0643f01500141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/f0c4a130172100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/f0c4a130172100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/f0c4a130172100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1a/f0c4a130172100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/20b9c649351400141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/20b9c649351400141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/20b9c649351400141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/20b9c649351400141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/32553467b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/32553467b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/32553467b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/32553467b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/407482e29f1a00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/407482e29f1a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/407482e29f1a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/407482e29f1a00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/608e7482e62500141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/608e7482e62500141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/608e7482e62500141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/608e7482e62500141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/70161a67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/70161a67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/70161a67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/70161a67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/8060fbba441b00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/8060fbba441b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/8060fbba441b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/8060fbba441b00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/90b5877bf92200141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/90b5877bf92200141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/90b5877bf92200141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/90b5877bf92200141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/90c9ddbeee1b00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/90c9ddbeee1b00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/90c9ddbeee1b00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/90c9ddbeee1b00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/90f02bc6a91600141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/90f02bc6a91600141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/90f02bc6a91600141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/90f02bc6a91600141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a01a1867b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a01a1867b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a01a1867b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a01a1867b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a052b46bea2600141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a052b46bea2600141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a052b46bea2600141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a052b46bea2600141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a0e588e3cc1900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a0e588e3cc1900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a0e588e3cc1900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a0e588e3cc1900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a0f53267b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a0f53267b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a0f53267b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/a0f53267b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/b0769da4a01a00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/b0769da4a01a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/b0769da4a01a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/b0769da4a01a00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/b21c3367b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/b21c3367b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/b21c3367b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/b21c3367b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/c0715567b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/c0715567b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/c0715567b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/c0715567b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/c09b1188871a00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/c09b1188871a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/c09b1188871a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/c09b1188871a00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/c0b45281322100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/c0b45281322100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/c0b45281322100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/c0b45281322100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/e0a12e3bd52100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/e0a12e3bd52100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/e0a12e3bd52100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/e0a12e3bd52100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/e0a16564a31600141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/e0a16564a31600141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/e0a16564a31600141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/e0a16564a31600141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/f048ccce9a1900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/f048ccce9a1900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/f048ccce9a1900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/f048ccce9a1900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/f0f95847c61900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/f0f95847c61900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/f0f95847c61900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1b/f0f95847c61900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/0031bc48a92100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/0031bc48a92100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/0031bc48a92100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/0031bc48a92100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/20f0b8f0012700141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/20f0b8f0012700141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/20f0b8f0012700141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/20f0b8f0012700141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/22351e67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/22351e67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/22351e67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/22351e67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/248f0f67b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/248f0f67b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/248f0f67b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/248f0f67b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/309cd07d8a1a00141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/309cd07d8a1a00141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/309cd07d8a1a00141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/309cd07d8a1a00141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/30ef6170d31800141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/30ef6170d31800141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/30ef6170d31800141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/30ef6170d31800141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/50323267b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/50323267b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/50323267b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/50323267b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/60952867b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/60952867b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/60952867b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/60952867b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/7048b3c7d12300141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/7048b3c7d12300141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/7048b3c7d12300141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/7048b3c7d12300141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/802f4667b71900141177f3adeef604ca",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/802f4667b71900141177f3adeef604ca",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/802f4667b71900141177f3adeef604ca",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/802f4667b71900141177f3adeef604ca?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/b0a5934f992400141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/b0a5934f992400141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/b0a5934f992400141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/b0a5934f992400141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/c014ab83132100141b1bbe975bb62daf",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/c014ab83132100141b1bbe975bb62daf",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/c014ab83132100141b1bbe975bb62daf",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/c014ab83132100141b1bbe975bb62daf?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/d0bf83b14a2800141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/d0bf83b14a2800141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/d0bf83b14a2800141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/d0bf83b14a2800141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    },
    {
      "sha": "0000000000000000000000000000000000000000",
      "filename": "CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/e0024442472800141606e89edaa2b7ea",
      "status": "modified",
      "additions": 0,
      "deletions": 0,
      "changes": 0,
      "blob_url": "https://github.com/couchbaselabs/cloudhosting/blob/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/e0024442472800141606e89edaa2b7ea",
      "raw_url": "https://github.com/couchbaselabs/cloudhosting/raw/1d4e4af3c963b65525e7521f88bf9091d73bf44b/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/e0024442472800141606e89edaa2b7ea",
      "contents_url": "https://api.github.com/repos/couchbaselabs/cloudhosting/contents/CouchbaseCloud/.metadata/.plugins/org.eclipse.core.resources/.history/1c/e0024442472800141606e89edaa2b7ea?ref=1d4e4af3c963b65525e7521f88bf9091d73bf44b"
    }
  ]
}
